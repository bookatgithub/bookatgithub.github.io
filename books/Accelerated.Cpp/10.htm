<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>2.3 Writing an unknown number of rows</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="9.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="11.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>2.3 Writing an unknown number of rows</h3>
<p>We can think of our output as a rectangular array of characters, which we must write one 
row at a time. Although we don't know how many rows it has, we do know how to compute 
the number of rows.</p>
<p>The greeting takes up one row, as do the top and bottom rows of the frame. We've 
accounted for three rows so far. If we know how many blank rows we intend to leave 
between the greeting and the frame, we can double that number and add three to obtain 
the total number of rows in the output:</p>
<div class="prebox"><pre>
// <i>the number of blanks surrounding the greeting</i>
const int pad = 1;

// <i>total number of rows to write</i>
const int rows = pad * 2 + 3;
</pre></div>
<p>We want to make it easy to find the part of our program that defines the number of 
blanks, so we give that number a name. The variable called <code>pad</code> represents the amount of 
padding around the frame. Having defined <code>pad</code>, we use it in computing <code>rows</code>, which 
will control how many rows we write.</p>
<p>The built-in type <code>int</code> is the most natural type to use for integers, so we've chosen that 
type for <code>pad</code> and <code>rows</code>. We also said that both variables are <code>const</code>, which we know from 
&sect;1.2/13 is a promise that we will not change the value of either <code>pad</code> or <code>rows</code>.</p>
<p>Looking ahead, we intend to use the same number of blanks on the left and right sides 
as on the top and bottom, so one variable will serve for all four sides. If we are careful to 
use this variable every time we want to refer to the number of blanks, changing the size of 
the frame will require only changing the program to give the variable a different value.</p>
<p>We have computed how many rows we need to write; our next problem is to do so:</p>
<div class="prebox"><pre>
// <i>separate the output from the input</i>
std::cout &lt;&lt; std::endl;

// <i>write</i> rows <i>rows of output</i>
int r = 0;

// <i>invariant: we have written r rows so far</i>
while (r != rows) {
    // <i>write a row of output (as we will describe in &sect;2.4/22)</i>
    std::cout &lt;&lt; std::endl;
    ++r;
}
</pre></div>
<p>We start, as we did in &sect;1.2/12, by writing a blank line, so that there will be some space 
between the input and the output. The rest of this fragment contains so many new ideas 
that we need to look at it closely. Once we've understood how it works, we'll think about 
how to write each individual row.</p>
<h4>2.3.1 The while statement</h4>
<p>Our program controls how many rows of output it writes by using a <b>while</b> <i><b>statement</b></i>, 
which repeatedly executes a given statement as long as a given condition is true. A 
<code>while</code> statement has the form</p>
<div class="prebox"><pre>
while (<i>condition</i>) 
      <i>statement</i>
</pre></div>
<p>The <i>statement</i> is often called the <b>while</b> <i><b>body</b></i>.</p>
<p>The <code>while</code> statement begins by testing the value of the condition. If the condition is 
false, it does not execute the body at all. Otherwise, it executes the body once, after which 
it tests the condition again, and so on. The <code>while</code> alternates between testing the condition 
and executing the body until the condition is false, at which point execution continues 
after the end of the entire <code>while</code> statement.</p>
<p>Loosely speaking, we can think of the <code>while</code> statement in our example as saying, &quot;As 
long as the value of <code>r</code> is not equal to <code>rows</code>, do whatever is within the <code>{ }</code>.&quot;</p>
<p>It is conventional to put the <code>while</code> body on a separate line and indent it, to make programs 
easier to read. The implementation doesn't stop us from writing</p>
<div class="prebox"><pre>
while (<i>condition</i>) <i>statement</i>
</pre></div>
<p>but if we do so, we should think about whether we might be making life harder for other 
people who might read our program.</p>
<p>Note that there is no semicolon after <i>statement</i> in this description. Either the <i>statement</i> 
is indeed just a statement, or it is a <i><b>block</b></i>, which is a sequence of zero or more statements 
enclosed in <code>{ }</code>. If the statement is just an ordinary statement, it will end with a semicolon 
of its own, so there's no need for another one. If it is a block, the block's <code>}</code> marks the 
end of the statement, so again there's no need for a semicolon. Because a block is a 
sequence of statements enclosed by braces, we know from &sect;0.7/5 that a block is a scope.</p>
<p>The <i>while</i> begins by testing its <i><b>condition</b></i>, which is an expression that appears in a context 
where a truth value is required. The expression <code>r != rows</code> is an example of a condition. 
This example uses the <i><b>inequality operator</b></i>, <code>!=</code>, to compare <code>r</code> and <code>rows</code>. Such an 
expression has type <b>bool</b>, which is a built-in type that represents truth values. The two 
possible values of type <code>bool</code> are <b>true</b> and <b>false</b>, with the obvious meanings.</p>
<p>The other new facility in this program is the last statement in the <code>while</code> body, which is</p>
<div class="prebox"><pre>
++r;
</pre></div>
<p>The <code>++</code> is the <i>increment<b></b></i> operator, which has the effect of incrementing-adding <code>1</code> to-the 
variable <code>r</code>. We could have written</p>
<div class="prebox"><pre>
r = r + 1;
</pre></div>
<p>instead, but incrementing an object is so common that a special notation for doing so is 
useful. Moreover, as we shall see in &sect;5.1.2/79, the idea of transforming a value into its 
immediate successor, in contrast with computing an arbitrary value, is so fundamental to 
abstract data structures that it deserves a special notation for that reason alone.</p>
<h4>2.3.2 Designing a while statement</h4>
<p>Determining exactly what condition to write in a <code>while</code> statement is sometimes difficult. 
Similarly, it can be hard to understand precisely what a particular <code>while</code> statement does. 
It is not too hard to see that the <code>while</code> statement in &sect;2.3/19 will write a number of output 
rows that depends on the value of <code>rows</code>, but how can we be confident that we know 
exactly how many rows the program will write? For example, how do we know 
whether the number will be <code>rows, rows - 1, rows + 1</code>, or something else entirely? We could trace 
through the <code>while</code> by hand, noting the effect of each statement's execution on the state of 
the program, but how do we know that we haven't made a mistake along the way?</p>
<p>There is a useful technique for writing and understanding <code>while</code> statements that relies 
on two key ideas-one about the definition of a <code>while</code> statement, and the other about the 
behavior of programs in general.</p>
<p>The first idea is that when a <code>while</code> finishes, its condition must be <code>false</code>-otherwise 
the <code>while</code> wouldn't have finished. So, for example, when the <code>while</code> in &sect;2.3/19 finishes, 
we know that <code>r != rows</code> is false and, therefore, that <code>r</code> is equal to <code>rows</code>.</p>
<p>The second idea is that of a <i><b>loop invariant</b></i>, which is a property that we assert will be 
true about a <code>while</code> each time it is about to test its condition. We choose an invariant that 
we can use to convince ourselves that the program behaves as we intend, and we write 
the program so as to make the invariant true at the proper times. Although the invariant 
is not part of the program text, it is a valuable intellectual tool for designing programs. 
Every useful <code>while</code> statement that we can imagine has an invariant associated with it. 
Stating the invariant in a comment can make a <code>while</code> much easier to understand.</p>
<p>To make this discussion concrete, we will look again at the <code>while</code> statement in 
&sect;2.3/19. The comment immediately before the <code>while</code> says what the invariant is: <i>We have 
written</i> r <i>rows of output so far</i>.</p>
<p>To determine that this invariant is correct for this program fragment, we must verify 
that the invariant is true each time the <code>while</code> is about to test its condition. Doing so 
requires us to verify that the invariant will be true at two specific points in the program.</p>
<p>The first point is just before the <code>while</code> tests its condition for the first time. It is easy to 
verify the invariant at this point in our example: Because we have written no rows of output 
so far, it is obvious that setting <code>r</code> to 0 makes the invariant true.</p>
<p>The second point is just before we reach the end of the <code>while</code> body. If the invariant is 
true there, it will be true the next time the <code>while</code> tests the condition. Therefore, 
the invariant will be true every time.</p>
<p>In exchange for writing our program so that it meets these two requirements-causing 
the invariant to be true before the <code>while</code> starts, and again at the end of the <code>while</code> 
body-we can be confident that the invariant is true not only each time the <code>while</code> tests 
the condition, but also after the <code>while</code> finishes. Otherwise, the invariant would have had 
to be true at the beginning of one of the iterations of the <code>while</code> body and false 
afterward-and we have already arranged for that to be impossible.</p>
<p>Here is a summary of what we know about our program fragment:</p>
<div class="prebox"><pre>
// <i>invariant: we have written</i> r <i>rows so far</i>
int r = 0;</p>
// <i>setting r to 0 makes the invariant true</i>
while (r != rows) {
    // <i>we can assume that the invariant is true here</i>

    //<i> writing a row of output makes the invariant false</i>
    std::cout &lt;&lt; std::endl;

    // <i>incrementing r makes the invariant true again</i>
    ++r;
}
// <i>we can conclude that the invariant is true here</i>
</pre></div>
<p>The invariant for our <code>while</code> is that we have written <code>r</code> rows of output so far. When we 
define <code>r</code>, we give it an initial value of 0. At this point, we haven't written anything at all. 
Setting <code>r</code> to 0 obviously makes the invariant true, so we have met the first requirement.</p>
<p>To meet the second requirement, we must verify that whenever the invariant is true 
when the <code>while</code> is about to test its condition, a trip through the condition and body will leave the invariant true at the end of the body.</p>
<p>Writing a row of output causes the invariant to become false, because <code>r</code> is no longer 
the number of rows we have written. However, incrementing <code>r</code> to account for the row 
that was written will make the invariant true again. Doing so makes the invariant true at 
the end of the body, so we have met the second requirement.</p>
<p>Because both requirements are true, we know that after the <code>while</code> finishes, we have 
written <code>r</code> rows. Moreover, we have already seen that <code>r == rows</code>. Together, these two 
facts imply that <code>rows</code> is the total number of rows that we have written.</p>
<p>The strategy that we used to understand this loop will come in handy in a variety of 
contexts. The general idea is to find an invariant that states a relevant property of the 
variables that the loop involves (we have written <code>r</code> rows), and to use the condition to 
ensure that when the loop completes, those variables will have useful values (<code>r == rows</code>). 
The loop body's job is then to manipulate the relevant variables so as to arrange for the 
condition to be false eventually, while maintaining the truth of the invariant.</p>
<div class="prevnext">
<a href="9.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="11.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>