<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>A.1 Declarations</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="101.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="103.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>A.1 Declarations</h3>
<p>Declarations can be hard to understand, especially if they declare several names with different 
types or deal with functions that return pointers to functions. For example, in 
&sect;10.1.1/171, we saw that</p>
<div class="prebox"><pre>
int* p, q;
</pre></div>
<p>defines <code>p</code> as an object of type &quot;pointer to <code>int</code>&quot; and <code>q</code> as an object of type <code>int</code>, and in 
&sect;10.1.2/173, we saw that</p>
<div class="prebox"><pre>
double (*get_analysis_ptr())(const vector&lt;Student_info&gt;&amp;);
</pre></div>
<p>declares <code>get_analysis_ptr</code> as a function, with no arguments, that returns a pointer to 
a function with a <code>const vector&lt;Student_info&gt;&amp;</code> argument that returns <code>double</code>. 
You can clarify such declarations by rewriting them, for example, as</p>
<div class="prebox"><pre>
int* p;
int q;
</pre></div>
<p>and</p>
<div class="prebox"><pre>
// <i>define </i>analysis_fp <i>as a name for the type of a function that takes a </i>
// const vector&lt;Student_info&gt;&amp; <i>argument and returns a </i>double
typedef double (*analysis_fp)(const vector&lt;Student_info&gt;&amp;);
analysis_fp get_analysis_ptr();
</pre></div>
<p>Unfortunately, that strategy won't save you from having to read confusing declarations in 
other people's programs.</p>
<p>In general, a declaration looks like</p>
<div class="prebox"><pre>
<i>declaration-stmt: decl-specifiers [ declarator [ initializer ]] [, declarator [ initializer ]]... ;</i>
</pre></div>
<p>It declares a name for each of its <i><code>declarators</code>. </i>These names are meaningful from where 
they are declared to the end of the declaration's scope. Some declarations are also definitions. 
Names may be declared multiple times but must be defined only once. A declaration is a definition 
if it allocates storage or defines a class or function body.</p>
<p>C++ inherits its declaration syntax from C. The key to understanding declarations is to 
realize that each declaration consists of two parts: a sequence of <i><code>decl-specifiers</code> </i>that collectively 
specify a type and other attributes of what is being declared, followed zero or more 
<i><code>declarators</code> </i>(each of which can optionally have an associated <i><code>initializer</code>). </i>Each declarator 
ascribes to a name a type that depends on the specifiers and on the form of the declarator.</p>
<p>The first step in understanding any declaration is to locate the boundary between the 
specifiers and the declarators. Doing so is surprisingly simple: All the specifiers are keywords 
or names of types, so the specifiers end just before the first symbol that isn't one of 
those. For example, in</p>
<div class="prebox"><pre>
const char * const * const * cp;
</pre></div>
<p>the first symbol that is neither a keyword nor the name of a type is <code>*</code>, so the specifiers are 
<code>const char</code>, and the (only) declarator is <code>* const * const * cp</code>.</p>
<p>As another example, consider the arcane declaration from &sect;10.1.2/173:</p>
<div class="prebox"><pre>
double (*get_analysis_ptr())(const vector&lt;Student_info&gt;&amp;);
</pre></div>
<p>The boundary here is easy to find: <code>double</code> names a type, and the open parenthesis that 
follows it is neither a keyword nor the name of a type. Therefore, the <i><code>decl-specifiers</code> </i>part is 
just <code>double</code>, and the declarator is the rest of the declaration, not including the semicolon.</p>
<h4>A.1.1 Specifiers</h4>
<p>We can divide the <i><code>decl-specifiers</code> </i>into three broad categories: type specifiers, storage-class 
specifiers, and miscellaneous specifiers:</p>
<div class="prebox"><pre>
<i>decl-specifiers: {type-specifier </i>| <i>storage-class-specifier | other-decl-specifier} ...</i>
</pre></div>
<p>However, this division serves only to aid understanding, because there is no corresponding 
division in declarations themselves: <i><code>decl-specifiers</code> </i>can appear in any order.</p>
<p><b>Type specifiers </b>determine the type that underlies any declaration. We discuss the 
built-in types themselves in &sect;A.2/299.</p>
<div class="prebox"><pre>
<i>type-specifier:</i> char | wchar_t | bool | short | int | long | signed
            unsigned | float | double | void | <i>type-name |</i> const | volatile

<i>type-name: class-name | enum-name | typedef-name</i>
</pre></div>
<p>The <code>const</code> specifier says that objects of the type may not be modified, <code>volatile</code> tells 
the compiler that the variable may change in ways outside the definition of the language 
and that aggressive optimizations should be avoided.</p>
<p>Note that <code>const</code> can appear both as part of the specifiers, thus modifying the type, 
and as part of the declarator, specifying a <code>const</code> pointer. There is never any ambiguity 
because a <code>const</code> that is part of a declarator always follows a <code>*</code>.</p>
<p><b>Storage-class specifiers </b>determine the location and lifetime of a variable:</p>
<div class="prebox"><pre>
<i>storage-class-specifiers: </i>register | static | extern | mutable
</pre></div>
<p>The <code>register</code> specifier suggests that the compiler should try to optimize performance by 
putting the object into a register if possible.</p>
<p>Ordinarily, local variables are destroyed on exit from the block in which they were 
declared; <code>static</code> variables are preserved across entry and exit from a scope.</p>
<p>The <code>extern</code> specifier indicates that the current declaration is not a definition, implying 
that there is a corresponding definition elsewhere.</p>
<p>The <code>mutable</code> storage class is used only for class <i><code>data-members</code>, </i>and allows those <i><code>data-members</code> </i>
to be modified even if they are members of <code>const</code> objects.</p>
<p><b>Other declaration specifiers </b>define properties that are not related to types:</p>
<div class="prebox"><pre>
<i>other-decl-specifier: </i>friend | inline | virtual | typedef
</pre></div>
<p>The <code>friend</code> specifier (&sect;12.3.2/216 and &sect;13.4.2/246) overrides protection.</p>
<p><code>inline</code> is a specifier for function definitions and is a hint to the compiler to lay the 
code down inline if possible. The definition of the function must be in scope when the call 
is to be expanded, so it is usually a good idea to put the body of an inline function into the 
same header that declares the function.</p>
<p>The <code>virtual</code> specifier (&sect;13.2.1/234) may be used only with member functions, and 
denotes a function for which calls can be dynamically bound.</p>
<p>The <code>typedef</code> specifier (&sect;3.2.2/43) defines a synonym for a type.</p>
<h4>A.1.2 Declarators</h4>
<p>A declaration declares one entity for each declarator, giving that entity a name, and 
implicitly giving the entity the storage class, type, and other attributes as specified by the 
specifiers. The specifiers and declarator together determine whether the name names an 
object, array, pointer, reference, or function. For example,</p>
<div class="prebox"><pre>
int *x, f();
</pre></div>
<p></p>
<p>declares that <code>x</code> is a pointer to <code>int</code> and <code>f</code> is a function returning <code>int</code>. It is the declarators 
<code>*x</code> and <code>f()</code> that make the distinction between the types of <code>x</code> and <code>f</code>.</p>
<div class="prebox"><pre>
<i>declarator: [ * [ </i>const<i> ] | &amp; ]... direct-declarator

direct-declarator: declarator-id | ( declarator ) |
     direct-declarator ( parameter-declaration-list ) | 
     direct-declarator [ constant-expression ]</i>
</pre></div>
<p><i><code>A declarator-id</code> </i>is an <i><code>identifier</code>, </i>possibly qualified:</p>
<div class="prebox"><pre>
<i>declarator-id: [ nested-name-specifier ] identifier

nested-name-specifier: { class-or-namespace-name ::}...</i>
</pre></div>
<p>If a declarator is a <i><code>direct-declarator</code> </i>that consists only of a <i><code>declarator-id</code>, </i>then it specifies that 
the identifier being declared has the properties implied by the <i><code>decl-specifiers</code>, </i>without further 
modification. For example, in the declaration</p>
<div class="prebox"><pre>
int n;
</pre></div>
<p>the declarator is <code>n</code>, which is a <i><code>direct-declarator</code> </i>that consists only of a <i><code>declarator-id</code>, </i>so by 
implication, <code>n</code> has type <code>int</code>.</p>
<p>If a declarator has one of the other possible forms, then you can determine the type of 
the identifier as follows: First, let <code>T</code> be the type implied by the <i>decl-specifiers, </i>ignoring non-
type properties such as <code>friend</code> or <code>static</code>, and let <code>D</code> be the declarator. Then repeat the 
following steps until you have reduced <code>D</code> to a <i><code>declarator-id</code>, </i>at which point <code>T</code> is the type 
you seek:</p>
<ol>
<li>If <code>D</code> has the form (<code>D1</code>), then replace <code>D</code> with <code>D1</code>.</li>
<li>If <code>D</code> has the form <code>* D1</code> or <code>* const D1</code>, replace <code>T</code> with &quot;pointer to <code>T</code>&quot; or 
&quot;constant pointer to <code>T</code>&quot; (<i>not </i>&quot;pointer to constant <code>T</code>&quot;), depending on whether the <code>const</code> is 
present. Then replace <code>D</code> with <code>D1</code>.</li>
<li>If <code>D</code> has the form <code>D1</code> <i>(parameter-declaration-list), </i>replace <code>T</code> with &quot;function returning <code>T</code>&quot; 
with arguments as defined by the <i>parameter-declaration-list, </i>and replace <code>D</code> with <code>D1</code>.</li>
<li>If <code>D</code> has the form <code>D1</code> [<i>constant-expression</i>], then replace <code>T</code> with &quot;array of <code>T</code>&quot; that has the 
number of elements given by the <i>constant-expression, </i>and replace <code>D</code> with <code>D1</code>.</li>
<li>Finally, if the declarator has the form <code>&amp; D1</code>, then replace <code>T</code> with &quot;reference to <code>T</code>&quot; and <code>D</code> 
with <code>D1</code>.</li>
</ol>
<p>As an example, consider the declaration</p>
<div class="prebox"><pre>
int *f();
</pre></div>
<p>We start with <code>T</code> and <code>D</code> being <code>int</code> and <code>*f()</code>, so <code>D</code> has the form <code>*D1</code>, where <code>D1</code> is <code>f()</code>.</p>
<p>You might think that <code>D</code> could have either of the forms <code>D1()</code> or <code>*D1</code>. However, if <code>D</code> had 
form <code>D1()</code>, then <code>D1</code> would have to be <code>*f</code>, and <code>D1</code> would also have to be a 
<i>direct-declarator </i>(because the grammar at the beginning of this section allows only a <i>direct-declarator </i>to 
precede ()). If we look at the definition of <i>direct-declarator, </i>however, we see that it cannot 
contain a <code>*</code>. Therefore, <code>D</code> can only be <code>*f()</code>, which has the form <code>*D1</code>, where <code>D</code> is <code>f()</code>.</p>
<p>Now that we have determined that <code>D1</code> is <code>f()</code>, we know that we must replace <code>T</code> 
with &quot;pointer to <code>T</code>, &quot; which is &quot;pointer to <code>int</code>, &quot; and replace <code>D</code> with <code>f()</code>.</p>
<p>We have not yet reduced <code>D</code> to a <i>declarator-id, </i>so we must repeat the process. This time, 
<code>D1</code> can only be f, so we replace T with &quot;function returning T,&quot; which is &quot;function returning 
pointer to <code>int</code> with no arguments,&quot; and we replace <code>D</code> with <code>f</code>.</p>
<p>At this point we have reduced <code>D</code> to a <i>declarator-id, </i>so we're done. We have determined that the declaration</p>
<div class="prebox"><pre>
int *f();
</pre></div>
<p>declares <code>f</code> to have type &quot;function with no arguments returning pointer to <code>int</code>.
&quot; As another example, the declaration</p>
<div class="prebox"><pre>
int* p, q;
</pre></div>
<p>has two declarators, <code>*p</code> and <code>q</code>. For each declarator, <code>T</code> is <code>int</code>. For the first declarator, <code>D</code> is 
<code>*p</code>, so we transform <code>T</code> to &quot;pointer to <code>int</code>,&quot; and <code>D</code> to <code>p</code>. The declaration, therefore, gives <code>p</code> 
the type &quot;pointer to <code>int</code>.&quot;</p>
<p>We analyze the second declarator independently, with<code> </code>T again being <code>int</code> and <code>D</code> being 
<code>q</code>. At this point it should be obvious that the declaration gives <code>q</code> the type <code>int</code>.</p>
<p>Finally, let's analyze the arcane example from &sect;10.1.2/173:</p>
<div class="prebox"><pre>
double (*get_analysis_ptr())(const vector&lt;Student_info&gt;&amp;);
</pre></div>
<p> The analysis proceeds in the following five stages:</p>
<ol>
<li><code>T: double &nbsp;&nbsp;&nbsp;D: (*get_analysis_ptr())(const vector&lt;Student_info&gt;&amp;)</code></li>
<li><code>T:</code> function returning <code>double</code> with <code>const vector&lt;Student_info&gt;&amp;</code> argument 
&nbsp;&nbsp;&nbsp;<code>D: (*get_analysis_ptr())</code></li>
<li><code>T:</code> function returning <code>double</code>... (as before) &nbsp;&nbsp;&nbsp;<code>D: *get_analysis_ptr()</code></li>
<li><code>T:</code> pointer to function returning <code>double</code>...   &nbsp;&nbsp;&nbsp;<code>D: get_analysis_ptr()</code></li>
<li><code>T:</code> function returning pointer to function returning <code>double</code>... &nbsp;&nbsp;&nbsp;<code>D: get_analysis_ptr</code></li>
</ol>
<p>In other words, we learn that <code>get_analysis_ptr</code> is a function that returns a pointer to a 
function that returns a <code>double</code> result, and takes a <code>const vector&lt;Student_info&gt;&amp;</code> as 
its argument. We leave unwinding <code>const vector&lt;Student_info&gt;&amp;</code> as an exercise. 
Fortunately, few function declarations are this confusing; most of them look like</p>
<div class="prebox"><pre>
<i>declarator: declarator-id ( parameter-declaration-list )</i>
</pre></div>
<p>By far the most common difficult case is a function that returns a pointer to function.</p>
<div class="prevnext">
<a href="101.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="103.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>