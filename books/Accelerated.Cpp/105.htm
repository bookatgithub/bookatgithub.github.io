<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>A.4 Statements</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="104.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="106.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>A.4 Statements</h3>
<p>Like most programming languages, C++ distinguishes between declarations, expressions, 
and statements. In appropriate contexts, declarations and statements can be nested within 
other declarations and statements, but neither can be nested inside an expression. Every 
statement ultimately appears inside the definition of a function, where it forms part of 
what happens when that function is called.</p>
<p>Unless otherwise specified, the statements that constitute a function are executed in 
the order in which they appear. Exceptions include loops; calls to functions; the <code>goto, break</code>, 
and <code>continue</code> statements; and the <code>try</code> and <code>throw</code> statements associated with 
exception handling.</p>
<p>Statements are written in free form. Beginning a new line in midstatement does not 
affect the statement's meaning. Most statements end with semicolons—the main exception 
is the block (which begins with <code>{</code> and ends with <code>})</code>.</p>
<p><code>;</code> </p>
<div class="details">
Null statement; has no effect when executed.
</div>
<p><code>e;</code></p>
<div class="details">
Expression statement; evaluates <code>e</code> for its side effects.
</div>
<p><code>{ }</code></p>
<div class="details">
Statement block; executes statements in the block in sequence. Declarations in the block persist (only) until closing brace.
</div>
<p><code>if <i>(condition) statement1</i></code></p>
<div class="details">
Evaluates <i><code>condition</code> </i>and executes <i><code>statementl</code> </i>if <i><code>condition</code> </i>is <code>true</code>.
</div>
<p><code>if <i>(condition) statement1 </i>else <i>statement2</code></i></p>
<div class="details">
Evaluates the <i><code>condition</code> </i>and executes <i><code>statement1</code> </i>if <i><code>condition</code> </i>is <code>true</code>; otherwise executes 
<i><code>statement2</code></i>. Each <code>else</code> is associated with the nearest unmatched if. 
</div>
<p><code>while <i>(condition) statement</i></code></p>
<div class="details">
Tests <i><code>condition</code> </i>and executes <i><code>statement</code> </i>so long as <i><code>condition</code> </i>is <code>true</code>.
</div>
<p><code>do <i>statement </i>while <i>(condition) </i>;</code></p>
<div class="details">
Executes <i><code>statement</code> </i>and then tests <i><code>condition</code>. </i>Continues executing <i><code>statement</code> </i>until 
<i><code>condition</code> </i>is <code>false</code>,
</div>
<p><code>for <i>(init-stmt condition</i>; <i>expression) statement</i></code></p>
<div class="details">
Executes <i><code>init-stmt</code> </i>once on entry to the loop and then tests <i><code>condition</code>. </i>If <i><code>condition</code> </i>is 
<code>true</code>, executes <i><code>statement</code> </i>and then executes <i><code>expression</code>. </i>Continues testing <i><code>condition</code>,</i> 
followed by <i><code>statement</code> </i>and <i><code>expression</code>, </i>until <i><code>condition</code> </i>is <code>false</code>. 
If <i><code>init-stmt</code> </i>is a declaration, then the scope of the variable is the for <i><code>statement</code> </i>itself. 
</div>
<p><code>switch <i>(expression) statement</i></code></p>
<div class="details">
In practice, <i><code>statement</code> </i>is almost always a block that includes labeled statements with 
labels of the form 
<div class="prebox"><pre>
case <i>value:</i>
</pre></div>
where each <i>value </i>must be a distinct integral constant expression (&sect;A.2.3/303). In addition, the label 
<div class="prebox"><pre>
default:
</pre></div>
may appear, but no more than once. 
Executing a <code>switch</code> statement evaluates <i><code>expression</code> </i>and jumps to the <code>case</code> label 
whose value matches it. If there is no match, control passes to the <code>default</code>: label, 
if any, or to the point immediately after the entire <code>switch</code> statement. 
Because case labels are just labels, control will flow from one to the next unless 
the programmer takes explicit action to prevent it from doing so. The usual such 
action is to use a <code>break</code> statement before each <code>case</code> label after the first.
</div>
<p><code>break</code>;</p>
<div class="details">
Jumps to the point immediately after the end of the nearest enclosing <code>while, for, do</code>, or <code>switch</code> statement.
</div>
<p><code>continue</code>;</p>
<div class="details">
Jumps back to the beginning of the next iteration (including the test) in the nearest enclosing <code>for, while</code>, or <code>do</code> statement.
</div>
<p><code>goto <i>label;</i></code></p>
<div class="details">
Behaves similarly to such statements in other languages. The target of a <code>goto</code> is a 
label, which is an identifier followed by a colon. Labels can have the same names 
as other entities without ambiguity. The scope of a label is the entire function in 
which it appears, which implies that it is possible to jump from outside a block to 
inside it. However, such a jump cannot bypass the initialization of a variable.
</div>
<p><code>try  { <i>statements }</i> catch   <i>(parameter-1)   { statements-1 }<br />
[</i> catch  <i>(parameter-2)   {statements-2}]...</i></code></p>
<div class="details">
Executes code in <i><code>statements</code> </i>that might throw an exception, which should be handled 
by the one or more catch clauses that follow. 
The <code>catch</code> clause handles exceptions whose thrown value is of similar type to 
the type of <i><code>parameter-n </code></i>by executing code in <i><code>statements-n</code>. </i>Similar here means that 
the thrown value has the same type as the parameter or a type derived from the 
parameter's type. If the <code>catch</code> has the form <code>catch (...)</code>, then the clause catches any otherwise 
uncaught exception. 
If there is no appropriate <code>catch</code> that matches the type of the exception, then the 
exception propagates out of the function to the nearest enclosing <code>try</code>. If there is 
no appropriate <code>try</code>, then the program terminates.
</div>
<p><code>throw <i>expression </i>;</code></p>
<div class="details">
Terminates the program or transfers control to a <code>catch</code> clause of a <code>try</code> statement 
whose execution is in progress. Passes <i><code>expression</code> </i>whose type determines which 
<code>catch</code> clause can handle the exception. If no appropriate <code>try</code> statement is currently 
being executed, the program terminates. Exceptions are often class objects, and are usually thrown in one function and 
caught in another.
</div>
<div class="prevnext">
<a href="104.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="106.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>