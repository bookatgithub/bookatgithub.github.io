<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>B.1 Input-output</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="106.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="108.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>B.1 Input-output</h3>
<p>Objects of classes <code>istream</code>, <code>ostream</code>, <code>ifstream</code>, and <code>ofstream</code> denote sequential 
streams, with an object being bound to a single stream at any one time. Objects of these 
types cannot be copied or assigned; therefore, the only way to pass a stream to or from a 
function is through a pointer or a reference.</p>
<p><b>Fundamentals</b></p>
<p><code>#include &lt;iostream&gt;</code></p>
<div class="details">
Declares input-output classes and associated operations.
</div>
<p><code>cout</code><br /><code>cerr</code><br /><code>clog</code></p>
<div class="details">
Objects of type <code>ostream</code> bound to the standard output (<code>cout</code>) and error 
(<code>cerr, clog</code>) streams.  Output to <code>cout</code> and <code>clog</code> is buffered by default; 
output to <code>cerr</code> is unbuffered by default.
</div>
<p><code>cin</code></p>
<div class="details">
An object of type <code>istream</code> bound to the standard input stream.
</div>
<p><b>Reading and writing</b></p>
<p><code>is &gt;&gt; t</code></p>
<div class="details">
Conventionally, reads a value from <code>is</code> into t after skipping whitespace. 
The input must be in a form suitable for conversion to the type of t, which 
must be a non<code>const</code> lvalue. Unsuitable input causes the request to fail, 
leaving <code>is</code> in failure state until a call is made to <code>is.clear()</code>. The library 
defines the input operator for the built-in types and <code>string</code>; class authors 
are encouraged to follow suit.
</div>
<p><code>os &lt;&lt; t</code></p>
<div class="details">
Conventionally, sends the value of t to <code>os</code> in a format appropriate to the 
type of <code>t</code>. The library defines <code>&lt;&lt;</code> for built-in types and <code>string</code>; class 
authors are encouraged to follow suit.
</div>
<p><code>is.get(c)</code></p>
<div class="details">
Reads the next character, even if it is a whitespace character, from <code>is</code> into <code>c</code>.
</div>
<p><code>is.unget()</code></p>
<div class="details">
Backs up the stream <code>is</code> by one character. Useful when we want to read 
until we hit a particular character, and then want to leave that character on 
the stream for subsequent processing. Only one character of pushback 
memory is guaranteed.
</div>
<p><b>Iterators</b></p>
<p><code>#include &lt;iterator&gt;</code></p>
<div class="details">
Declares input and output stream iterators.
</div>
<p><code>istream_iterator&lt;T&gt; in(is);</code></p>
<div class="details">
Defines <code>in</code> as an input iterator that reads values of type <code>T</code> from <code>is</code>.
</div>
<p><code>ostream_iterator&lt;T&gt; out(os, const char* sep = &quot;&quot;);</code></p>
<div class="details">
Defines out as an output iterator that writes values of type <code>T</code> on the stream 
<code>os</code>, writing <code>sep</code> as separator value after each element. By default, the separator 
is a null string, but it can be a string literal (&sect;10.2/176) or a pointer to a 
null-terminated array of characters.
</div>
<p><b>File streams</b></p>
<p><code>#include &lt;fstream&gt;</code></p>
<div class="details">
Declares facilities for input-output to streams that are attached to files.
</div>
<p><code>ifstream is(cp);</code></p>
<div class="details">
Defines <code>is</code> and attaches it to the file named (in an implementation-
dependent manner) by <code>cp</code>. Class <code>if</code> stream is derived from <code>istream</code>.
</div>
<p><code>ofstream os(cp);</code></p>
<div class="details">
Defines <code>os</code> and attaches it to the file named by <code>cp</code>. Class <code>ofstream</code> is 
derived from <code>ostream</code>.
</div>
<p><b>Controlling output format</b></p>
<p><code>#include &lt;ios&gt;</code></p>
<div class="details">
Defines the <code>streamsize</code> type, which is a signed integral type that is appropriate 
to represent the sizes of input-output buffers.
</div>
<p><code>os.width()</code><br />
<code>os.width(n)</code></p>
<div class="details">
Returns the width (as a <code>streamsize</code>) previously associated with <code>os</code>. 
Sets the width to <code>n</code> if given. The next item written on that stream will be padded 
on the left to the stream's width, after which the width will be reset to 0.
</div>
<p><code>os.precision()</code><br />
<code>os.precision(n)</code></p>
<div class="details">
Returns the precision (as a <code>streamsize</code>) previously associated with <code>os</code>. 
Sets the precision to <code>n</code> if given. Subsequent floating-point values written on 
that stream will appear with the given number of significant digits.
</div>
<p></p>
<p><b>Manipulators</b></p>
<p><code>#include &lt;iomanip&gt;</code></p>
<div class="details">
Declares manipulators other than <code>endl</code>, which is declared in <code>&lt;iostream&gt;</code>. 
</div>
<p><code>os &lt;&lt; endl</code></p>
<div class="details">
Ends the current output line and flushes the stream associated with <code>os</code>.
</div>
<p><code>os &lt;&lt; flush</code></p>
<div class="details">
Flushes the stream associated with <code>os</code>.
</div>
<p><code>os &lt;&lt; setprecision(n)</code><br />
<code>os &lt;&lt; setw(n)</code></p>
<div class="details">
Equivalent to <code>os.precision(n)</code> and <code>os.width(n)</code> respectively.
</div>
<p><b>Errors and end-of-file</b></p>
<p><code>strm.bad()</code></p>
<div class="details">
Returns a <code>bool</code> indicating whether the last operation on <code>strm</code> failed as a 
result of invalid data.
</div>
<p><code>strm.clear()</code></p>
<div class="details">
Attempts to reset <code>strm</code> so that it can be used after an invalid operation. 
Throws <code>ios::failure</code> if <code>strm</code> cannot be reset. 
</div>
<p><code>strm.eof()</code></p>
<div class="details">
Returns a <code>bool</code> indicating whether <code>strm</code> has hit end-of-file. 
</div>
<p><code>strm.fail()</code></p>
<div class="details">
Returns a <code>bool</code> indicating whether the last operation on <code>strm</code> failed as a 
result of hardware or other system-level problems. 
</div>
<p><code>strm.good()</code></p>
<div class="details">
Returns a <code>bool</code> indicating whether the last operation on <code>strm</code> succeeded.
</div>
<div class="prevnext">
<a href="106.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="108.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>