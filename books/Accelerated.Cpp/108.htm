<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>B.2 Containers and iterators</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="107.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="109.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>B.2 Containers and iterators</h3>
<p>This book covers the sequential containers <code>vector</code> and <code>list</code>, the associative container 
<code>map</code>, and class <code>string</code>, which shares many container properties. All containers that provide 
a particular operation use similar interfaces for the operation. We summarize the 
common operations, followed by operations peculiar to specific containers.</p>
<p>Programmers who want to use sequential containers should use <code>vector</code>, unless there 
is a reason to do otherwise. The most common such reason is a desire to insert or delete 
many elements other than at the end of the container, an operation that the <code>list</code> class 
supports much more efficiently than the <code>vector</code> class does.</p>
<h4>B.2.1 Common container operations</h4>
<p>All containers and the <code>string</code> class offer the following interface:</p>
<p><code><i>container</i>&lt;T&gt;::iterator</code></p>
<div class="details">
An iterator type associated with <code><i>container</i>&lt;T&gt;</code>, objects of which type may be 
used to change the values stored in the container.
</div>
<p><code><i>container</i>&lt;T&gt;::const_iterator</code></p>
<div class="details">
An iterator type associated with <code><i>container</i>&lt;T&gt;</code>, objects of which type may be 
used to read, but not to modify, the values stored in the container.
</div>
<p><code><i>container</i>&lt;T&gt;::reverse_iterator</code><br />
<i><code>container</i>&lt;T&gt;::const_reverse_iterator</code></p>
<div class="details">
Iterator types that access the container's elements in reverse order.
</div>
<p><code><i>container</i>&lt;T&gt;::size_type</code></p>
<div class="details">
An unsigned integral type with room for the size of the largest container.
</div>
<p><code><i>container</i>&lt;T&gt;::value_type</code></p>
<div class="details">
The type of the container elements.
</div>
<p><code>c.begin()</code><br />
<code>c.end()</code></p>
<div class="details">
Iterators that denote the first element, if any, and one past the last element of 
<code>c</code>. Both of these functions yield values that have <code>c</code>'s <code>const_iterator</code> or 
<code>iterator</code> type, depending on whether <code>c</code> is <code>const</code>.
</div>
<p><code>c.rbegin()</code><br />
<code>c.rend()</code></p>
<div class="details">
Iterators (of <code>C</code>'s <code>const_reverse_iterator</code> or <code>reverse_iterator</code> type, 
depending on whether <code>c</code> is <code>const</code>) that access <code>c</code>'s elements in reverse order. 
</div>
<p><code><i>container</i>&lt;T&gt; c;</code></p>
<div class="details">
Defines <code>c</code> as an empty <i><code>container</code>, </i>with <code>c.size() == 0</code>.
</div>
<p><code><i>container</i>&lt;T&gt; c2(c);</code></p>
<div class="details">
Defines <code>c2</code> as a <i><code>container</code>, </i>with <code>c2.size() == c.size()</code>. Each element of 
<code>c2</code> is a copy of the corresponding element of <code>c</code>.
</div>
<p><code>c = c2</code></p>
<div class="details">
Replaces <code>c</code>'s elements with copies of <code>c2</code>'s elements. Returns <code>c</code> as an lvalue.
</div>
<p><code>c.size()</code></p>
<div class="details">
The number of elements in <code>c</code>.
</div>
<p><code>c.empty()</code></p>
<div class="details">
Returns <code>true</code> if <code>c</code> is empty, <code>false</code> otherwise. 
</div>
<p><code>c.clear()</code></p>
<div class="details">
Empties the container <code>c</code>. Equivalent to <code>c.erase(c.begin(), c.end())</code>. 
After the Operation completes, <code>c.size() == 0</code>. Returns <code>void</code>.
</div>
<h4>B.2.2 Sequential containers</h4>
<p>In addition to the common container operations, <code>string</code> and the sequential containers 
(<code>vector</code> and <code>list</code>) also support the following operations:</p>
<p><code><i>container</i>&lt;T&gt; c(n, t);</code></p>
<div class="details">
Defines <code>c</code> to have <code>n</code> elements, each of which is a copy of <code>t</code>.
</div>
<p><code><i>container</i>&lt;T&gt; c(b, e);</code></p>
<div class="details">
Defines <code>c</code> and initializes it with a copy of the elements in the sequence 
denoted by the input iterators <code>b</code> and <code>e</code>.
</div>
<p><code>c.insert(it, t)</code><br />
<code>c.insert(it, n, t)</code><br />
<code>c.insert(it, b, e)</code></p>
<div class="details">
Inserts elements into <code>c</code> immediately before it. If <code>c</code> is a <code>vector</code> or <code>string</code>, 
the operation invalidates all iterators that refer to or after the insertion point 
and may cause reallocation, invalidating all iterators into <code>c</code>. Note that for 
<code>vector</code> and <code>string</code>, this operation may be slow if <code>it</code> is far from the end. 
The first form of <code>insert</code> inserts a copy of <code>t</code>, and returns an iterator that 
refers to the newly inserted element. The second form inserts <code>n</code> copies of <code>t</code>, 
and returns <code>void</code>. The third form inserts copies of the elements in the 
sequence denoted by the input iterators <code>b</code> and <code>e</code>, and returns <code>void</code>. The 
iterators <code>b</code> and <code>e</code> must not refer to elements of <code>c</code>.
</div>
<p><code>c.erase(it)</code><br />
<code>c.erase(b, e)</code></p>
<div class="details">
Removes the element denoted by <code>it</code>, or the elements in the range <code>[b, e)</code>, 
from c, invalidating all iterators referring to erased elements. If c is a <code>vector</code> 
or <code>string</code>, then all iterators referring to elements after the erasure are 
also invalidated. Returns an iterator that refers to the position immediately 
after the erasure. Note that <code>erase</code> on a <code>vector</code> or <code>string</code> is slow if 
the erasure is far from the end of the container.
</div>
<p><code>c.assign(b, e)</code></p>
<div class="details">
Replaces <code>c</code>'s elements with the elements in the sequence denoted by the 
input iterators <code>b</code> and <code>e</code>.
</div>
<p><code>c.front()</code></p>
<div class="details">
Returns a reference to the first element of <code>c</code>. Undefined if <code>c</code> is empty.
</div>
<p><code>c.back()</code></p>
<div class="details">
Returns a reference to the last element of <code>c</code>. Undefined if <code>c</code> is empty.
</div>
<p><code>c.push_back(t)</code></p>
<div class="details">
Appends a copy of <code>t</code> to <code>c</code>, increasing the size of <code>c</code> by one. Returns <code>void</code>.
</div>
<p><code>c.pop_back()</code></p>
<div class="details">
Removes the last element from <code>c</code>. Returns <code>void</code>. Undefined if <code>c</code> is empty.
</div>
<p><code>inserter(c, it)</code></p>
<div class="details">
Returns an output iterator that inserts values into <code>c</code> starting immediately 
before the position denoted by <code>it</code>. Declared in <code>&lt;iterator&gt;</code>.
</div>
<p><code>back_inserter(c)</code></p>
<div class="details">
Returns an output iterator that can append new values to the end of <code>c</code> by 
calling <code>c.push_back</code>. Declared in <code>&lt;iterator&gt;</code>.
</div>
<h4>B.2.3 Additional sequential operations</h4>
<p>Some operations are supported only on those containers for which the operations can be 
done efficiently. These include the following:</p>
<p><code>c[n]</code></p>
<div class="details">
A reference to the <code>n</code>th element of <code>c</code>, where the initial element has position 0. 
The reference is <code>const</code> if <code>c</code> is <code>const</code>, and non<code>const</code> otherwise. Undefined 
if <code>n</code> is out of range. Valid only for <code>vector</code> and <code>string</code>.
</div>
<p><code>c.push_front(t)</code></p>
<div class="details">
Inserts a copy of <code>t</code> at the beginning of <code>c</code>, increasing the size of <code>c</code> by one. 
Returns <code>void</code>. Not valid for <code>string</code> or <code>vector</code>.
</div>
<p><code>c.pop_front()</code></p>
<div class="details">
Removes the first element from <code>c</code>. Returns <code>void</code>. Undefined if <code>c</code> is empty. 
Valid only for <code>list</code>.
</div>
<p><code>front_inserter(c)</code></p>
<div class="details">
Returns an output iterator that can insert new values at the front of <code>c</code> by calling 
<code>c.push_front</code>. Declared in <code>&lt;iterator&gt;</code>.
</div>
<h4>B.2.4 Associative containers</h4>
<p>Associative containers are optimized for fast access based on a key. In addition to the 
general container operations outlined in &sect;13.2.1/314, associative containers also provide 
the following:</p>
<p><code><i>container</i>&lt;T&gt;::key_type</code></p>
<div class="details">
The type of the <i><code>container</code>'s </i>key. An associative container with keys of type <code>K</code> 
and elements of type <code>V</code> has a <code>value_type</code> of <code>pair&lt;const K, V&gt;</code>, not <code>V</code>. 
</div>
<p><code><i>container</i>&lt;T&gt; c(cmp);</code></p>
<div class="details">
Defines <code>c</code> as an empty associative container that uses the predicate <code>cmp</code> to 
order the elements.
</div>
<p><code><i>container </i>c(b, e, cmp);</code></p>
<div class="details">
Defines <code>c</code> as an associative container, initialized with a copy of the values in 
the sequence denoted by the input iterators <code>b</code> and <code>e</code>, that uses <code>cmp</code> to order 
the elements. 
</div>
<p><code>c.insert(b, e)</code></p>
<div class="details">
Inserts elements into <code>c</code> from the sequence denoted by the input iterators <code>b</code> 
and <code>e</code>. The <code>map</code> container inserts only those elements whose keys are not 
already in <code>c</code>.
</div>
<p><code>c.erase(it)</code></p>
<div class="details">
Removes the element denoted by the iterator it from <code>c</code>. Returns <code>void</code>. 
</div>
<p><code>c.erase(b, e)</code></p>
<div class="details">
Removes elements in the range <code>[b, e)</code> from <code>c</code>. Returns <code>void</code>. 
</div>
<p><code>c.erase(k)</code></p>
<div class="details">
Removes all elements with key <code>k</code> from <code>c</code>. Returns the number removed. 
</div>
<p><code>c.find(k)</code></p>
<div class="details">
Returns an iterator referring to the element with key equal to <code>k</code>.  Returns 
<code>c.end()</code> if no such element exists.
</div>
<h4>B.2.5 Iterators</h4>
<p>The standard library relies heavily on iterators to make its algorithms data-structure independent. 
Iterators are an abstraction of pointers, in that they provide operations that 
allow access to container elements analogous to what pointers allow on array elements.</p>
<p>The standard algorithms are written to assume that iterators meet requirements that 
the library classifies into <i>iterator categories. </i>Every library algorithm that uses iterators of a 
particular category can work with every library- or user-defined class that provides iterators 
that fall into that category.</p>
<ul>
<li><b>Output: </b>It is possible to use the iterator to advance through the container one element 
at a time, and to write each element visited once and only once.  Example: Class 
<code>ostream_iterator</code> is an output iterator; and the <code>copy</code> algorithm requires only the 
output-iterator properties for its third argument.</li>
<li><b>Input: </b>It is possible to use the iterator to advance through the container one element at 
a time, and to read each element as often as needed before advancing to the next element.  
Example: Class <code>istream_iterator</code> is an input iterator, and the <code>copy</code> algorithm 
requires only input-iterator properties for its first two arguments.</li>
<li><b>Forward: </b>It is possible to use the iterator to advance through the container one element 
at a time, to revisit elements to which previously remembered iterators refer, and to 
read or write each element as often as needed. Example: <code>replace</code> is an algorithm that 
requires forward-iterator properties.</li>
<li><b>Bidirectional: </b>It is possible to use the iterator to move through the container one element 
at a time, either forward or backward. Example: <code>list</code> and <code>map</code> provide bidirectional 
iterators, and reverse is an algorithm that requires bidirectional iterators.</li>
<li><b>Random access: </b>It is possible to move through the container using all the operations 
supported by pointers. Example: <code>vector</code>, <code>string</code>, and built-in arrays support 
random-access iterators. The <code>sort</code> algorithm requires random-access iterators.</li>
</ul>
<p>All iterator categories support testing for (in)equality. Random-access iterators support 
all the relational operations.</p>
<p>Iterator categories can be thought of as cumulative, in the sense that every forward 
iterator is also an input iterator and an output iterator, every bidirectional iterator is also a 
forward iterator, and every random-access iterator is also a bidirectional iterator. Thus, 
any algorithm that accepts any iterator type as an argument will accept a random-access 
iterator. Class <code>ostream_iterator</code> and the insert iterator adaptors provide output iterators, 
and thus can be used only by algorithms that require only output-iterator operations.</p>
<p>All iterators support the following operations:</p>
<p><code>++p</code><br />
<code>p++</code></p>
<div class="details">
Advances <code>p</code> to the next position in the container. <code>++p</code> returns <code>p</code> as an lvalue 
after advancing it; <code>p++</code> returns a copy of <code>p</code>'s previous value.
</div>
<p><code>*p</code></p>
<div class="details">
The element to which <code>p</code> refers. For output iterators, <code>*p</code> may be used only as 
the left operand of <code>=</code>, and each distinct value of <code>p</code> may be used in this way 
only once. For input iterators, <code>*p</code> may be used only for reading; and the act 
of incrementing <code>p</code> invalidates all copies that might have been made of <code>p</code>'s 
previous value.  For all other iterator types, <code>*p</code> yields a reference to the 
value stored in the container element to which <code>p</code> refers, and <code>p</code> remains valid 
as long as the element to which <code>p</code> refers continues to exist.
</div>
<p><code>p == p2</code></p>
<div class="details">
Yields <code>true</code> if <code>p</code> is equal to <code>p2</code>; <code>false</code> otherwise.
</div>
<p><code>p != p2</code></p>
<div class="details">
Yields <code>true</code> if <code>p</code> is not equal to <code>p2</code>; <code>false</code> otherwise.
</div>
<p>All iterators other than output iterators also support</p>
<p><code>p-&gt;x</code></p>
<div class="details">
Equivalent to <code>(*p).x</code>
</div>
<p>Bidirectional and random-access iterators also support decrement operations:</p>
<p><code>--p</code><br />
<code>p--</code></p>
<div class="details">
Advances <code>p</code> backward to refer to the previous element, <code>--p</code> returns <code>p</code> as an 
lvalue after advancing it; <code>p--</code> returns a copy of <code>p</code>'s previous value.
</div>
<p>Random-access iterators provide all of the &quot;pointer&quot; operations, including the following:</p>
<p><code>p + n</code></p>
<div class="details">
If <code>n &gt;= 0</code>, then the result is an iterator that refers to a point <code>n</code> positions 
beyond <code>p</code>. The operation is undefined if fewer than <code>n - 1</code> elements follow 
the element denoted by <code>p</code>. If <code>n &lt; 0</code>, then the result is an iterator that refers 
to the element <code>-n</code> positions before the element denoted by <code>p</code>. The operation 
is undefined unless this element is within range of the container.
</div>
<p><code>n + p</code></p>
<div class="details">
Equivalent to <code>p + n</code>.
</div>
<p><code>p - n</code></p>
<div class="details">
Equivalent to<code> p + (-n)</code>.
</div>
<p><code>p2 - p</code></p>
<div class="details">
Defined only if <code>p</code> and <code>p2</code> refer to positions in the same container. If <code>p2 &gt;= p</code>, 
yields the number of elements in the range <code>[p, p2)</code>. Otherwise, yields the 
negation of the number of elements in the range <code>[p2, p)</code>. The result has 
<code>typeptrdiff_t</code> (&sect;10.1.4/175).
</div>
<p><code>p[n]</code></p>
<div class="details">
Equivalent to <code>*(p + n)</code>.
</div>
<p><code>p &lt; p2</code></p>
<div class="details">
<code>true</code> if <code>p</code> denotes an earlier position in the container than that denoted by 
<code>p2</code>. Undefined if <code>p</code> and <code>p2</code> do not refer to positions in the same container.
</div>
<p><code>p &lt;= p2</code></p>
<div class="details">
Equivalent to <code>(p &lt; p2) || (p == p2)</code>.
</div>
<p><code>p &gt; p2</code></p>
<div class="details">
Equivalent to <code>p2 &lt; p</code>.
</div>
<p><code>p &gt;= p2</code></p>
<div class="details">
Equivalent to <code>p2 &lt;= p</code>.
</div>
<h4>B.2.6 vector</h4>
<p>The <code>vector</code> class provides dynamically allocated, type-independent arrays, and supports 
random-access iterators. In addition to the common sequential-container operations 
(&sect;B.2.1/314 and &sect;B.2.2/315), <code>vector</code> also supports the following:</p>
<p><code>#include &lt;vector&gt;</code></p>
<div class="details">
Declares the <code>vector</code> class and associated operations.
</div>
<p><code>v.reserve(n)</code></p>
<div class="details">
Reallocates <code>v</code> so that it can grow to accommodate at least <code>n</code> elements without 
further reallocation.
</div>
<p><code>v.resize(n)</code></p>
<div class="details">
Reallocates <code>v</code> to hold <code>n</code> elements. Invalidates all iterators referring to elements 
of <code>v</code>. Preserves the first <code>n</code> elements. If the new size is less than the 
old, excess elements are destroyed. If the new size is greater than the old, 
new elements are value-initialized (&sect;9.5/164).
</div>
<h4>B.2.7 list</h4>
<p>The <code>list</code> class provides dynamically allocated, type-independent, doubly linked lists, 
and supports bidirectional iterators (unlike <code>vector</code>, which supports random-access iterators). 
In addition to the general operations on sequential containers (&sect;B.2.1/314 and 
&sect;B.2.2/315), <code>list</code> also supports the following:</p>
<p><code>#include &lt;list&gt;</code></p>
<div class="details">
Declares the <code>list</code> class and associated operations.
</div>
<p><code>l.splice(it, l2)</code></p>
<div class="details">
Inserts all the elements of <code>l2</code> into <code>l</code> immediately before the position denoted 
by <code>it</code>, and removes those elements from <code>l2</code>. Invalidates all iterators and 
references into <code>l2</code>. After completion, <code>l.size()</code> is the sum of the original 
sizes of <code>l</code> and <code>l2</code>, and <code>l2.size() == 0</code>. Returns <code>void</code>.
</div>
<p><code>l.splice(it, l2, it2)</code><br />
<code>l.splice(it, l2, b, e)</code></p>
<div class="details">
Inserts the element denoted by <code>it2</code>, or the elements in the sequence 
denoted by <code>[b, e)</code>, into <code>l</code> immediately before the position denoted by <code>it</code>, 
and removes those elements from <code>l2</code>. The element denoted by <code>it2</code>, or the 
elements in the range <code>[b, e)</code>, must be entirely within <code>l2</code>. Invalidates iterators 
and references to the spliced elements. Returns <code>void</code>.
</div>
<p>
<p><code>l.remove(t)</code><br />
<code>l.remove_if(p)</code></p>
<div class="details">
Removes from <code>l</code> all elements with value equal to <code>t</code>, or for which the predicate 
<code>p</code> yields <code>true</code>. Returns <code>void</code>.
</div>
<p><code>l.sort(cmp)</code><br />
<code>l.sort()</code></p>
<div class="details">
Sorts <code>l</code> using <code>&lt;</code>, or the predicate <code>cmp</code> if supplied, to compare elements.
</div>
<h4>B.2.8 string</h4>
<p>The <code>string</code> class provides variable-length character strings and random-access iterators 
to access their characters. Although <code>string</code>s aren't true containers, they support the container 
operations shown previously (&sect;B.2.1/314 and &sect;B.2.2/315) and can be used with the 
algorithms (&sect;B.3/321). In addition, the <code>string</code> class also supports the following:</p>
<p><code>#include &lt;string&gt;</code></p>
<div class="details">
Declares the <code>string</code> class and associated operations.
</div>
<p><code>string s(cp);</code></p>
<div class="details">
Defines <code>s</code> as a <code>string</code> initialized to a copy of the characters denoted by <code>cp</code>.
</div>
<p><code>os &lt;&lt; s</code></p>
<div class="details">
Writes the characters in <code>s</code> onto <code>os</code>. Returns a reference to <code>os</code>.
</div>
<p><code>is &gt;&gt; s</code></p>
<div class="details">
Reads a word from <code>is</code> into <code>s</code>, obliterating <code>s</code>'s previous contents. Returns a 
reference to <code>is</code>. Words are delimited by a whitespace (space, tab, newline).
</div>
<p><code>getline(is, s)</code></p>
<div class="details">
Reads the input stream <code>is</code> up to and including the next newline, and stores 
the characters read, excluding the newline, in <code>s</code>, obliterating <code>s</code>'s previous 
contents. Returns a reference to <code>is</code>.
</div>
<p><code>s += s2</code></p>
<div class="details">
Appends <code>s2</code> to <code>s</code> and returns a reference to <code>s</code>.
</div>
<p><code>s + s2</code></p>
<div class="details">
Returns the result of concatenating <code>s</code> and <code>s2</code>.
</div>
<p><code>s <i>relop </i>s2</code></p>
<div class="details">
Returns a <code>bool</code> indicating whether the relational operation is <code>true</code>. The 
<code>string</code> library defines all the relational and equality operators: <code>&lt;, &lt;=, &gt;, &gt;=, ==</code>, and <code>!=</code>. 
Two <code>string</code>s are equal if their respective elements are 
equal. If one <code>string</code> is a prefix of the other, then the shorter is less than the 
longer. Otherwise, the result is determined by comparing the first pair of 
respective characters at which the <code>string</code>s differ.
</div>
<p><code>s.substr(n, n2)</code></p>
<div class="details">
Returns a new <code>string</code> that holds <code>n2</code> characters copied from <code>s</code>, starting at 
position <code>n</code>. Undefined if <code>n &gt; s.size()</code>. Copies characters in the range 
from <code>n</code> to the end of <code>s</code> if <code>n + n2</code> is greater than <code>s.size()</code>.
</div>
<p><code>s.c_str()</code></p>
<div class="details">
Yields a <code>const</code> pointer to a null-terminated character array that contains a 
copy of the characters in <code>s</code>. The array persists only until the next non<code>const</code> 
member function is called on <code>s</code>.
</div>
<p><code>s.data()</code></p>
<div class="details">
Like <code>c_str</code>, but the array is not null terminated
</div>
<p><code>s.copy(cp, n)</code></p>
<div class="details">
Copies up to the first <code>n</code> characters, without null termination, from <code>s</code> into a 
user-supplied character array denoted by <code>cp</code>. It is the caller's responsibility 
to ensure that there is room for at least <code>n</code> characters.
</div>
<h4>B.2.9 pair</h4>
<p>Class <code>pair&lt;K, V&gt;</code> provides an abstraction for a pair of values of type <code>K</code> and <code>V</code> respectively. 
The operations on <code>pair&lt;K, V&gt;</code> include the following:</p>
<p><code>#include &lt;utility&gt;</code></p>
<div class="details">
Declares the <code>pair</code> class and associated operations.
</div>
<p><code>x.first</code></p>
<div class="details">
The first element of the <code>pair</code> named <code>x</code>.
</div>
<p><code>x.second</code></p>
<div class="details">
The second element of the <code>pair</code> named <code>x</code>.
</div>
<p><code>pair&lt;K, V&gt; x(k, v);</code></p>
<div class="details">
Defines <code>x</code> as a new <code>pair</code> composed of elements with types <code>K</code> and <code>V</code>, and values 
<code>k</code> and <code>v</code>, so that <code>x</code>. first has type <code>K</code> and <code>x</code>. second has type <code>V</code>. Note 
that to declare a <code>pair</code> explicitly, you must know the types of its members.
</div>
<p><code>make_pair(k, v)</code></p>
<div class="details">
Generates a new <code>pair&lt;K, V&gt;</code> with element values <code>k</code> and <code>v</code>. Note that it is 
not necessary to know the types of <code>k</code> and <code>v</code> to use this form.
</div>
<h4>B.2.10 map</h4>
<p>Class <code>map</code> provides dynamically allocated, type-independent associative arrays. It uses 
<code>pair</code> as an auxiliary class to store the (name, value) pairs that are the <code>map</code>'s elements. 
Iterators are bidirectional. Each <code>map</code> holds values of type V associated with keys of type 
<code>const K</code>. Accordingly, the value stored in an element of a <code>map</code> can be changed, but the 
key cannot be changed. In addition to the general container operations (&sect;B.2.1/314) and 
those on associative containers (&sect;B.2.4/316), <code>map</code> also supports the following:</p>
<p><code>#include &lt;map&gt;</code></p>
<div class="details">
Declares the <code>map</code> class and associated operations.
</div>
<p><code>map&lt;K, V, P&gt; m(cmp);</code></p>
<div class="details">
Defines <code>m</code> as a new, empty <code>map</code>, which holds values of type <code>V</code> associated 
with keys of type <code>const K</code>, and uses predicate <code>cmp</code> of type <code>P</code> to compare 
elements when inserting them into the <code>map</code>.
</div>
<p><code>m[k]</code></p>
<div class="details">
Yields a reference to the value in <code>m</code> at the position indexed by <code>k</code>. If no such 
element exists, then a value-initialized element (&sect;9.5/164) of type <code>V</code> is 
inserted into the <code>map</code>. Because evaluating <code>m[k]</code> can potentially change <code>m</code>'s 
contents, <code>m</code> must not be <code>const</code>.
</div>
<p><code>m.insert(make_pair(k, v))</code></p>
<div class="details">
Inserts value <code>v</code> into <code>m</code> at the position indicated by the key <code>k</code>. If a value 
already exists with key <code>k</code>, then the associated value is not changed. Returns 
a <code>pair&lt;map&lt;K, V&gt;::iterator, bool&gt;</code> with a <code>first</code> component that 
refers to the element with the given key, and a <code>second</code> component that indicates 
whether a new element was inserted. Note that <code>make_pair</code> generates 
a <code>pair&lt;K, V&gt;</code>, which is converted by insert to a <code>pair&lt;const K, V&gt;</code>.
</div>
<p><code>m.find(k)</code></p>
<div class="details">
Returns an iterator referring to the element, if any, with key <code>k</code>. Returns 
<code>m.end()</code> if no such element exists.
</div>
<p><code>*it</code></p>
<div class="details">
Yields a <code>pair&lt;const K, V&gt;</code>, which contains the key, and the value with 
which that key is associated, at the position denoted by it. Accordingly, 
<code>it-&gt;first</code> has type <code>const K</code>, and represents the key, and <code>it-&gt;second</code> 
has type <code>V</code> and represents the corresponding value.
</div>
<div class="prevnext">
<a href="107.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="109.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>