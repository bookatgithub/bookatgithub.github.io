<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>2.4 Writing a row</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="10.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="12.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>2.4 Writing a row</h3>
<p>Now that we understand how to write a given number of rows, we can turn our attention 
to writing a single row. In other words, we can start filling in the part of the program represented 
by the <i>write a row of output</i> comment in &sect;2.3/19.</p>
<p>We begin by observing that all the output lines are the same length. If we think of the 
output as a rectangular array, then that length is the number of columns in the array. We 
can compute that number by adding twice the padding to the length of the greeting, and 
then adding two for the asterisks at the ends:</p>
<div class="prebox"><pre>
const std::string::size_type cols = greeting.size() + pad * 2 + 2;
</pre></div>
<p>The easy part of reading this definition is to see that we've said that <code>cols</code> is <code>const</code>, 
thereby promising that the value of <code>cols</code> will not change after we have defined it. The 
harder part to understand is that we have defined <code>cols</code> using an unfamiliar type, namely 
<code>std::string::size_type</code>. We know that the first :: is the scope operator and that 
the qualified name <code>std::string</code> means the name <code>string</code> from the namespace <code>std</code>. 
The second :: similarly says that we want the name <code>size_type</code> from the class <code>string</code>. 
Like namespaces and blocks, classes define their own scopes. The <code>std::string</code> type 
defines <code>size_type</code> to be the name of the appropriate type for holding the number of 
characters in a <code>string</code>. Whenever we need a local variable to contain the size of a 
string, we should use <code>std::string::size_type</code> as the type of that variable.</p>
<p>The reason that we have given <code>cols</code> a type of <code>std::string::size_type</code> is to 
ensure that <code>cols</code> is capable of containing the number of characters in <code>greeting</code>, no matter 
how large that number might be. We could simply have said that <code>cols</code> has type <code>int</code>, 
and indeed, doing so would probably work. However, the value of <code>cols</code> depends on the 
size of the input to our program, and we have no control over how long that input might 
be. It is conceivable that someone might give our program a string so long that an <code>int</code> is 
insufficient to contain its length.</p>
<p>The <code>int</code> type is sufficient for <code>rows</code> because the number of rows depends only on the 
value of <code>pad</code>, which we control. Every C++ implementation is required to allow every 
<code>int</code> variable to take on values up to at least <code>32767</code>, which is plenty. Nevertheless, whenever 
we define a variable that contains the size of a particular data structure, it is a good 
habit to use the type that the library defines as being appropriate for that specific purpose.</p>
<p>It is impossible for a string to contain a negative number of characters. Accordingly, 
<code>std::string::size_type</code> is an <i><b>unsigned</b></i> type-objects of that type are incapable of 
containing negative values. This property does not affect the programs in this chapter, 
but we shall see later on in &sect;8.1.3/142 that it can be critically important.</p>
<p>Having figured out how many characters to write, we can use another <code>while</code> statement 
to write them:</p>
<div class="prebox"><pre>
std::string::size_type c = 0;

// <i>invariant: we have written c characters so far in the current row</i>
while (c != cols) {
    // <i>write one or more characters</i></p>
    // <i>adjust the value of c to maintain the invariant</i> 
}
</pre></div>
<p>This <code>while</code> behaves analogously to the one in &sect;2.3/19, except for one difference in the 
body: This time we have said <i>write one or more characters</i> instead of writing exactly one 
row as we did in &sect;2.3/19. There is no reason that we have to write only a single character 
each time through the body. As long as we write at least one character, we will ensure 
progress. All we have to do is ensure that the total number of characters we write on this 
row is exactly <code>cols</code>.</p>
<h4>2.4.1 Writing border characters</h4>
<p>Our remaining problem is to figure out what characters to write. We can solve part of this 
problem by noting that if we are on the first or last row, or on the first or last column, then 
we know that we should write an asterisk. Moreover, we can use our knowledge of the 
loop invariants to determine whether it is time to write an asterisk.</p>
<p>For example, if <code>r</code> is zero, we know from the invariant that we have not yet written any 
rows, which means that we are writing part of the first row. Similarly, if <code>r</code> is equal to 
<code>rows - 1</code>, we know that we have written <code>rows - 1</code> rows already, so we must now be 
writing part of the last row. We can use analogous reasoning to conclude that if <code>c</code> is zero, 
then we are writing part of the first column, and if <code>c</code> is equal to <code>cols - 1</code>, we are writing 
part of the last column. Using this knowledge, we can fill in more of our program:</p>
<div class="prebox"><pre>
// <i>invariant: we have written c characters so far in the current row</i> 
while (c != cols) {
    if (r == 0 || r == rows - 1 || c == 0 || c == cols - 1) { 
        std::cout &lt;&lt; &quot;*&quot;;
    } else {
        // <i>write one or more nonborder characters</i>
        // <i>adjust the value of c to maintain the invariant</i>
    
}
</pre></div>
<p>This statement introduces so many new ideas that it requires detailed explanation.</p>
<h4>2.4.1.1 if statements</h4>
<p>The <code>while</code> body consists of a block (&sect;2.3.1/19) that contains an <b>if</b> <i><b>statement</b></i>, which we 
use to determine whether it is time to write an asterisk. An <code>if</code> statement can take either 
of two forms:</p>
<div class="prebox"><pre>
if (<i>condition</i>) 
      <i>statement</i>
</pre></div>
<p>or, as used here,</p>
<div class="prebox"><pre>
if (<i>condition</i>)
      <i>statement1</i>
else
      <i>statement2</i>
</pre></div>
<p>As with the <code>while</code> statement, the <i>condition</i> is an expression that yields a truth value. If 
the condition is true, then the program executes the statement that follows the <code>if</code>. In the 
second form of the <code>if</code> statement, if the <i>condition</i> is false, then the program executes the 
statement that follows the <code>else</code>.</p>
<p>It is worth noting, just as with our description of the form of the <code>while</code> statement, that 
the formatting that we use to illustrate the <code>if</code> statement is merely conventional. However, 
readers will find it much easier if code follows formatting conventions such as the 
ones that we've used in the examples in this book.</p>
<h3>2.4.1.2 Logical operators</h3>
<p>What about the condition itself?</p>
<div class="prebox"><pre>
r == 0 || r == rows - 1 || c == 0 || c == cols - 1
</pre></div>
<p>This condition is true if <code>r</code> is <code>0</code> or <code>rows - 1</code>, or if <code>c</code> is <code>0</code> or <code>cols - 1</code>. The condition uses 
two new operators, the <code>==</code> operator and the <code>||</code> operator. C++ programs test for <i><b>equality</b></i> 
by using the <code>==</code> symbol, to distinguish it from the assignment operator <code>=</code>. Thus, <code>r == 0</code> 
yields a <code>bool</code> that indicates whether the value of <code>r</code> is equal to <code>0</code>. The <i><b>logical-or</b></i> operator, 
written as <code>||</code>, yields <code>true</code> if either of its operands is <code>true</code>.</p>
<p>The relational operators have lower <i><b>precedence</b></i> than the arithmetic operators. In 
expressions that contain more than one operator, precedence defines how the operands 
group. For example,</p>
<div class="prebox"><pre>
r == rows - 1
</pre></div>
<p>means</p>
<div class="prebox"><pre>
r == (rows - 1)
</pre></div>
<p>rather than</p>
<div class="prebox"><pre>
(r == rows) - 1
</pre></div>
<p>because the arithmetic operator <code>-</code> has higher precedence than the relational operator <code>==</code>. 
In other words, we are subtracting <code>1</code> from <code>rows</code> and comparing the result with <code>r</code>, which, 
in this program, is what we wanted. We can override precedence by enclosing in parentheses 
a subexpression that we want to use as a single operand. For example, if we really 
wanted to execute <code>(r == rows) - 1</code>, we could do so by including the parentheses as 
shown. This expression would compare <code>r</code> with <code>rows</code> and subtract <code>1</code> from the result, 
yielding either <code>0</code> or <code>-1</code> depending on whether <code>r</code> was equal to <code>rows</code>.</p>
<p>The logical-or operator tests whether <i>either</i> of its operands is <code>true</code>. Its form is </p>
<div class="prebox"><pre>
condition1 || condition2
</pre></div>
<p>where, as usual, <i>condition1</i> and <i>condition2</i> are conditions-expressions that yield truth values. 
The <code>||</code> expression yields a <code>bool</code>, which is <code>true</code> if either of the conditions is <code>true</code>.</p>
<p>The <code>||</code> operator has lower precedence than the relational operators, and, like most 
C++ binary operators, is left-associative. Moreover, it has a property that most other C++ 
operators do not share: If a program finds that the left operand of <code>||</code> is true, it does not 
evaluate the right operand at all. This property is often called <i><b>short-circuit evaluation</b></i>, and 
as we shall see in &sect;5.6/89, it can have a crucial effect on how we write our programs.</p>
<p>Because <code>||</code> is left-associative, and because of the relative precedence of <code>||,==</code> ,and <code>-</code>,</p>
<div class="prebox"><pre>
r == 0 || r == rows - 1 || c == 0 || c == cols - 1 
</pre></div>
<p>means the same as it would if we were to place all of its subexpressions in parentheses:</p>
<div class="prebox"><pre>
((r == 0 || r == (rows - 1)) || c == 0) || c == (cols - 1)
</pre></div>
<p>In order to evaluate this latter expression using the short-circuit strategy, the program 
first evaluates the left operand of the outermost <code>||</code>, which is</p>
<div class="prebox"><pre>
(r == 0 || r == (rows - 1)) || c == 0
</pre></div>
To do so, it must first evaluate the left operand of this inner <code>||</code>, which is</p>
<div class="prebox"><pre>
r == 0 || r == (rows - 1)
</pre></div>
<p>which, in turn, means evaluating</p>
<div class="prebox"><pre>
r == 0
</pre></div>
If <code>r</code> is equal to <code>0</code>, then each of the expressions</p>
<div class="prebox"><pre>
r == 0 || r == (rows - 1)
(r == 0 || r == (rows - 1)) || c == 0
((r == 0 || r == (rows - 1)) || c == 0) || c == (cols - 1)
</pre></div>
<p>must be true. If <code>r</code> is nonzero, the next step is to compare <code>r</code> with <code>rows - 1</code>. If that test 
fails, then the program will compare <code>c</code> with zero, and if that fails, it will compare <code>c</code> with 
<code>cols - 1</code> to determine the final result.</p>
<p>In other words, when we write a series of conditions separated by <code>||</code> operators, we are 
asking the program to test each of these conditions in turn. If any of the inner conditions 
is <code>true</code>, then the whole condition is <code>true</code>; otherwise, the whole condition is <code>false</code>. 
Each <code>||</code> operator stops as soon as it can determine its result, so if any of the inner conditions 
is <code>true</code>, the subsequent conditions go untested. If we step back from the details, we 
should be able to see that these four equality tests are checking whether we are in the first 
row, the last row, the first column, or the last column, and, therefore, that the <code>if</code> statement 
writes an asterisk if we're in the top or bottom row, or if we're in the first or last column. 
Otherwise, it does something else, which we must now define.</p>
<h4>2.4.2 Writing nonborder characters</h4>
<p>It is now time to write the statements that correspond to the comments that say</p>
<div class="prebox"><pre>
// <i>write one or more nonborder characters</i>
// <i>adjust the value of c to maintain the invariant</i>
</pre></div>
<p>in the program fragment in &sect;2.4.1/23. These statements must deal with the characters 
that are not part of the border. It should be easy to see that each of these characters is 
either a space or part of the greeting. The only problem is figuring out which one it is, 
and what to do about it.</p>
<p>We begin by testing whether we are about to write the first character of the greeting, 
which we do by finding if we're in the correct row and on the correct column within that 
row. The row we seek is the one after we've written the initial row of asterisks, followed 
by <code>pad</code> additional rows. The appropriate column comes after we have written the initial 
asterisk on this row, followed by <code>pad</code> spaces. Our knowledge of the invariants tells 
us that we're on the right row when <code>r</code> is equal to <code>pad + 1</code>, and be at the appropriate column 
when <code>c</code> is equal to <code>pad + 1</code>.</p>
<p>In other words, to determine whether we are about to write the first character of the 
greeting, we must check whether <code>r</code> and <code>c</code> are both equal to <code>pad + 1</code>. If we've reached the 
right place to write the greeting, we'll do so; otherwise, we'll write a space instead. In 
both cases, we have to remember to update <code>c</code> appropriately:</p>
<div class="prebox"><pre>
if (r == pad + 1 &amp;&amp; c == pad + 1) {
    std::cout &lt;&lt; greeting;
    c += greeting.size();
} else {
    std::cout &lt;&lt; &quot; &quot;;
}
</pre></div>
<p>The condition inside the <code>if</code> statement uses the <i><b>logical-and</b></i> operator. As with the <code>||</code> operator, 
the <code>&amp;&amp;</code> operator tests two conditions and yields a truth value. It is left-associative 
and uses a short-circuit evaluation strategy. Unlike the <code>||</code> operator, the <code>&amp;&amp;</code> operator 
yields <code>true</code> only if <i>both</i> conditions are <code>true</code>. If either condition is <code>false</code>, the result of <code>&amp;&amp;</code> 
is <code>false</code>. The second condition will be tested if and only if the first condition is <code>true</code>.</p>
<p>If the test succeeds, then it's time to write the greeting. In doing so, we falsify our 
invariant, because <code>c</code> is no longer equal to the number of characters we have written on 
this row. We make our invariant true again by adjusting the value of <code>c</code> to account for the 
characters that we have written. The expression that updates <code>c</code> uses another new operator, 
called the <i><b>compound-assignment</b></i> operator, to adjust <code>c</code> to account for the number of 
characters in the name when we wrote it. Such a compound assignment is a shorthand 
way of adding the right- and left-hand sides together and storing the result in the left-hand 
side. In other words, if we write <code>c += greeting.size()</code>, that statement has the 
same effect as if we had written <code>c = c + greeting.size()</code>.</p>
<p>The remaining possibility is that we're not on the border, and we're not about to write 
the greeting. In that case, we need to write a space and increment <code>c</code> to make the invariant 
true again, which we do in the <code>else</code> branch of the <code>if</code> statement.</p>
<div class="prevnext">
<a href="10.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="12.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>