<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>2.5 The complete framing program</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="11.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="13.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>2.5 The complete framing program</h3>
<p>At this point, we have revised the entire program, but the code is scattered enough to be 
hard to find. Therefore, we shall show the whole program again. However, before we do 
so, we want to shorten the program in three ways.</p>
<p>The first abbreviation will be a kind of declaration that lets us say once and for all that 
a given name comes from the standard library. Doing so will allow us to avoid saying 
<code>std::</code> in so many places. The second abbreviation is a shorthand way of writing a particularly 
common kind of <code>while</code> statement. Finally, we can shorten the program slightly by 
incrementing <code>c</code> in one place instead of two.</p>
<h4>2.5.1 Abbreviating repeated uses of std::</h4>
<p>By now, you are probably tired of seeing-and writing-<code>std::</code> in front of every name 
from the standard library. Saying <code>std::</code> explicitly was a good way of reminding you 
which names came from the standard library, but you should have a pretty good idea of 
what they are at this point.</p>
<p>C++ offers a way of saying that a particular name should always be interpreted as 
coming from a particular namespace. For example, by writing</p>
<div class="prebox"><pre>
using std::cout;
</pre></div>
<p>we can say that we intend to use the name <code>cout</code> to mean <code>std::cout</code> exclusively, and 
that we do not intend to define anything named <code>cout</code> ourselves. Once we have done so, 
we can say <code>cout</code> instead of <code>std::cout</code>.</p>
<p>Logically enough, such a declaration is called a <b>using</b>-<i><b>declaration</b></i>. The name that it 
mentions behaves similarly to other names. For example, if a <code>using</code>-declaration appears 
within braces, the name that it defines has its given meaning from where it is defined to 
the closing brace.</p>
<p>From now on, we'll write using-declarations to shorten our programs.</p>
<h4>2.5.2 Using for statements for compactness</h4>
<p>Let's look again at the control structures that we used in the program in &sect;2.3/19. If we 
look only at the program's outermost structure, we see</p>
<div class="prebox"><pre>
int r = 0;

while (r != rows) {
    // <i>stuff that doesn't change the value of r</i>
    ++r;
}
</pre></div>
<p>This particular form of <code>while</code> appears frequently. Before it starts, we define and initialize 
a local variable, which we test in the condition. The <code>while</code> body adjusts the value of the 
variable so that eventually the condition will fail. Because this kind of control structure is 
so common, the language provides a shorthand way of writing it:</p>
<div class="prebox"><pre>
for (int r = 0; r != rows; ++r) {
    //<i> stuff that doesn't change the value of r</i>
}
</pre></div>
<p>Either of these examples will cause <code>r</code> to take on a sequence of values, the first of which is 
0, and the last of which is <code>rows - 1</code>. We can think of 0 as being the beginning of a range, 
and <code>rows</code> as being the <i><b>off-the-end value</b></i> for the range. Such a range is called a 
<i><b>half-open range</b></i>, and is often written as [begin, off-the-end). The deliberately unbalanced brackets <code>[ )</code> 
remind the reader that the range is asymmetric. So, for example, the range <code>[1, 4)</code> contains 
<code>1, 2,</code> and <code>3</code>, but not <code>4</code>. Similarly, we say that <code>r</code> takes on the values in <code>[0, rows)</code>. 
A <b>for</b> <i><b>statement</b></i> has the following form:</p>
<div class="prebox"><pre>
for (<i>init-statement  condition; expression</i>) 
      <i>statement</i>
</pre></div>
<p>The first line is often known as the <i><b>for header</b></i>. It controls the statement that follows, which 
is often called the <i><b>for body</b></i>. The <i>init-statement</i> must be either a definition (&sect;1.1/10) or an 
expression statement (&sect;0.8/6). Because each of these kinds of statement ends with its own 
semicolon, there is no additional semicolon between the <i>init-statement</i> and the <i>condition</i>.</p>
<p>A <code>for</code> statement begins by executing the <i>init-statement</i> part of the <code>for</code> header, which it 
does only once, at the beginning of the <code>for</code>. Typically, the <i>init-statement</i> defines and initializes 
the loop control variable, which will be tested as part of the <i>condition</i>. If a variable 
is defined in the <i>init-statement</i>, it is destroyed on exit from the <code>for</code>, so it is inaccessible to 
code that follows the <code>for</code> statement.</p>
<p>On every trip through the loop, including the first, the program evaluates the <i>condition</i>. 
If the condition yields <code>true</code>, then it executes the <code>for</code> body. Having done so, it executes 
the expression. It then repeats the test, continuing to execute the <code>for</code> body followed 
by the <i>expression</i> in the <code>for</code> header until the test condition fails.</p>
<p>More generally, the meaning of a <code>for</code> statement is</p>
<div class="prebox"><pre>
{
    <i>init-statement</i>
    while (<i>condition</i>) {
          <i>statement</i>
          <i>expression;</i>
    
}
</pre></div>
<p>where we have been careful to enclose the <i>init-statement</i> and the <code>while</code> in extra braces, 
thereby limiting the lifetime of any variables declared in the <i>init-statement</i>. Note particularly 
the presence and absence of semicolons. We do not write a semicolon after the <i>init-statement</i> 
or <i>statement</i> because they are statements, with their own semicolons if they need 
them. We do include a semicolon after <i>expression</i> in order to turn it into a statement.</p>
<h4>2.5.3 Collapsing tests</h4>
<p>We can divide the code associated with the <i>write one or more characters</i> comment in &sect;2.4/23 
into three cases: We are writing a single asterisk, a space, or the entire greeting. As our 
program stands, we adjust <code>c</code> to maintain our invariant after we write an asterisk, and we
adjust it again after we write a space. There's nothing wrong with doing so, but it is often 
possible to change the order of tests in a program so as to make it possible to merge two 
or more identical statements into one.</p>
<p>Because our three cases are mutually exclusive, we can test them in any order. If we 
begin by first testing whether we are about to write the greeting, then we know that in the 
other two cases, incrementing <code>c</code> suffices to maintain the invariant, so we can collapse 
the two increments into one:</p>
<div class="prebox"><pre>
if (<i>we are about to write the greeting</i>) {
    cout &lt;&lt; greeting;
    c += greeting.size();
} else {
    if (<i>we are in the border</i>)
        cout &lt;&lt; &quot;*&quot;;
    else
        cout  &lt;&lt; &quot; &quot;;
        ++c;
}
</pre></div>
<p>After collapsing the increments, we also find that two of our blocks are just single statements, 
so we can drop two pairs of braces. Notice how the different indentation of <code>++c;</code> 
draws attention to the fact that it is executed regardless of whether we are in the border.</p>
<h4>2.5.4 The complete framing program</h4>
<p>If we put all the pieces together and use these three abbreviation techniques, we get the 
following program:</p>
<div class="prebox"><pre>
#include &lt;iostream&gt;
#include &lt;string&gt;

// say what standard-library names we use
using std::cin;         using std::endl;
using std::cout;        using std::string;

int main()
{
    // <i>ask for the person's name</i>
    cout &lt;&lt; "Please enter your first name: ";

    // <i>read the name</i>
    string name;
    cin &gt;&gt; name;

    // <i>build the message that we intend to write</i>
    const string greeting = "Hello, " + name + "!";

    // <i>the number of blanks surrounding the greeting</i>
    const int pad = 1;

    // <i>the number of rows and columns to write</i>
    const int rows = pad * 2 + 3;
    const string::size_type cols = greeting.size() + pad * 2 + 2;

    // <i>write a blank line to separate the output from the input</i>
    cout &lt;&lt; endl;

    // <i>write</i> rows <i>rows of output</i>
    // <i>invariant: we have written r rows so far</i>
    for (int r = 0; r != rows; ++r) {

        string::size_type c = 0;

        // <i>invariant: we have written c characters so far in the current row</i>
        while (c != cols) {

            // <i>is it time to write the greeting?</i>
            if (r == pad + 1 && c == pad + 1) {
                cout &lt;&lt; greeting;
                c += greeting.size();
            } else {

                // <i>are we on the border?</i>
                if (r == 0 || r == rows - 1 ||
                    c == 0 || c == cols - 1)
                    cout &lt;&lt; "*";
                else
                    cout &lt;&lt; " ";
                ++c;
            }
        }

        cout &lt;&lt; endl;
    }

    return 0;
}
</pre></div>
<div class="prevnext">
<a href="11.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="13.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>