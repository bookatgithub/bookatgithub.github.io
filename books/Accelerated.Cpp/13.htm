<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>2.6 Counting</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="12.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="14.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>2.6 Counting</h3>
<p>Most experienced C++ programmers have a habit that may seem weird at first: Their programs 
invariably begin counting from <code>0</code> rather than from <code>1</code>. For example, if we reduce 
the outer <code>for</code> loop of the program above to its essentials, we get</p>
<div class="prebox"><pre>
for (int r = 0; r != rows; ++r) {
    // <i>write a row</i>
}
</pre></div>
<p>We could have written this loop as</p>
<div class="prebox"><pre>
for (int r = 1; r &lt;= rows; ++r) { 
    // <i>write a row</i>
}
</pre></div>
<p>One version counts from <code>0</code> and uses <code>!=</code> as its comparison; the other counts from <code>1</code> and 
uses <code>&lt;=</code> as its comparison. The number of iterations is the same in each case. Is there any 
reason to prefer one form over the other?</p>
<p>One reason to count from <code>0</code> is that doing so encourages us to use asymmetric ranges to 
express intervals. For example, it is natural to use the range <code>[0, rows)</code> to describe the 
first <code>for</code> statement, as it is to use the range <code>[1, rows]</code> to describe the second one.</p>
<p>Asymmetric ranges are usually easier to use than symmetric ones because of an important 
property: A range of the form <code>[m, n)</code> has <code>n - m</code> elements, and a range of the form 
<code>[m, n]</code> has <code>n - m + 1</code> elements. So, for example, the number of elements in <code>[0, rows)</code> is 
obvious (i.e., <code>rows - 0</code>, or <code>rows</code>) but the number in <code>[1, rows]</code> is less so.</p>
<p>This behavioral difference between asymmetric and symmetric ranges is particularly 
evident in the case of empty ranges: If we use asymmetric ranges, we can express an 
empty range as <code>[n, n)</code>, in contrast to <code>[n, n-1]</code> for symmetric ranges. The possibility 
that the end of a range could ever be less than the beginning can cause no end of trouble 
in designing programs.</p>
<p>Another reason to count from <code>0</code> is that doing so makes loop invariants easier to 
express. In our example, counting from <code>0</code> makes the invariant straightforward: We have 
written <code>r</code> rows of output so far. What would be the invariant if we counted from <code>1</code>?</p>
<p>One would be tempted to say that the invariant is that we are about to write the <code>r</code>th 
row, but that statement does not qualify as an invariant. The reason is that the last time 
the while tests its condition, <code>r</code> is equal to <code>rows + 1</code>, and we intend to write only <code>rows</code> 
rows. Therefore, we are not about to write the <code>r</code>th row, so the invariant is not true!</p>
<p>Our invariant could be that we have written <code>r - 1</code> rows so far. However, if that's our 
invariant, why not simplify it by starting <code>r</code> at <code>0</code>?</p>
<p>Another reason to count from <code>0</code> is that we have the option of using <code>!=</code> as our comparison 
instead of <code>&lt;=</code>. This distinction may seem trivial, but it affects what we know about 
the state of the program when a loop finishes. For example, if the condition is <code>r != rows</code>, 
then when the loop finishes, we know that <code>r == rows</code>. Because the invariant says that we 
have written <code>r</code> rows of output, we know that we have written exactly <code>rows</code> rows all told. 
On the other hand, if the condition is <code>r &lt;= rows</code>, then all we can prove is that we have 
written at least rows rows of output. For all we know, we might have written more.</p>
<p>If we count from <code>0</code>, then we can use <code>r != rows</code> as a condition when we want to ensure 
that there are exactly <code>rows</code> iterations, or we can use <code>r &lt; rows</code> if we 
care only that the number of iterations is <code>rows</code> or more. If we count from <code>1</code>, we can use <code>r &lt;= rows</code> if we 
want at least <code>rows</code> iterations-but what if we want to ensure that <code>rows</code> is the exact number? 
Then we must test a more complicated condition, such as <code>r == rows + 1</code>. This extra 
complexity offers no compensating advantage.</p>
<div class="prevnext">
<a href="12.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="14.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>