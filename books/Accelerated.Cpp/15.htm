<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>3 Working with batches of data</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="14.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="16.htm"><img src="images/Next1.gif" /></a>
</div>
<div class="chapname">
<h1>3</h1>
</div>
<div id="chapter">
<h2>Working with batches of data</h2>
</div>
<p>The programs that we explored in Chapters 1 and 2 did little more than read a single 
string and write it again, sometimes with decoration. Most problems are more complicated 
than such simple programs can solve. Among the most common sources of complexity 
in programs is the need to handle multiple pieces of similar data.</p>
<p>Our programs have already started doing so, in the sense that a <code>string</code> comprises 
multiple characters. Indeed, it is exactly the ability to put an unknown number of characters 
into a single object-a <code>string</code>-that makes these programs easy to write.</p>
<p>In this chapter, we'll look at more ways of dealing with batches of data, by writing a 
program that reads a student's exam and homework grades and computes a final grade. 
Along the way, we'll learn how to store all the grades, even if we don't know in advance 
how many grades there are.</p>
<a name="grades">
<h3>3.1 Computing student grades</h3>
</a>
<p>Imagine a course in which each student's final exam counts for 40% of the final grade, the 
midterm exam counts for 20%, and the average homework grade makes up the remaining 
40%. Here is our first try at a program that helps students compute their final grades:</p>
<div class="prebox"><pre>
#include &lt;iomanip&gt;
#include &lt;ios&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

using std::cin;                  using std::setprecision;
using std::cout;                 using std::string;
using std::endl;                 using std::streamsize;

int main()
{
    // <i>ask for and read the student's name</i>
    cout << "Please enter your first name: ";
    string name;
    cin >> name;
    cout << "Hello, " << name << "!" << endl;

    // <i>ask for and read the midterm and final grades</i>
    cout << "Please enter your midterm and final exam grades: ";
    double midterm, final;
    cin >> midterm >> final;

    // <i>ask for the homework grades</i>
    cout << "Enter all your homework grades, "
	        "followed by end-of-file: ";

    // <i>the number and sum of grades read so far</i>
    int count = 0;
    double sum = 0;

    // <i>a variable into which to read</i>
    double x;

    // <i>invariant:</i>
    // <i>we have read count grades so far, and</i>
    // sum <i>is the sum of the first count grades</i>
    while (cin >> x) {
        ++count;
        sum += x;
    }

    // <i>write the result</i>
    streamsize prec = cout.precision();
    cout << "Your final grade is " << setprecision(3)
         << 0.2 * midterm + 0.4 * final + 0.4 * sum / count
         << setprecision(prec) << endl;

    return 0;
}
</pre></div>
<p>As usual, we begin with <code>#include</code> directives and <code>using</code>-declarations for the library 
facilities that we intend to use. These facilities include <code>&lt;iomanip&gt;</code> and <code>&lt;ios&gt;</code>, which we 
have not yet seen. The <code>&lt;ios&gt;</code> header defines <code>streamsize</code>, which is the type that the 
input-output library uses to represent sizes. The <code>&lt;iomanip&gt;</code> header defines the manipulator 
<code>setprecision</code>, which lets us say how many significant digits we want our output 
to contain.</p>
<p>When we used <code>endl</code>, which is also a manipulator, we did not have to include 
the <code>&lt;iomanip&gt;</code> header. The <code>endl</code> manipulator is used so often that its definition appears in 
<code>&lt;iostream&gt;</code>, rather than in <code>&lt;iomanip&gt;</code>.</p>
<p>The program begins by asking for and reading the student's name, and the midterm 
and final grades. Next, it asks for the student's homework grades, which it continues to 
read until it encounters an end-of-file signal. Different C++ implementations offer their 
users different ways of sending such a signal to a program, the most common way being 
to begin a new line of input, hold down the <i>control</i> key, and press <code>z</code> (for computers running Microsoft Windows) 
or <code>d</code> (for computers running the Unix or Linux systems).</p>
<p>While reading the grades, the program uses <code>count</code> to keep track of how many grades 
were entered, and stores in <code>sum</code> a running total of the grades. Once the program has read 
all the grades, it writes a greeting message, and reports the student's final grade. In doing 
so, it uses <code>count</code> and <code>sum</code> to compute the average homework grade.</p>
<p>Much of this program should already be familiar, but there are several new usages, 
which we will explain.</p>
<p>The first new idea occurs in the section that reads the student's exam grades:</p>
<div class="prebox"><pre>
cout &lt;&lt; &quot;Enter your midterm and final exam grades: &quot;;
double midterm, final;
cin &gt;&gt; midterm &gt;&gt; final;
</pre></div>
<p>The first of these statements should be familiar: It writes a message, which, in this case, 
tells the student what to do next. The next statement defines <code>midterm</code> and <code>final</code> as having 
type <code>double</code>, which is the built-in type for double-precision floating-point numbers. 
There is also a single-precision floating-point type, called <code>float</code>. Even though it might 
seem that <code>float</code> is the appropriate type, it is almost always right to use <code>double</code> for 
floating-point computations.</p>
<p>These types' names date back to when memory was much more expensive than it is 
today. The shorter floating-point type, called <code>float</code>, is permitted to offer as little precision 
as six significant (decimal) digits or so, which is not even enough to represent the 
price of a house to the nearest penny. The <code>double</code> type is guaranteed to offer at least ten 
significant digits, and we know of no implementation that does not offer at least 15 significant 
digits. On modern computers, <code>double</code> is usually much more accurate than <code>float</code>, 
and not much slower. Sometimes, <code>double</code> is even faster.</p>
<p>Now that we have defined the <code>midterm</code> and <code>final</code> variables, we read values into 
them. Like the output operator (&sect;0.7/4), the input operator returns its left operand as its 
result. So, we can chain input operations just as we chain output operations, so</p>
<div class="prebox"><pre>
cin &gt;&gt; midterm &gt;&gt; final;
</pre></div>
<p>has the same effect as</p>
<div class="prebox"><pre>
cin &gt;&gt; midterm;
cin &gt;&gt; final;
</pre></div>
<p>Either form reads a number from the standard input into <code>midterm</code>, and the next number 
into <code>final</code>.</p>
<p>The next statement asks the student to enter homework grades:</p>
<div class="prebox"><pre>
cout &lt;&lt; &quot;Enter all your homework grades, &quot;
        &quot;followed by end-of-file: &quot;;
</pre></div>
<p>A careful reading will reveal that this statement contains only a single <code>&lt;&lt;</code>, even though it 
seems to be writing two string literals. We can get away with this because two or more 
string literals in a program, separated only by whitespace, are automatically concatenated. 
Therefore, this statement has exactly the same effect as</p>
<div class="prebox"><pre>
cout &lt;&lt; &quot;Enter all your homework grades, followed by end-of-file: &quot;;
</pre></div>
<p>By breaking the string literal in two, we avoid lines in our programs that are too long to 
read conveniently.</p>
<p>The next section of the code defines the variables that we'll use to hold the information 
that we intend to read. Of these, the interesting part is</p>
<div class="prebox"><pre>
int count = 0;
double sum = 0;
</pre></div>
<p>Note that we give the initial value <code>0</code> to both <code>sum</code> and <code>count</code>. The value <code>0</code> has type <code>int</code>, 
which means that the implementation must convert it to type <code>double</code> in order to use it to 
initialize <code>sum</code>. We could have avoided this conversion by initializing <code>sum </code>to <code>0.0</code> instead 
of <code>0</code>, but it makes no practical difference in this context: Any competent implementation 
will do the conversion during compilation, so there is no run-time overhead, and the 
result will be exactly the same.</p>
<p>In this case, what's more important than the conversion is that we give these variables 
an initial value at all. When we do not specify an initial value for a variable we are implicitly 
relying on <b><i>default-initialization</i></b>. The initialization that happens by default depends on 
the type of the variable. For objects of class type, the class itself says what initializer to 
use if there is not one specified. For example, we noted in &sect;1.1/10 that if we do not explicitly 
initialize a <code>string</code>, then the <code>string</code> is implicitly initialized to be empty. No such 
implicit initialization happens for local variables of built-in type.</p>
<p>Local variables of built-in type that are not explicitly initialized are <b><i>undefined</i></b>, which 
means that the variable's value consists of whatever random garbage already happens to 
occupy the memory in which the variable is created. It is illegal to do anything to an 
undefined value except to overwrite it with a valid value. Many implementations do not 
detect the violations of this rule, and allow access to undefined values. The result is 
almost always a crash or a wrong result, because whatever is in memory by happenstance 
is almost never a correct value; often it is a value that is invalid for the type.</p>
<p>Had we not given either <code>sum</code> or <code>count</code> an initial value, our program most likely 
would have failed. The reason is that the first thing the program does with these variables 
is to use their values: The program reads <code>count</code> in order to increment it, and it 
reads <code>sum</code> in order to add its value to the one we just read. By the same token, we do not 
bother to give an initial value to <code>x</code>, because the first thing we do with it is read into it, 
thereby obliterating any value we might have given it.</p>
<p>The only new aspect of the while statement is the form of its condition:</p>
<div class="prebox"><pre>
// <i>invariant:</i>
// <i> we have read count grades so far, and</i>
// <i> sum is the sum of the first count grades</i>
while (cin &gt;&gt; x) {
    ++count;
   sum  +=  x;
} 
</pre></div>
<p>We already know that the <code>while</code> loop executes so long as the condition <code>cin &gt;&gt; x</code> 
succeeds. We'll explore the details of what it means to treat <code>cin &gt;&gt; x</code> as a condition in 
&sect;3.1.1/39, but for now, what's important to know is that this condition succeeds if the 
most recent input request (i.e., <code>cin &gt;&gt; x</code>) succeeded.</p>
<p>Inside the <code>while</code>, we use the increment and compound-assignment operators, both of 
which we used in Chapter 2. From the discussion there we know that <code>++count</code> adds <code>1</code> to 
<code>count</code>, and that <code>sum += x</code> adds <code>x</code> to <code>sum</code>.</p>
<p>All that is left to explain is how the program does its output:</p>
<div class="prebox"><pre>
streamsize prec = cout.precision();
cout << "Your final grade is " << setprecision(3)
     << 0.2 * midterm + 0.4 * final + 0.4 * sum / count
     << setprecision(prec) << endl;
</pre></div>
<p>Our goal is to write the final grade with three significant digits, which we do by using 
<code>setprecision</code>. Like <code>endl</code>, <code>setprecision</code> is a manipulator. It manipulates the stream 
by causing subsequent output on that stream to appear with the given number of significant 
digits. By writing <code>setprecision(3)</code>, we ask the implementation to write grades 
with three significant digits, generally two before the decimal point and one after.</p>
<p>By using <code>setprecision</code>, we change the precision of any subsequent output that 
might appear on <code>cout</code>. Because this statement is at the end of the program, we know that 
there is no such output. Nevertheless, we believe that it is wise to reset <code>cout</code>'s precision 
to what it was before we changed it. We do so by calling a member function (&sect;1.2/14) of 
<code>cout</code> named <code>precision</code>. This function tells us the precision that a stream uses for 
floating-point output. We use <code>setprecision</code> to set the precision to 3, write the final 
grade, and then set the precision back to the value that <code>precision</code> gave us. The expression 
that computes the grade uses several of the arithmetic operators: <code>*</code> for multiplication, 
<code>/</code> for division, and <code>+</code> for addition, each of which has the obvious meaning.</p>
<p>We could have used the <code>precision</code> member function to set the precision, by writing</p>
<div class="prebox"><pre>
// <i>set precision to 3, return previous value</i>
streamsize prec = cout.precision(3);
cout &lt;&lt; &quot;Your final grade is &quot;
     &lt;&lt; 0.2 * midterm + 0.4 * final + 0.4 * sum / count &lt;&lt; endl;
// <i>reset precision to its original value</i>
cout.precision(prec);
</pre></div>
<p>However, we prefer to use the <code>setprecision</code> manipulator, because by doing so, we can 
minimize the part of the program in which the precision is set to an unusual value.</p>
<h4>3.1.1 Testing for end of input</h4>
<p>Conceptually, the only really new part of this program is the condition in the <code>while</code> statement. 
That condition implicitly uses an <code>istream</code> as the subject of the <code>while</code> condition:</p>
<div class="prebox"><pre>
while (cin &gt;&gt; x) {/*...*/}
</pre></div>
<p></p>
<p>The effect of this statement is to attempt to read from <code>cin</code>. If the read succeeds, <code>x</code> will 
hold the value that we just read, and the <code>while</code> test also succeeds. If the read fails (either 
because we have run out of input or because we encountered input that was invalid for 
the type of <code>x</code>), then the <code>while</code> test fails, and we should not rely on the value of <code>x</code>.</p>
<p>Understanding how this code works is a bit subtle. We can start by remembering that 
the <code>&gt;&gt;</code> operator returns its left operand, so that asking for the value of <code>cin &gt;&gt; x</code> is equivalent 
to executing <code>cin &gt;&gt; x</code> and then asking for the value of <code>cin</code>. For example, we can 
read a single value into <code>x</code>, and test whether we were successful in doing so, by executing</p>
<div class="prebox"><pre>
if (cin &gt;&gt; x) {/*...*/}
</pre></div>
<p>This statement has the same meaning as</p>
<div class="prebox"><pre>
cin >> x;
if (cin) { /* ... */ }
</pre></div>
<p>When we use <code>cin &gt;&gt; x</code> as a condition, we aren't just testing the condition; we are also 
reading a value into <code>x</code> as a side effect. Now, all we need to do is figure out what it means 
to use <code>cin</code> as a condition in a <code>while</code> statement.</p>
<p>Because <code>cin</code> has type <code>istream</code>, which is part of the standard library, we must look to 
the definition of <code>istream</code> for the meaning of <code>if (cin)</code> or <code>while (cin)</code>. The details of 
that definition turn out to be complicated enough that we won't discuss it in detail until 
&sect;12.5/222. However, even without these details, we can already understand a useful 
amount of what is happening.</p>
<p>The conditions that we used in Chapter 2 all involved relational operators that directly 
yield values of type <code>bool</code>. In addition, we can use expressions that yield values of arithmetic 
type as conditions. When used in a condition, the arithmetic value is converted to a 
<code>bool</code>: Nonzero values convert to <code>true</code>; zero values convert to <code>false</code>. For now, what we 
need to know is that similarly, the <code>istream</code> class provides a conversion that can be used 
to convert <code>cin</code> into a value that can be used in a condition. We don't yet know what type 
that value has, but we do know that the value can be converted to <code>bool</code>. Accordingly, we 
know that the value can be used in a condition. The value that this conversion yields 
depends on the internal state of the <code>istream</code> object, which will remember whether the 
last attempt to read worked. Thus, using <code>cin</code> as a condition is equivalent to testing 
whether the last attempt to read from <code>cin</code> was successful.</p>
<p>There are several ways in which trying to read from a stream can be unsuccessful:</p>
<ul>
<li>We might have reached the end of the input file.</li>
<li>We might have encountered input that is incompatible with the type of the variable 
that we are trying to read, such as might happen if we try to read an <code>int</code> and find 
something that isn't a number.</li>
<li>The system might have detected a hardware failure on the input device.</li>
</ul>
<p>In any of these cases, the effect is the same: Using this input stream as a condition will 
indicate that the condition is false. Moreover, once we have failed to read from a stream, 
all further attempts to read from that stream will fail until we reset the stream, which 
we'll learn how to do in &sect;4.1.3/57.</p>
<h3>3.1.2 The loop invariant</h3>
<p>Understanding the invariant (&sect;2.3.2/20) for this loop requires special care, because the 
condition in the <code>while</code> has side effects. Those side effects affect the truth of the invariant: 
Successfully executing <code>cin &gt;&gt; x</code> makes the first part of the invariant-the part that says 
that we have read <code>count</code> grades-false. Accordingly, we must change our analysis to 
account for the effect that the condition itself might have on the invariant.</p>
<p>We know that the invariant was true before evaluating the condition, so we know that 
we have already read count grades. If <code>cin &gt;&gt; x</code> succeeds, then we have now read 
<code>count + 1</code> grades. We can make this part of the invariant true again by incrementing 
<code>count</code>. However, doing so falsifies the second part of the invariant-the part that says
that <code>sum</code> is the sum of the first <code>count</code> grades-because after we have incremented <code>count</code>, 
<code>sum</code> is now the sum of the first <code>count - 1</code> grades, not the first <code>count</code> grades. Fortunately, 
we can make the second part of the invariant true by executing <code>sum += x</code>; so that 
the entire invariant will be true on subsequent trips through the while.</p>
<p>If the condition is false, it means that our attempt at input failed, so we didn't get any 
more data, and so the invariant is still true. As a result, we do not have to account for the 
condition's side effects after the <code>whi1e</code> finishes.</p>
<div class="prevnext">
<a href="14.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="16.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>