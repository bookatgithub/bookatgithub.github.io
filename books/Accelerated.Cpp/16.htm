<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>3.2 Using medians instead of averages</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="15.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="17.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>3.2 Using medians instead of averages</h3>
<p>The program that we've written so far has a design shortcoming: It throws away each 
homework grade as soon as it has read it. Doing so is fine for computing averages, but 
what if we wanted to use the median homework grade instead of the average?</p>
<p>The most straightforward way to find the median of a collection of values is to sort 
the values into increasing (or decreasing) order and pick the middle one—or, if the number of 
values is even, take the average of the two values nearest the middle. Medians are often 
more useful than averages, because although they still account correctly for consistent 
performance, they won't cause a few lousy grades to blow the whole course.</p>
<p>A bit of thinking should convince us that to compute medians, we must change our 
program fundamentally. In order to find the median of an unknown number of values, 
we must store every value until we have read them all. To find the average, we were able 
to store only the count and running total of the items we'd read. The average was just the 
total divided by the count.</p>
<h4>3.2.1 Storing a collection of data in a vector</h4>
<p>To compute the median, we must read and store all the homework grades, then sort them, 
and finally pick the middle one (or two). To do this computation conveniently and efficiently, 
we need a way to</p>
<ul>
<li>Store a number of values that we will read one at a time, without knowing in advance how many values there are</li>
<li>Sort the values after we have read them all</li>
<li>Get at the middle value(s) efficiently</li></ul>
<p>The standard library provides a type, named <b>vector</b>, that we can use to solve all these 
problems easily. A <code>vector</code> holds a sequence of values of a given type, grows as needed 
to accommodate additional values, and lets us get at each individual value efficiently.</p>
<p>Let's start rewriting our grading program by making it put the grades into a <code>vector</code>, 
instead of computing the sum and throwing the grades away. The original version of that code looked like</p>
<div class="prebox"><pre>
// <i>original program </i>(<i>excerpt</i>):
int count = 0; 
double sum = 0;
double x;
// <i>invariant:</i>
// <i>we have read count grades so far, and</i>
// <i>sum is the sum of the first count grades</i>
while (cin  &gt;&gt; x) {
    ++count;
    sum += x;
}
</pre></div>
<p>This loop kept track of how many grades it read, and kept a running total of their value. 
The need to keep both these variables in step with the values as we read them made the 
loop invariant relatively complicated. In contrast, using a <code>vector</code> to store values as we 
read them is much simpler:</p>
<div class="prebox"><pre>
// <i>revised version of the excerpt:</i>
double x;
vector&lt;double&gt; homework;

// <i>invariant: homework contains all the homework grades read so far</i>
while (cin &gt;&gt; x)
    homework.push_back(x);
</pre></div>
<p>We haven't changed the basic structure of our code: It still reads values one at a time into 
<code>x</code> until it encounters end-of-file or invalid input. What's different is what we do with 
those values.</p>
<p>Let's start with <code>homework</code>, which we define as having type <code>vector&lt;double&gt;</code>. A 
<code>vector</code> is a <i><b>container</b></i> that holds a collection of values. All of the values in an individual 
<code>vector</code> are the same type, but different <code>vector</code>s can hold objects of different types. 
Whenever we define a <code>vector</code>, we must specify the type of the values that the <code>vector</code> 
will hold. Our definition of <code>homework</code> says that it is a <code>vector</code>, which will hold values of 
type <code>double</code>.</p>
<p>The <code>vector</code> type is defined using a language feature called <b><i>template classes</i></b>. We'll see 
how to define a template class in Chapter 11. For now, what's important is to realize that 
we can separate what it means to be a <code>vector</code> from the particular type of the objects that 
the <code>vector</code> holds. We specify the type of the objects inside angle brackets. For example, 
objects of type <code>vector&lt;double&gt;</code> are <code>vector</code>s that hold objects of type <code>double</code>, objects 
of type <code>vector&lt;string&gt;</code> hold <code>string</code>s, and so on.</p>
<p>The <code>while</code> loop operates by reading values from the standard input and storing them 
in the <code>vector</code>. As before, we read into <code>x</code> until we hit end-of-file or encounter input that 
is not a <code>double</code>. What is new is</p>
<div class="prebox"><pre>
homework.push_back(x);
</pre></div>
<p>As with <code>greeting.size()</code> in &sect;1.2/14, we can see that <code>push_back</code> is a member function, 
which is defined as part of the <code>vector</code> type, and that we are asking that function to 
act on behalf of the object named <code>homework</code>. We call that function, passing it <code>x</code>. What 
<code>push_back</code> does is append a new element to the end of the <code>vector</code>. It gives that new 
element the value that we passed as the argument to <code>push_back</code>. Thus, <code>push_back</code> 
pushes its argument onto the back of a <code>vector</code>. As a side effect, it increases the size of the 
<code>vector</code> by one.</p>
<p>Because the <code>push_back</code> function is such a good match for what we're trying to do, it 
is trivial to see that calling it will maintain our loop invariant. Therefore, it is clear that 
when we drop out of the <code>while</code>, we will have read all the homework grades and stored 
them in <code>homework</code>, which is what we wanted.</p>
<p>Next, we have to think about the output.</p>
<h4>3.2.2 Generating the output</h4>
<p>In the original version of the program from &sect;3.1/35, we calculated the student's grade 
within the output expression itself:</p>
<div class="prebox"><pre>
streamsize prec = cout.precision();
cout &lt;&lt; &quot;Your final grade is  &quot; &lt;&lt; setprecision(3)
     &lt;&lt; 0.2 * midterm + 0.4 * final + 0.4 * sum / count
     &lt;&lt; setprecision(prec) &lt;&lt; endl;
</pre></div>
<p>where <code>final</code> and <code>midterm</code> held the exam grades, and <code>sum</code> and <code>count</code> contained the sum 
of all the homework grades and the count of how many grades were entered.</p>
<p>As we remarked in &sect;3.2.1/41, the easiest way to calculate the median is to sort our data 
and then find the middle value, or the average of the two middle values if we have an 
even number of elements. We can make the computation easier to understand if we separate 
the computation of the median from the code that writes the output.</p>
<p>In order to find the median, we begin by noting that we are going to need to know the 
size of the <code>homework</code> vector at least twice: once to check whether the size is zero, and 
again to compute the location of the middle element(s). To avoid having to ask for the 
size twice, we will store the size in a local variable:</p>
<div class="prebox"><pre>
typedef vector&lt;double&gt;::size_type vec_sz;
vec_sz size = homework.size();
</pre></div>
<p>The <code>vector</code> type defines a type named <code>vector&lt;double&gt;::size_type</code>, and a function 
named <code>size</code>. These members operate analogously to the ones in <code>string:</code> The type 
defined by <code>size_type</code> is an <code>unsigned</code> type guaranteed sufficient to hold the size of the 
largest possible <code>vector</code>, and <code>size()</code> returns a <code>size_type</code> value that represents the 
number of elements in the <code>vector</code>.</p>
<p>Because we need to know the size in two places, we will remember the value in a local 
variable. Different implementations use different types to represent sizes, so we cannot 
write the appropriate type directly and remain implementation-independent. For that 
reason, it is good programming practice to use the <code>size_type</code> that the library defines to 
represent container sizes, which we do in naming the type of <code>size</code>.</p>
<p>In this example, that type is unwieldy to write—and to read. To simplify our program, 
we have used a language facility that we haven't encountered before, called a <b>typedef</b>. 
When we include the word <code>typedef</code> as part of a definition, we are saying that we want 
the name that we define to be a synonym for the given type, rather than a variable of that 
type. Thus, because our definition includes <code>typedef</code>, it defines the name <code>vec_sz</code> as a 
synonym for <code>vector&lt;double&gt;::size_type</code>. Names defined via <code>typedef</code> have the
same scope as any other names. That is, we can use the name <code>vec_sz</code> as a synonym for 
the <code>size_type</code> until the end of the current scope.</p>
<p>Once we know how to name the type of the value that <code>homework.size()</code> returns, we 
can store that value in a local variable, named <code>size</code>, of the same type. It is worth noting 
that even though we are using the name <code>size</code> for two different purposes, there is no conflict 
or ambiguity. The only way to ask for the size of a <code>vector</code> is by putting a call to the 
<code>size</code> function on the right-hand side of a dot, with a <code>vector</code> on the left-hand side. In 
other words, the <code>size</code> that is defined as a local variable is in a different scope than the 
one that is an operation on <code>vector</code>s. Because these names are in different scopes, the 
compiler (and the programmer) can know which <code>size</code> is intended.</p>
<p>Because it is meaningless to find the median of an empty dataset, our next job is to verify 
that we have some data:</p>
<div class="prebox"><pre>
if (size == 0) {
    cout &lt;&lt; endl &lt;&lt; &quot;You must enter your grades.  &quot;
                    &quot;Please try again.&quot; &lt;&lt; endl;
    return 1;
}
</pre></div>
<p>We can detect this state of affairs by checking whether <code>size</code> is zero. If it is, the most sensible 
action is to complain and stop the program. We do so by returning 1 to indicate failure. 
As discussed in Chapter 0, the system presumes that if <code>main</code> returns 0, the program 
succeeded. Returning anything else has an implementation-defined meaning, but most 
implementations treat any nonzero value as failure.</p>
<p>Now that we have verified that we have data, we can begin computing the median. 
The first part of doing so is to sort the data, which we do by calling a library function:</p>
<div class="prebox"><pre>
sort(homework.begin(), homework.end());
</pre></div>
<p>The <code>sort</code> function, defined in the <code>&lt;algorithm&gt;</code> header, rearranges the values in a container 
so that they are in nondecreasing order. We say nondecreasing instead of increasing 
because some elements might be equal to one another.</p>
<p>The arguments to <code>sort</code> specify the range of elements to be sorted. The <code>vector</code> class 
provides two member functions, <code>begin</code> and <code>end</code>, for this kind of usage. We'll have much 
more to say about <code>begin</code> and <code>end</code> in &sect;5.2.2/81, but what is important for now is to know 
that <code>homework.begin()</code> denotes the first element in the <code>vector</code> named <code>homework</code>, 
whereas <code>homework.end()</code> denotes (one past) the last element in <code>homework</code>.</p>
<p>The <code>sort</code> function does its work in place: It moves the values of the container's elements 
around rather than creating a new container to hold the results.</p>
<p>Once we have sorted homework, we need to find the middle element or elements:</p>
<div class="prebox"><pre>
vec_sz mid = size/2;
double median;
median = size % 2 == 0 ? (homework[mid] + homework[mid-1]) / 2
                       : homework[mid];
</pre></div>
<p>We begin by dividing <code>size</code> by 2 in order to locate the middle of the <code>vector</code>. If the number 
of elements is even, this division is exact. If the number is odd, then the result is the 
next lower integer.</p>
<p>Exactly how we compute the median depends on whether the number of elements is 
even or odd. If it is even, the median is the average of the two elements closest to the 
middle. Otherwise, there is an element in the middle, the value of which is the median.</p>
<p>The expression that assigns a value to <code>median</code> uses two new operators: the <b><i>remainder</i></b> 
operator, <code>%</code>, and the <b><i>conditional</i></b> operator, often called the <code>?  :</code> operator.</p>
<p>The remainder operator, <code>%</code>, returns the remainder that results from dividing its left 
operand by its right operand. If the remainder after dividing by 2 is 0, then the program 
has read an even number of elements.</p>
<p>The conditional operator is shorthand for a simple if-then-else expression. First, it 
evaluates the expression, <code>size % 2 == 0</code>, that precedes the <code>?</code> part of the operator as a condition 
to obtain a <code>bool</code> value. If the condition yields <code>true</code>, then the result is the value of 
the expression between the <code>?</code> and the <code>:</code> that follows; otherwise, the result is the value of 
the expression after the <code>:</code>. So, if we read an even number of elements, we'll set <code>median</code> to 
the average of the two middle elements. If we read an odd number, then we'll set 
<code>median</code> to <code>homework[mid]</code>. Analogous to <code>&amp;&amp;</code> and <code>||</code>, the <code>? :</code> operator first evaluates 
its leftmost operand. Based on the resulting value, it then evaluates exactly one of its 
other operands.</p>
<p>The references to <code>homework[mid]</code> and <code>homework[mid-1]</code> show one way to access 
an element of a <code>vector</code>. Every element of every <code>vector</code> has an integer, called its <b><i>index</i></b>, 
associated with it. So, for example, <code>homework[mid]</code> is the element of <code>homework</code> with 
index <code>mid</code>. As you might suspect from &sect;2.6/30, the first element of the <code>vector</code> named 
<code>homework</code> is <code>homework[0]</code>, and the last element is <code>homework[size - 1]</code>.</p>
<p>Each element is itself an (unnamed) object of the type stored in the container. So, 
<code>homework[mid]</code> is an object of type <code>double</code>, on which we can invoke any of the operations 
that type <code>double</code> supports. In particular, we can add two elements, and we can 
divide the resulting sum by 2 to get the average value of the two objects.</p>
<p>Once we know how to access the elements of <code>homework</code>, we can see how the median 
computation works. Assume first that <code>size</code> is even, so that <code>mid</code> is <code>size / 2</code>. Then there 
must be exactly <code>mid</code> elements of <code>homework</code> on each side of the middle:</p>
<center>
<img src="images/45.jpg" />
</center>
<p>Because we know that each half of <code>homework</code> has exactly <code>mid</code> elements, it should be easy 
to see that the indices of the two elements nearest the middle are <code>mid - 1</code> and <code>mid</code>; the 
median is the average of these elements.</p>
<p>If the number of elements is odd, then <code>mid</code> is really <code>(size-1) / 2</code>, because of truncation. 
In that case, we can think of our sorted <code>homework</code> vector as two segments with <code>mid</code> elements 
each, separated by a single element in the middle. That element is the median:</p>
<center>
<img src="images/46.jpg" />
</center>
<p>In either case, our median computation relies on the ability to access a <code>vector</code> element 
knowing only its index.</p>
<p>Once we have computed the median, We need only compute and write the final grade:</p>
<div class="prebox"><pre>
streamsize prec = cout.precision();
cout &lt;&lt; &quot;Your final grade is &quot; &lt;&lt; setprecision(3) 
     &lt;&lt; 0.2 * midterm + 0.4 * final + 0.4 * median
     &lt;&lt; setprecision(prec) &lt;&lt; endl;
</pre></div>
<p>The final program isn't much more complicated than the program in &sect;3,1/35, even though 
it does much more work. In particular, even though our <code>homework</code> vector will grow as 
needed to accommodate grades for as many homework assignments as our students can 
tolerate, our program doesn't need to worry about obtaining the memory to store all 
those grades. The standard library does all that work for us.</p>
<p>Here is the entire program. The only parts that we have not already mentioned are the 
<code>#include</code> directives, the corresponding <code>using</code>-declarations, and a few more comments:</p>
<div class="prebox"><pre>
#include &lt;algorithm&gt;
#include &lt;iomanip&gt;
#include &lt;ios&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

using std::cin;             using std::sort;
using std::cout;            using std::streamsize;
using std::endl;            using std::string;
using std::setprecision;    using std::vector;

int main()
{
    // <i>ask for and read the student's name</i>
    cout << "Please enter your first name: ";
    string name;
    cin >> name;
    cout << "Hello, " << name << "!" << endl;

    // <i>ask for and read the midterm and final grades</i>
    cout << "Please enter your midterm and final exam grades: ";
    double midterm, final;
    cin >> midterm >> final;

    // <i>ask for and read the homework grades</i>
    cout << "Enter all your homework grades, "
            "followed by end-of-file: ";

    vector&lt;double&gt; homework;
    double x;
	// <i>invariant: homework contains all the homework grades read so far</i>
    while (cin >> x)
        homework.push_back(x);

    // <i>check that the student entered some homework grades</i>
    typedef vector&lt;double&gt;::size_type vec_sz;
    vec_sz size = homework.size();
    if (size == 0) {
        cout << endl << "You must enter your grades.  "
                        "Please try again." << endl;	
        return 1;
    }

    // <i>sort the grades</i>
    sort(homework.begin(), homework.end());

    // <i>compute the median homework grade</i>
    vec_sz mid = size/2;
    double median;
    median = size % 2 == 0 ? (homework[mid] + homework[mid-1]) / 2
                           : homework[mid];

    // <i>compute and write the final grade</i>
    streamsize prec = cout.precision();
    cout << "Your final grade is " << setprecision(3)
         << 0.2 * midterm + 0.4 * final + 0.4 * median
         << setprecision(prec) << endl;

    return 0;
}
</pre></div>
<h4>3.2.3 Some additional observations</h4>
<p>This code contains some points that deserve particular attention. First, there's a bit more 
to know about why we exit the program if <code>homework</code> is empty. Logically, taking the 
median of an empty collection of values is undefined—we have no idea what it might 
mean. Therefore, exiting does the right thing: If we don't know what to do, we might 
as well quit. But it is important to know what would happen if we had continued execution. 
If the input were empty, and we neglected to test that we had read at least one number, 
the code to compute the median would fail. Why?</p>
<p>If we had read no elements, then <code>homework.size()</code>, and therefore <code>size</code>, would be 
0. Likewise, <code>mid</code> would be 0. When we executed <code>homework[mid]</code>, we would be looking 
at the first element (the one indexed by 0) in <code>homework</code>. But there are no elements in 
<code>homework</code>! When we execute <code>homework[0]</code>, all bets are off as to what we get. <code>vector</code>s 
do not check whether the index is in range. Such checking is up to the user.</p>
<p>The next important observation is that <code>vector&lt;double&gt;::size_type</code>, like all 
standard-library size types, is an <b><i>unsigned integral type</i></b>. Such types are incapable of storing 
negative values at all; instead, they store values modulo 2<sup><i>n</i></sup>, where <i>n</i> depends on the 
implementation. So, for example, there would never be any point in checking whether 
<code>homework.size() &lt; 0</code>, because that comparison would always yield <code>false</code>.</p>
<p>Moreover, whenever ordinary integers and unsigned integers combine in an expression, 
the ordinary integer is converted to unsigned. In consequence, expressions such 
as <code>homework.size() - 100</code> yield unsigned results, which means that they, too, cannot be 
less than zero—even if <code>homework.size() &lt; 100</code>.</p>
<p>Finally, it is also worth noting that the execution performance of our program is actually 
quite good, even though the <code>vector&lt;double&gt;</code> object grows as needed to accommodate 
its input, rather than being allocated with the right size immediately.</p>
<p>We can be confident about the program's performance because the C++ standard 
imposes performance requirements on the library's implementation. Not only must the 
library meet the specifications for behavior, but it must also achieve well-specified performance 
goals. Every standard-conforming C++ implementation must</p>
<ul>
<li>Implement <code>vector</code> so that appending a large number of elements to a <code>vector</code> is no 
worse than proportional to the number of elements</li>
<li>Implement <code>sort</code> to be no slower than <i>n</i>log(<i>n</i>), where <i>n</i> is the number of elements 
being sorted</li>
</ul>
<p>The whole program is therefore guaranteed to run in <i>n</i>log(<i>n</i>) time or better on any 
standard-conforming implementation. In fact, the standard library was designed with a 
ruthless attention to performance. C++ is designed for use in performance-critical applications, 
and the emphasis on speed pervades the library as well.</p>
<div class="prevnext">
<a href="15.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="17.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>