<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>3.3 Details</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="16.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="18.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>3.3 Details</h3>
<p><b>Local variables</b> are default-initialized if they are defined without an explicit initializer. 
Default-initialization of a built-in type means that the value is undefined. Undefined values 
may be used only as the left-hand side of an assignment.</p>
<p><b>Type definitions:</b></p>
<p><code>typedef <i>type name</code>;</i>&nbsp;&nbsp;&nbsp;Defines <i><code>name</code></i> as a synonym for type.</p>
<p><b>The vector type</b>, defined in <code>&lt;vector&gt;</code>, is a library type that is a container that holds a 
sequence of values of a specified type, vectors grow dynamically. Some important 
operations are:</p>
<p><code>vector&lt;T&gt;::size_type</code></p>
<div class="details">
A type guaranteed to be able to hold the number of elements in the<br />
largest possible <code>vector</code>.
</div>
<p><code>v.begin()</code></p>
<div class="details">
Returns a value that denotes the first element in <code>v</code>.
</div>
<p><code>v.end()</code></p>
<div class="details">
Returns a value that denotes (one past) the last element in <code>v</code>.
</div>
<p><code>vector&lt;T&gt; v;</code></p>
<div class="details">
Creates an empty vector that can hold elements of type <code>T</code>.
</div>
<p><code>v.push_back(e)</code></p>
<div class="details">
Grows the vector by one element initialized to <code>e</code>.
</div>
<p><code>v[i]</code></p>
<div class="details">
Returns the value stored in position <code>i</code>.
</div>
<p><code>v.size()</code></p>
<div class="details">
Returns the number of elements in <code>v</code>.
</div>
<p><b>Other library facilities</b></p>
<p><code>sort(b, e)</code></p> 
<div class="details">
Rearranges the elements defined by the range <code>[b, e)</code> into nondecreasing 
order. Defined in <code>&lt;algorithm&gt;</code>.
</div>
<p><code>max(el, e2)</code></p> 
<div class="details">
Returns the larger of the expressions <code>e1</code> and <code>e2</code>; <code>e1</code> and <code>e2</code> must 
have exactly the same type. Defined in <code>&lt;algorithm&gt;</code>.
</div>
<p><code>while (cin &gt;&gt; x)</code></p>
<div class="details">
Reads a value of an appropriate type into x and tests the state of 
the stream. If the stream is in an error state, the test fails; otherwise, 
the test succeeds, and the body of the <code>while</code> is executed.
</div>
<p><code>s.precision(n)</code></p>
<div class="details">
Sets the precision of stream <code>s</code> to <code>n</code> for future output (or leaves it 
unchanged if <code>n</code> is omitted). Returns the previous precision.
</div>
<p><code>setprecision(n)</code></p>
<div class="details">
Returns a value that, when written on an output stream <code>s</code>, has the 
effect of calling <code>s.precision(n)</code>. Defined in <code>&lt;iomanip&gt;</code>.
</div>
<p><code>streamsize</code></p>
<div class="details">
The type of the value expected by <code>setprecision</code> and returned by 
<code>precision</code>. Defined in <code>&lt;ios&gt;</code>.
</div>
<h4>Exercises</h4>
<p><b>3-0.</b> Compile, execute, and test the programs in this chapter.</p>
<p><b>3-1.</b> Suppose we wish to find the median of a collection of values. Assume that we have read 
some of the values so far, and that we have no idea how many values remain to be read. 
Prove that we cannot afford to discard any of the values that we have read. <i>Hint:</i> One proof 
strategy is to assume that we can discard a value, and then find values for the unread—and 
therefore unknown—part of our collection that would cause the median to be the value that 
we discarded.</p>
<p><b>3-2.</b> Write a program to compute and print the quartiles (that is, the quarter of the numbers with 
the largest values, the next highest quarter, and so on) of a set of integers.</p>
<p><b>3-3.</b> Write a program to count how many times each distinct word appears in its input.
<p><b>3-4.</b> Write a program to report the length of the longest and shortest <code>string</code> in its input.</p>
<p><b>3-5.</b> Write a program that will keep track of grades for several students at once. The program 
could keep two <code>vector</code>s in sync: The first should hold the student's names, and the second 
the final grades that can be computed as input is read. For now, you should assume a fixed 
number of homework grades. We'll see in &sect;4.1.3/56 how to handle a variable number of 
grades intermixed with student names.</p>
<p><b>3-6.</b> The average-grade computation in &sect;3.1/36 might divide by zero if the student didn't enter 
any grades. Division by zero is undefined in C++, which means that the implementation is 
permitted to do anything it likes. What does your C++ implementation do in this case? 
Rewrite the program so that its behavior does not depend on how the implementation treats 
division by zero.</p>
<div class="prevnext">
<a href="16.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="18.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>