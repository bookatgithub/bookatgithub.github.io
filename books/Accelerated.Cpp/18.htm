<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Organizing programs and data</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="17.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="19.htm"><img src="images/Next1.gif" /></a>
</div>
<div class="chapname">
<h1>4</h1>
</div>
<div id="chapter">
<h2>Organizing programs and data</h2>
</div>
<p>Although the program in &sect;3.2.2/46 is larger than we would like, it would have been 
larger still without <code>vector, string,</code> and <code>sort</code>. These library facilities, like others that 
we have used, share several qualities: Each one</p>
<ul>
<li>Solves a particular kind of problem</li>
<li>Is independent of most of the others</li>
<li>Has a name</li>
</ul>
<p>Our own programs have the first of these qualities, but lack the others. This lack is fine 
for small programs, but as we set out to solve larger problems, we will find that our solutions 
will become unmanageable unless we break them into independent, named parts.</p>
<p>Like most programming languages, C++ offers two fundamental ways of organizing 
large programs: functions (sometimes called subroutines) and data structures. In addition, 
C++ lets programmers combine functions and data structures into a single notion 
called a class, which we'll explore starting in Chapter 9.</p>
<p>Once we have learned how to use functions and data structures to organize our computations, 
we also need the ability to divide our programs into files that we can compile 
separately and combine after compilation. The last part of this chapter will show how 
C++ supports separate compilation.</p>
<a name="comp">
<h3>4.1 Organizing computations</h3>
</a>
<p>We shall begin by writing a function to calculate a student's final grade from the midterm 
and final exam grades and overall homework grade. We'll assume that we've already calculated 
the overall homework grade from the individual homework grades, which we 
have been computing as the average or median. Aside from that assumption, this function 
will use the same policy as the one that we've been using all along: Homework 
and the final exam contribute 40% each to the total, and the midterm makes up the 
remaining 20%.</p>
<p>Whenever we do—or might do—a computation in several places, we should think 
about putting it in a function. An obvious reason for doing so is that then we can use the 
function instead of redoing the computation explicitly. Not only does using functions 
reduce our total programming effort, but doing so also makes it easier for us to change
the computation if we wish. For example, assume we wanted to change our grading policy. 
If we had to hunt through every program we had ever written, looking for the parts 
that dealt with grading, we would probably become discouraged quickly.</p>
<p>There is a more subtle advantage to using functions for such computations: A function 
has a name. If we name a computation, we can think about it more abstractly—we can 
think more about what it does and less about how it works. If we can identify important 
parts of our problems, and create named pieces of our programs that correspond to those 
parts, then our programs will be easier to understand and the problems easier to solve.</p>
<p>Here is a function that computes grades according to our policy:</p>
<div class="prebox"><pre>
// <i>compute a student's overall grade from midterm and final exam grades and homework grade</i>
double grade(double midterm, double final, double homework)
{
    return  0.2 * midterm + 0.4 * final + 0.4 * homework;
}
</pre></div>
<p>Until now, all the functions that we've defined have been named <code>main</code>. We define most 
other functions similarly, by specifying the return type, followed first by the function 
name, next by a <i><b>parameter list </b></i>enclosed in ( ), and, finally, by the function body, which is 
enclosed in <code>{ }</code>. The rules are more complicated for functions that return values that 
denote other functions; see &sect;A.1.2/297 for the full story.</p>
<p>In this example, the parameters are <code>midterm, final</code>, and <code>homework</code>, each of which 
has type <code>double</code>. They behave like variables that are local to the function, which means 
that calling the function creates them and returning from the function destroys them.</p>
<p>As with any other variables, we must define the parameters before using them. Unlike 
other variables, defining them does not create them immediately; only calling the function 
creates them. Therefore, whenever we call the function, we must supply corresponding 
<i><b>arguments</b></i>, which are used to initialize the parameters when the function begins execution. 
For example, in &sect;3.1/36 we computed a grade by writing</p>
<div class="prebox"><pre>
cout &lt;&lt; &quot;Your final grade is  &quot; &lt;&lt; setprecision(3)
     &lt;&lt; 0.2 * midterm + 0.4 * final + 0.4 * sum / count
     &lt;&lt; setprecision(prec) &lt;&lt; endl;
</pre></div>
<p>If we had the grade function available, we could have written</p>
<div class="prebox"><pre>
cout &lt;&lt; &quot;Your final grade is &quot; &lt;&lt; setprecision(3)
     &lt;&lt; grade(midterm, final, sum / count)
     &lt;&lt; setprecision(prec) &lt;&lt; endl;
</pre></div>
<p>Not only must we supply arguments that correspond to the parameters of the functions 
that we call, but we must supply them in the same order. Accordingly, when we call the 
<code>grade</code> function, the first argument must be the midterm grade, the second must be the 
final exam grade, and the third must be the homework grade.</p>
<p>Arguments can be expressions, such as <code>sum / count</code>, not just variables. In general, 
each argument is used to initialize the. corresponding parameter, after which the parameters 
behave like ordinary local variables inside the function. So, for example, when we 
call <code>grade(midterm, final, sum / count)</code>, the <code>grade</code> function's parameters are initialized 
to copies of the arguments' values, and do not refer directly to the arguments 
themselves. This behavior is often called <i><b>call by value, </b></i>because the parameter takes on a 
copy of the value of the argument.</p>
<h4>4.1.1 Finding medians</h4>
<p>Another problem that we solved in &sect;3.2.2/46, and that we can imagine wanting to solve in 
other contexts, is finding the median of a <code>vector</code>. We'll see in &sect;8.1.1/140 how to define a 
function that is so general that it works with a <code>vector</code> of any type of value. For now, 
we'll limit our attention to <code>vector&lt;double&gt;</code>.</p>
<p>To write our function, we'll start with the part of the program in &sect;3.2.2/47 that computes 
medians, and make a few changes:</p>
<div class="prebox"><pre>
// <i>compute the median of a </i>vector&lt;double&gt;
// <i>note that calling this function copies the entire argument </i>vector
double median(vector&lt;double&gt; vec)
{
    typedef vector&lt;double&gt;::size_type vec_sz;

    vec_sz size = vec.size();
    if (size == 0)
        throw domain_error(&quot;median of an empty vector&quot;);

    sort(vec.begin(), vec.end());
	
    vec_sz mid =  size / 2;

    return size % 2 == 0 ? (vec[mid] + vec[mid-1]) / 2 : vec[mid];
}
</pre></div>
<p>One change is that we named our vector <code>vec</code>, rather than <code>homework</code>. After all, our function 
can compute the median of anything, not just homework grades. We also eliminated 
the variable <code>median</code>, because we no longer need it: We can return the median as soon as 
we've calculated it. We are still using <code>size</code> and <code>mid</code> as variables, but now they are local 
to the <code>median</code> function and, therefore, inaccessible (and irrelevant) elsewhere. Calling the 
<code>median</code> function will create these variables, and returning from the function will destroy 
them. We define <code>vec_sz</code> as a local type name, because we don't want to conflict with 
anyone who might want to use that name for another purpose.</p>
<p>The most significant change is what we do if the <code>vector</code> is empty. In &sect;3.2.2/46, we 
knew that we would have to complain to whoever was running our program, and we also 
knew who that person would be and what kind of complaint would make sense. In this 
revised version, on the other hand, we don't know who is going to be using it, or for what 
purpose, so we need a more general way of complaining. That more general way is to 
<b>throw </b>an <i><b>exception</b> </i>if the <code>vector</code> is empty.</p>
<p>When a program throws an exception, execution stops in the part of the program in 
which the <code>throw</code> appears, and passes to another part of the program, along with an 
<i><b>exception object</b>, </i>which contains information that the caller can use to act on the exception.</p>
<p>The most important part of the information that is passed is usually the mere fact that 
an exception was thrown. That fact, along with the type of the exception object, is usually 
enough to let the caller figure out what to do. In this particular example, the exception 
that we throw is <code>domain_error</code>, which is a type that the standard library defines in 
header <code>&lt;stdexcept&gt;</code> for use in reporting that a function's argument is outside the set of 
values that the function can accept. When we create a <code>domain_error</code> object to throw, 
we can give it a <code>string</code> that describes what went wrong. The program that catches the 
exception can use this <code>string</code> in a diagnostic message, as we shall see in &sect;4.2.3/65.</p>
<p>There is one more detail about how functions behave that is important to understand. 
When we call a function, we can think of the parameters as local variables whose initial 
values are the arguments. If we do so, we can see that calling a function involves copying 
the arguments into the parameters. In particular, when we call <code>median</code>, the <code>vector</code> that 
we use as an argument will be copied into <code>vec</code>.</p>
<p>In the case of the <code>median</code> function, it is useful to copy the argument to the parameter, 
even if doing so takes significant time, because the <code>median</code> function changes the value of 
its parameter by calling <code>sort</code>. Copying the argument prevents changes made by <code>sort</code> 
from propagating back to the caller. This behavior makes sense, because taking the 
<code>median</code> of a <code>vector</code> should not change the <code>vector</code> itself.</p>
<h4>4.1.2 Reimplementing our grading policy</h4>
<p>The <code>grade</code> function in &sect;4.1/52 assumes that we already know the student's overall homework 
grade, and not just the individual homework assignments' grades. How we obtain 
that grade is part of our policy: We used the average in &sect;3.1/36 and the median in 
&sect;3.2.2/47. Accordingly, we might wish to express this part of our grading policy in a 
function, along the same lines as we did in &sect;4.1/52:</p>
<div class="prebox"><pre>
// <i>compute a student's overall grade from midterm and final exam grades</i>
// <i>and vector of homework grades.</i>
// <i>this function does not copy its argument, because </i>median <i>does so for us.</i>
double grade(double midterm, double final, const vector&lt;double&gt;&amp; hw)
{
    if (hw.size() == 0)
        throw domain_error(&quot;student has done no homework&quot;);
    return grade(midterm, final, median(hw));
}
</pre></div>
<p>This function has three points of particular interest.</p>
<p>The first point is the type, <code>const vector&lt;double&gt;&amp;</code>, that we specify for the third 
argument. This type is often called &quot;reference to <code>vector</code> of <code>const double</code>.&quot; Saying 
that a name is a <i><b>reference</b> </i>to an object says that the name is another name for the object. 
So, for example, if we write</p>
<div class="prebox"><pre>
vector&lt;double&gt; homework;
vector&lt;double&gt;&amp; hw = homework;   // hw <i>is a synonym for </i>homework
</pre></div>
<p>we are saying that <code>hw</code> is another name for <code>homework</code>. From that point on, anything we 
do to <code>hw</code> is equivalent to doing the same thing to <code>homework</code>, and vice versa. Adding a 
<code>const</code>, as in</p>
<div class="prebox"><pre>
// chw <i>is a read-only synonym for </i>homework
const vector&lt;double&gt;&amp; chw = homework;
</pre></div>
<p>still says that <code>chw</code> is another name for <code>homework</code>, but the <code>const</code> promises that we will 
not do anything to chw that might change its value.</p>
<p>Because a reference is another name for the original, there is no such thing as a reference 
to a reference. Defining a reference to a reference has the same effect as defining a 
reference to the original object. For example, if we write</p>
<div class="prebox"><pre>
// hw1 <i>and </i>chw1 <i>are synonyms for </i>homework; chw1 <i>is read-only</i>
vector&lt;double&gt;&amp; hw1 = hw;
const vector&lt;double&gt;&amp; chw1 = chw;
</pre></div>
<p>then <code>hw1</code> is another name for <code>homework</code>, just as <code>hw</code> is, and <code>chw1</code>, like <code>chw</code>, is another 
name for <code>homework</code> that does not allow write access.</p>
<p>If we define a non<code>const</code> reference—a reference that allows writing—we cannot make 
it refer to a <code>const</code> object or reference, because doing so would require permission that 
the <code>const</code> denies. Therefore, we cannot write</p>
<div class="prebox"><pre>
vector&lt;double&gt;&amp; hw2 = chw;    // <i>error: requests write access to </i>chw
</pre></div>
<p>because we promised not to modify <code>chw</code>.</p>
<p>Analogously, when we say that a parameter has type <code>const vector&lt;double&gt;&amp;</code>, we 
are asking the implementation to give us direct access to the associated argument, without 
copying it, and also promising that we won't change the parameter's value (which would 
otherwise change the argument too). Because the parameter is a reference to <code>const</code>, we 
can call this function on behalf of both <code>const</code> and non<code>const</code> <code>vector</code>s. Because the 
parameter is a reference, we avoid the overhead of copying the argument.</p>
<p>The second point of particular interest about the <code>grade</code> function is that like the one in 
&sect;4.1/52, it is named <code>grade</code>—even though it calls the other <code>grade</code> function. The notion 
that we can have several functions with the same name is called <i><b>overloading</b>, </i>and figures 
prominently in many C++ programs. Even though we have two functions with the same 
name, there is no ambiguity, because whenever we call <code>grade</code>, we will supply an argument 
list, and the implementation will be able to tell from the type of the third argument 
which <code>grade</code> function we mean.</p>
<p>The third point is that we check whether <code>homework.size()</code> is zero, even though we 
know that <code>median</code> will do so for us. The reason is that if <code>median</code> discovers that we are 
asking for the median of an empty <code>vector</code>, it throws an exception that includes the message 
<code>median of an empty vector</code>. This message is not directly useful to someone who 
is computing student grades. Therefore, we throw our own exception, which we hope 
will give the user more of a clue as to what has gone wrong.</p>
<h4>4.1.3 Reading homework grades</h4>
<p>Another problem that we have had to solve in several contexts is reading homework 
grades into a <code>vector</code>.</p>
<p>There is a problem in designing the behavior of such a function: It needs to return two 
values at once. One value is, of course, the homework grades that it read. The other is an 
indication of whether the attempted input was successful.</p>
<p>There is no direct way to return more than one value from a function. One indirect 
way to do so is to give the function a parameter that is a reference to an object in which it 
is to place one of its results. This strategy is common for functions that read input, so 
we'll use it. Doing so will make our function look like this:</p>
<div class="prebox"><pre>
// <i>read homework grades from an input stream into a </i>vector&lt;double&gt;
istream&amp; read_hw(istream&amp; in, vector&lt;double&gt;&amp; hw) {
    // we must fill in this part</i>
	
    return in;
}
</pre></div>
<p>In &sect;4.1.2/54, we saw a program with a <code>const vector&lt;double&gt;&amp;</code> parameter; now we're 
dropping the <code>const</code>. A reference parameter without a <code>const</code> usually signals an intent to 
modify the object that is the function's argument. For example, when we execute</p>
<div class="prebox"><pre>
vector&lt;double&gt; homework; 

read_hw(cin, homework);
</pre></div>
<p>the fact that <code>read_hw</code>'s second parameter is a reference should lead us to expect that calling 
<code>read_hw</code> will change the value of <code>homework</code>.</p>
<p>Because we expect the function to modify its argument, we cannot call the function 
with just any expression. Instead, we must pass an <i><b>lvalue</b> </i>argument to a reference parameter. 
An lvalue is a value that denotes a nontemporary object. For example, a variable is 
an lvalue, as is a reference, or the result of calling a function that returns a reference. An 
expression that generates an arithmetic value, <code>such as sum / count</code>, is not an lvalue.</p>
<p>Both of the parameters to <code>read_hw</code> are references, because we expect the function to 
change the state of both arguments. We don't know the details of how <code>cin</code> works, but 
presumably the library defines it as a data structure that stores everything the library 
needs to know about the state of our input file. Reading input from the standard input 
file changes the state of the file, so it should logically change the value of <code>cin</code> as well.</p>
<p>Notice that <code>read_hw</code> returns <code>in</code>. Moreover, it does so as a reference. In effect, we are 
saying that we were given an object, which we are not going to copy, and we will return 
that same object, again without copying it. Returning the stream allows our caller to write</p>
<div class="prebox"><pre>
if (read_hw(cin, homework)){/*...*/} 
</pre></div>
<p>as an abbreviation for</p>
<div class="prebox"><pre>
read_hw(cin, homework);
if (cin) {/*...*/}
</pre></div>
<p>We can now think about how to read the homework grades. Obviously, we want to 
read as many grades as exist, so it would seem as if we could just write</p>
<div class="prebox"><pre>
// <i>first try not quite right</i>
double x;
while (in &gt;&gt; x)
    hw.push_back(x);
</pre></div>
<p>This strategy doesn't quite work, for two reasons. 
The first reason is that we haven't defined <code>hw</code>—our caller defined it for us. Because we 
didn't define it, we don't know what data might be there already. For all we know, our 
caller might be using our function to process homework for lots of students, in which case 
<code>hw</code> might contain the previous student's grades. We can solve this problem by calling 
<code>hw.clear()</code> before we begin our work.</p>
<p>The second reason that our strategy fails is that we don't quite know when to stop. We 
can keep reading grades until we can no longer do so, but at that point we have a problem. 
There are two reasons why we might no longer be able to read a grade: We might 
have reached end-of-file, or we might have encountered something that is not a grade.</p>
<p>In the first case, our caller will think that we have reached end-of-file. This thought 
will be true but misleading, because the end-of-file indication will have occurred only 
after we have successfully read all the data. Normally, an end-of-file indication means 
that an input attempt failed.</p>
<p>In the second case, when we have encountered something that isn't a grade, the library 
will mark the input stream as being in <i><b>failure state</b>, </i>which means that future input requests 
will fail, just as if we had reached end-of file. Therefore, our caller will think that something 
is wrong with the input data, when the only problem was that the last homework 
grade was followed by something that was not a homework grade.</p>
<p>In either case, then, we would like to pretend that we never saw whatever followed the 
last homework grade. Such pretense turns out to be easy: If we reached end-of-file, there 
was no additional input to read; if we encountered something that wasn't a grade, the 
library will have left it unread for the next input attempt. Therefore, all we must do is tell 
the library to disregard whatever condition caused the input attempt to fail, be it end-of-file 
or invalid input. We do so by calling <code>in.clear()</code> to reset the error state inside <code>in</code>, 
which tells the library that input can continue despite the failure.</p>
<p>There is one more detail to consider: Perhaps we have already run out of input, or 
encountered an error condition, before even trying to read the first homework grade. In 
that case, we must leave the input stream strictly alone, lest we inadvertently seduce our 
caller into trying to read nonexistent input at some point in the future.</p>
<p>Here is the complete read_hw function:</p>
<div class="prebox"><pre>
// <i>read homework grades from an input stream into a </i>vector&lt;double&gt;
istream&amp; read_hw(istream&amp; in, vector&lt;double&gt;&amp; hw)
{
    if (in) {
        // <i>get rid of previous contents </i>
        hw.clear() ;

        // <i>read homework grades </i>
        double x;
        while (in &gt;&gt; x)
            hw.push_back(x);
			
        // <i>clear the stream so that input will work for the next student</i>
        in.clear();
    }
    return in;
}
</pre></div>
<p>Note that the <code>clear</code> member behaves completely differently for <code>istream</code> objects than it 
does for <code>vector</code> objects. For <code>istream</code> objects, it resets any error indications so that input 
can continue; for <code>vector</code> objects, it discards any contents that the vector might have had, 
leaving us with an empty vector again.</p>
<h4>4.1.4  Three kinds of function parameters</h4>
<p>We would like to pause at this point for an important observation: We have defined three 
functions—<code>median, grade,</code> and <code>read_hw</code>—that operate on homework vectors. Each of 
these functions treats the corresponding parameter in a fundamentally different way from 
the others, and each treatment has a purpose.</p>
<p>The <code>median</code> function (&sect;4.1.1/53) has a parameter of type <code>vector&lt;double&gt;</code>. Therefore, 
calling that function causes the argument to be copied, even though that argument 
might be a huge <code>vector</code>. Despite the inefficiency, <code>vector&lt;double&gt;</code> is the right parameter 
type for <code>median</code>, because this type ensures that taking the median of a <code>vector</code> 
doesn't change the <code>vector</code>. The <code>median</code> function <code>sort</code>s its parameter. If it did not copy 
its argument, then calling <code>median(homework)</code> would change the value of <code>homework</code>.</p>
<p>The <code>grade</code> function that takes a homework <code>vector</code> (&sect;4.1.2/54) has a parameter of 
type <code>const vector&lt;double&gt;&amp;</code>. In this type, the <code>&amp;</code> asks the implementation not to copy 
the argument, and the <code>const</code> promises that the program will not change the parameter. 
Such parameters are an important technique for making programs more efficient. They 
are a good idea whenever the function will not change the parameter's value, and the 
parameter is of a type, such as <code>vector</code> or <code>string</code>, with values that might be time-consuming 
to copy. It is usually not worth the bother to use <code>const</code> references for parameters 
of simple built-in types, such as <code>int</code> or <code>double</code>. Such small objects are usually fast 
enough to copy that there's little, if any, overhead in passing them by value.</p>
<p>The <code>read_hw</code> function has a parameter of type <code>vector&lt;double&gt;&amp;</code>, without the 
<code>const</code>. Again, the <code>&amp;</code> asks the implementation to bind the parameter directly to the argument, 
thus avoiding having to copy the argument. But here, the reason to avoid the copy 
is that the function <i>intends </i>to change the argument's value.</p>
<p>Arguments that correspond to non<code>const</code> reference parameters must be lvalues—that 
is, they must be nontemporary objects. Arguments that are passed by value or bound to a 
<code>const</code> reference can be any value. For example, suppose we have a function that returns 
an empty <code>vector</code>:</p>
<div class="prebox"><pre>
vector&lt;double&gt; emptyvec()
{
    vector&lt;double&gt; v;    // <i>no elements</i>
    return v;
}
</pre></div>
<p>We could call this function, and use the result as an argument to our second <code>grade</code> function 
from &sect;4.1.2/54:</p>
<div class="prebox"><pre>
grade(midterm, final, emptyvec());
</pre></div>
<p>When run, the <code>grade</code> function would throw an exception immediately, because its argument 
is empty. However, calling <code>grade</code> this way would be syntactically legal.</p>
<p>When we call <code>read_hw</code>, both of its arguments must be lvalues, because both parameters 
are nonconst references. If we give <code>read_hw</code> a vector that is not an lvalue</p>
<div class="prebox"><pre>
read_hw(cin, emptyvec());   // <i>error: </i>emptyvec() <i>is not an lvalue</i>
</pre></div>
<p>the compiler will complain, because the unnamed <code>vector</code> that we create in the call to 
<code>emptyvec</code> will disappear as soon as <code>read_hw</code> returns. If we were allowed to make this 
call, the effect would be to store input in an object that we couldn't access!</p>
<h4>4.1.5 Using functions to calculate a student's grade</h4>
<p>The whole point of writing these functions is to use them in solving problems. For example, 
we can use them to reimplement our grading program from &sect;3.2.2/46:</p>
<div class="prebox"><pre>
// include <i>directives and using-declarations for library facilities</i>
// <i>code for </i>median <i>function from &sect;4.1.1/53</i>
//<i> code for </i>grade(double, double, double) <i>function from &sect;4.1/52</i>
// <i>code for </i>grade(double, double, const vector&lt;double&gt;&amp;) <i>function from &sect;4.1.2/54</i>
// <i>code for </i>read_hw(istream&amp;, vector&lt;double&gt;&amp;) <i>function from &sect;4.1.3/57</i>
int main()
{
    // <i>ask for and read the student's name</i>
    cout &lt;&lt; &quot;Please enter your first name: &quot;;
    string name;
    cin &gt;&gt; name;
    cout &lt;&lt; &quot;Hello, &quot; &lt;&lt; name &lt;&lt; &quot;!&quot; &lt;&lt; endl;

    // <i>ask for and read the midterm and final grades</i>
    cout &lt;&lt; &quot;Please enter your midterm and final exam grades: &quot;;
    double midterm, final;
    cin &gt;&gt; midterm &gt;&gt; final;

    // <i>ask for the homework grades</i>
    cout &lt;&lt; &quot;Enter all your homework grades, &quot;
            &quot;followed by end-of-file: &quot;;
    
    vector&lt;double&gt; homework;

    // <i>read the homework grades </i>
    read_hw(cin, homework);

    // <i>compute and generate the final grade, if possible </i>
    try  {
        double final_grade = grade(midterm, final, homework);
        streamsize prec = cout.precision();
        cout &lt;&lt; &quot;Your final grade is &quot; &lt;&lt; setprecision(3)
             &lt;&lt; final_grade &lt;&lt; setprecision(prec) &lt;&lt; endl; 
    } catch (domain_error) {
        cout &lt;&lt; endl &lt;&lt;<i> </i>&quot;You must enter your grades.  &quot; 
                        &quot;Please try again.&quot; &lt;&lt; endl;
        return 1;
    }
return 0;
}
</pre></div>
<p>The changes from the earlier version are in how we read the homework grades, and in 
how we calculate and write the result.</p>
<p>After asking for our user's homework grades, we call our <code>read_hw</code> function to read 
the data. The <code>while</code> statement inside <code>read_hw</code> repeatedly reads homework grades until 
we hit end-of-file or encounter a data value that is not valid as a double.</p>
<p>The most important new idea in this example is the <b>try </b>statement. It tries to execute 
the statements in the <code>{ } </code>that follow the <code>try</code> keyword. If a <code>domain_error</code> exception 
occurs anywhere in these statements, then it stops executing them and continues with the 
other set of <code>{ }</code> -enclosed statements. These statements are part of a <b>catch </b><i><b>clause</b>, </i>which 
begins with the word <code>catch</code>, and indicates the type of exception it is catching.</p>
<p>If the statements between <code>try</code> and <code>catch</code> complete without throwing an exception, 
then the program skips the <code>catch</code> clause entirely and continues with the next statement, 
which is <code>return 0</code>; in this example.</p>
<p>Whenever we write a <code>try</code> statement, we must think carefully about side effects and 
when they occur. We must assume that anything between <code>try</code> and <code>catch</code> might throw 
an exception. If it does so, then any computation that would have been executed after the 
exception is skipped. What is important to realize is that a computation that might have 
followed an exception in time does not necessarily follow it in the program text.</p>
<p>For example, suppose that we had written the output block more succinctly as</p>
<div class="prebox"><pre>
// <i>this example doesn't work</i>
try {
streamsize prec = cout.precision();
cout &lt;&lt; &quot;Your final grade is  &quot; &lt;&lt; setprecision(3)
     &lt;&lt; grade(midterm, final, homework) &lt;&lt; setprecision(prec);
} ...
</pre></div>
<p>The problem with this rewrite is that although the implementation is required to execute 
the <code>&lt;&lt;</code> operators from left to right, it is not required to evaluate the operands in any specific 
order. In particular, it might call grade after it writes <code>Your final grade is</code>. If 
<code>grade</code> throws an exception, then the output might contain that spurious phrase. Moreover, 
the first call to <code>setprecision</code> might set the output stream's precision to 3 without 
giving the second call the opportunity to reset the precision to its previous value. Alternatively, 
the implementation might call grade before writing any output; whether it does 
so depends entirely on the implementation.</p>
<p>This analysis explains why we separated the output block into two statements: The 
first statement ensures that the call to <code>grade</code> happens before any output is generated.</p>
<p>A good rule of thumb is to avoid more than one side effect in a single statement. 
Throwing an exception is a side effect, so a statement that might throw an exception 
should not cause any other side effects, particularly including input and output.</p>
<p>Of course, we cannot run our <code>main</code> function as written. We need the <code>include</code> directives 
and <code>using</code>-declarations for the library facilities that the program uses. We also use 
the names <code>read_hw</code> and the grade function that takes a <code>const vector&lt;double&gt;&amp;</code> 
third argument. The definitions of these functions, in turn, use the <code>median</code> function and 
the <code>grade</code> function that takes three doubles.</p>
<p>In order to execute this program, we have to ensure that those functions are defined 
(in the proper order) before our <code>main</code> function. Doing so yields an inconveniently large 
program. Rather than write it out directly here, we'll see in &sect;4.3/65 how we can partition 
such programs more succinctly into files. Before we do so, let's look at better ways to 
structure our data.</p>
<div class="prevnext">
<a href="17.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="19.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>