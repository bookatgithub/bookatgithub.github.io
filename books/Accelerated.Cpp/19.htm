<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>4.2 Organizing data</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="18.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="20.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>4.2 Organizing data</h3>
<p>Computing one student's grades may be useful to that student, but the computation is 
simple enough that a pocket calculator could handle it almost as well as our program. On 
the other hand, if we are teaching a course, we will want to compute grades for a class full 
of students. Let's revise our program to make it useful for an instructor.</p>
<p>Instead of interactively reporting one student's grade, we'll assume that we are given a 
file that contains many students' names and grades. Each name is followed by a midterm 
grade and a final exam grade, and then by one or more homework assignment grades. 
Such a file might look like</p>
<div class="prebox"><pre>
Smith 93 91 47 90 92 73 100 87
Carpenter 75 90 87 92 93 60 0 98
...
</pre></div>
<p>Our program should calculate each student's overall grade using medians: The median 
homework grade counts 40%; the final, 40%; and the midterm, 20%. For this input, the output would be</p>
<div class="prebox"><pre>
Carpenter             86.8
Smith                 90.4
</pre></div>
<p>In the output, we want the report to be organized alphabetically by student, and we want 
the final grades to line up vertically so that they are easier to read. These requirements 
imply that we'll need a place to store the records for all the students, so that we can alphabetize 
them. We'll also need to find the length of the longest name, so that we know how 
many spaces to put between each name and its corresponding grade.</p>
<p>Assuming that we have a place to store the data about a single student, we can use a 
<code>vector</code> to hold all the student data. Once the <code>vector</code> contains data for all the students, 
we can <code>sort</code> it, and then calculate and write each student's grades. We'll start by creating 
a data structure to hold the student data, and by writing some auxiliary functions to read 
and process those data. After we have developed these abstractions, we'll use them to 
solve the overall problem.</p>
<h4>4.2.1 Keeping all of a student's data together</h4>
<p>We know that we need to read each student's data and then arrange the students in 
alphabetical order. When we do so, we want to keep the students' names and grades 
together. Therefore, we need a way to store in one place all the information that pertains 
to one student. That place should be a data structure that holds the student's name, midterm 
and final exam grades, and all the homework grades.</p>
<p>In C++, we define such a data structure as follows:</p>
<div class="prebox"><pre>
struct Student_info {
    string name;
    double midterm, final;
    vector&lt;double&gt; homework;
};  // <i>note the semicolon it's required</i>
</pre></div>
<p>This <b>struct </b>definition says that <code>Student_info</code> is a type, which has four data members. 
Because <code>Student_info</code> is a type, we can define objects of that type, each of which will 
contain an instance of these four data members.</p>
<p>The first member, named <code>name</code>, is of type <code>string</code>; the second and third are <code>double</code>s 
named <code>midterm</code> and <code>final</code>; and the last is a <code>vector</code> of <code>double</code>s named <code>homework</code>.</p>
<p>Each object of <code>Student_info</code> type holds information about one student. Because 
<code>Student_info</code> is a type, we can use a <code>vector&lt;Student_info&gt;</code> object to hold information 
about an arbitrary number of students, just as we used a <code>vector&lt;double&gt;</code> object to 
hold an arbitrary number of homework grades.</p>
<h4>4.2.2 Managing the student records</h4>
<p>If we break our problem into manageable components, we'll see that there are three separable 
steps, which we can represent by separate functions: We need to read data into a 
<code>Student_info</code> object, we need to generate the overall grade for a <code>Student_info</code> 
object, and we need to be able to sort a <code>vector</code> of <code>Student_info</code> objects.</p>
<p>The function that reads one of our records is a lot like the <code>read_hw</code> function that we 
wrote in &sect;4.1.3/57. In fact, we can use that function to read the homework grades. In 
addition, we'll need to read the student's name and exam grades:</p>
<div class="prebox"><pre>
istream&amp; read(istream&amp; is, Student_info&amp; s)
{
    // <i>read and store the student's name and midterm and final exam grades</i>
    is &gt;&gt; s.name &gt;&gt; s.midterm &gt;&gt; s.final;

    read_hw(is, s.homework);     // <i>read and store all the student's homework grades </i>
    return  is;
}
</pre></div>
<p>There is no ambiguity in naming this function <code>read</code>, because the type of its second 
parameter will tell us what we're reading. Overloading will distinguish it from any other 
function called <code>read</code> that might read into another kind of structure. Like <code>read_hw</code>, this 
function takes two references: one to the <code>istream</code> from which to read, and another to the 
object in which to store what it reads. When we use the parameter s inside the function, 
we will affect the state of the argument that we were passed.</p>
<p>This function works by reading values into the <code>name, midterm</code>, and <code>final</code> members 
of the object <code>s</code>, and then calling <code>read_hw</code> to read the homework grades. We might reach 
end-of-file, or encounter input failure, at any point during this process. If so, the subsequent 
input attempts will do nothing, and when we return, <code>is</code> will be in the appropriate 
error state. Note that this behavior relies on the fact that the <code>read_hw</code> function 
(&sect;4.1.3/57) carefully leaves the input stream in an error state if it was already in such a 
state when we called <code>read_hw</code>.</p>
<p>The other function that we need computes a final grade for a <code>Student_info</code> object. 
We already solved most of this problem when we defined the <code>grade</code> function in 
&sect;4.1.2/54. We will continue that work just a little further by overloading the <code>grade</code> function 
with a version that determines the overall grade for a <code>Student_info</code> object:</p>
<div class="prebox"><pre>
double grade(const Student_info&amp; s)
{
    return grade(s.midterm, s.final, s.homework);
}
</pre></div>
<p>This function operates on an object of type <code>Student_info</code>, and returns a <code>double</code> that 
represents the overall grade. Note that the parameter has type <code>const Student_info&amp;</code>, 
rather than just plain <code>Student_info</code>, so that when we call it, we do not incur the overhead 
of copying an entire <code>Student_info</code> object.</p>
<p>Note also that this function does not protect against an exception being thrown by the 
<code>grade</code> function that it calls. The reason is that there isn't anything that our <code>grade</code> function 
can do to handle the exception beyond what the <code>grade</code> function that it calls has 
already done. Because our <code>grade</code> function doesn't <code>catch</code> the exception, any exception 
that occurs will be passed back to our caller, which presumably will be in a better position 
than we are to decide what to do about students who did no homework.</p>
<p>Our last task, before writing the whole program, is to decide how we will sort our 
<code>vector</code> of <code>Student_info</code> objects. In the <code>median</code> function (&sect;4.1.1/53), we sorted a 
<code>vector&lt;double&gt;</code> parameter, named <code>vec</code>, by using the library <code>sort</code> function:</p>
<div class="prebox"><pre>
sort(vec.begin(), vec.end());
</pre></div>
<p>However, assuming our data is in a <code>vector</code> called <code>students</code>, we can't just say</p>
<div class="prebox"><pre>
sort(students.begin(), students.end());    // <i>not quite right</i>
</pre></div>
<p>Why not? We'll have much more to say about <code>sort</code> and other library algorithms in 
Chapter 6, but it is worth thinking a bit abstractly about how the <code>sort</code> function might 
operate. In particular, how does <code>sort</code> know how to arrange the values in the <code>vector</code>?</p>
<p>The <code>sort</code> function must compare elements of the <code>vector</code> in order to put them in 
sequence. It does so by using the <code>&lt;</code> operator for the element type of whatever <code>vector</code> it 
is asked to sort. We can call <code>sort</code> on a <code>vector&lt;double&gt;</code>, because the <code>&lt;</code> operator will 
compare two <code>double</code>s and give us an appropriate result. What will happen when <code>sort</code> 
tries to compare the values of type <code>Student_info</code>? The <code>&lt;</code> operator does not have an 
obvious meaning when applied to <code>Student_info</code> objects. Indeed, when <code>sort</code> tries to 
compare two such objects, the compiler will complain.</p>
<p>Fortunately, the <code>sort</code> function takes an optional third argument that is a <i><b>predicate</b></i>. A 
predicate is a function that yields a truth value, typically of type <code>bool</code>. If this third argument 
is present, the <code>sort</code> function will use it to compare elements instead of using the <code>&lt;</code> 
operator. Therefore, we need to define a function that takes two <code>Student_info</code>s, and 
that says whether the first is less than the second. Because we want to order the students 
alphabetically by name, we'll write our comparison function to compare only the names:</p>
<div class="prebox"><pre>
bool compare(const Student_info&amp; x, const Student_info&amp; y)
{
    return x.name &lt; y.name;
}
</pre></div>
<p>This function simply delegates the work of comparing <code>Student_info</code>s to the <code>string</code> 
class, which provides a <code>&lt;</code> operator for comparing <code>string</code>s. That operator compares 
<code>string</code>s by applying normal dictionary ordering. That is, it considers the left-hand 
operand to be less than the right-hand operand if it is alphabetically ahead of the right-hand 
operand. This behavior is exactly what we need.</p>
<p>Having defined <code>compare</code>, we can sort the <code>vector</code> by passing the <code>compare</code> function 
as a third argument to the <code>sort</code> library function:</p>
<div class="prebox"><pre>
sort(students.begin(), students.end(), compare);
</pre></div>
<p>When <code>sort</code> compares elements, it will call our <code>compare</code> function to do so.</p>
<h4>4.2.3 Generating the report</h4>
<p>Now that we have functions to process student records, we can generate our report:</p>
<div class="prebox"><pre>
int main()
{
    vector&lt;Student_info&gt; students;
    Student_info record;
    string::size_type maxlen = 0;

    // <i>read and store all the records, and find the length of the longest name</i>
    while (read(cin, record)) {
        maxlen = max(maxlen, record.name.size());
        students.push_back(record);
    }

    // <i>alphabetize the records</i>
    sort(students.begin(), students.end(), compare);

    for (vector&lt;Student_info&gt;::size_type i = 0;
         i != students.size(); ++i) {

        // <i>write the name, padded on the right to maxlen + 1 characters</i>
        cout << students[i].name
             << string(maxlen + 1 - students[i].name.size(), ' ');

        // <i>compute and write the grade</i>
        try {
            double final_grade = grade(students[i]);
            streamsize prec = cout.precision();
            cout << setprecision(3) << final_grade
                 << setprecision(prec);
        } catch (domain_error e) {
            cout << e.what();
        }

        cout << endl;
    }

    return 0;
}
</pre></div>
<p>We have already seen most of this code, but a couple of points are new.</p>
<p>The first novelty is the call to the library function <code>max</code>, which is defined in the header 
<code>&lt;algorithm&gt;</code>. On the surface, <code>max</code>'s behavior is obvious. However, one aspect of its 
behavior is not obvious: Its arguments must both have the same type, for complicated reasons 
that we shall explore in &sect;8.1.3/142. This requirement makes it essential for us to 
define <code>maxlen</code> to be a variable of type <code>string::size_type</code>; it won't do merely to 
define it as an <code>int</code>.</p>
<p>The second novelty is the expression</p>
<div class="prebox"><pre>
string(maxlen + 1 - students[i].name.size(), ' ')
</pre></div>
<p>This expression constructs a nameless object (&sect;1.1/10) of type <code>string</code>. The object contains 
<code>maxlen + 1 - students[i].name.size()</code> characters, all of which are blank. 
This expression is similar to the definition of <code>spaces</code> in &sect;1.2/13, but it omits the name of 
the variable. This omission effectively turns the definition into an expression. Writing 
<code>students[i].name</code> followed by this expression yields output that contains the characters 
in <code>students[i].name</code>, padded on the right to exactly <code>maxlen + 1</code> characters.</p>
<p>The <code>for</code> statement uses the index i to walk through <code>students</code> one element at a time. 
We get the name to write by indexing into <code>students</code> to get the current <code>Student_info</code> 
element. We then write the <code>name</code> member from that object, using an appropriately constructed 
<code>string</code> of blanks to pad the output.</p>
<p>Next we write the final grade for each student. If the student didn't do any homework, 
the grade computation will throw an exception. In that case, we <code>catch</code> the exception, 
and instead of writing a numeric grade, we write the message that was thrown as 
part of the exception object. Every one of the standard-library exceptions, such as 
<code>domain_error</code>, remembers the (optional) argument used to describe the problem that 
caused the exception to be thrown. Each of these types makes a copy of the contents of 
that argument available through a member function named <code>what</code>. The <code>catch</code> in this program 
gives a name to the exception object that it gets from <code>grade</code> (&sect;4.1.2/54), so that it 
can write as output the message that it obtains from <code>what()</code>. In this case, that message 
will tell the user that the <code>student has done no homework</code>. If there is no exception, we 
use the <code>setprecision</code> manipulator to specify that we'll write three significant digits, 
and then write the result from <code>grade</code>.</p>
<div class="prevnext">
<a href="18.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="20.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>