<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>0.2 #include</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="1.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="3.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>0.2 #include</h3>
<p>In C++, many fundamental facilities, such as input-output, are part of the <i><b>standard library</b></i>,
 rather than being part of the <i><b>core language</b></i>. This distinction is important because the core
 language is always available to all C++ programs, but you must explicitly ask for the parts
 of the standard library that you wish to use.</p>
<p>&nbsp;&nbsp;Programs ask for standard-library facilities by using <b>#include</b> <i><b>directives</b></i>. Such directives
 normally appear at the beginning of a program. The only part of the standard
 library that our program uses is input-output, which we request by writing</p>
<div class="prebox">
<pre>
#include &lt;iostream&gt;
</pre></div>
<p>The name <code>iostream</code> suggests support for sequential, or stream, input-output, rather
 than random-access or graphical input-output. Because the name <code>iostream</code> appears in
 an <code>#include</code> directive and it is enclosed in <i><b>angle brackets</b></i> (<code>&lt;</code> and <code>&gt;</code>), it refers to a part of
 the C++ library called a <i><b>standard header</b></i>.</p>
<p>The C++ standard does not tell us exactly what a standard header is, but it does define 
each header's name and behavior. Including a standard header makes the associated 
library facilities available to the program, but exactly how the implementation does so 
is its concern, not ours.</p>
<a name="main">
<h3>0.3 The main function</h3>
</a>
<p>A <i><b>function</b></i> is a piece of program that has a name, and that another part of the program can 
<i><b>call</b></i>, or cause to run. Every C++ program must contain a function named <code>main</code>. When we 
ask the C++ implementation to run a program, it does so by calling this function.</p>
<p>The <code>main</code> function is required to yield an integer as its result, the purpose of which is 
to tell the implementation whether the program ran successfully. A zero value 
indicates success; any other value means there was a problem. Accordingly, we begin by writing</p>
<div class="prebox">
<pre>
int main()
</pre></div>
<p>to say that we are defining a function named <code>main</code> that returns a value of type <code>int</code>. 
Here, <code>int</code> is the name that the core language uses to describe integers. The parentheses 
after <code>main</code> enclose the parameters that our function receives from the implementation. 
In this particular example, there are no parameters, so there is nothing between the parentheses. 
We'll see how to use main's parameters in &sect;10.4/179.</p>
<a name="curly">
<h3>0.4 Curly braces</h3>
</a>
<p>We continue our definition of the main function by following the parentheses with a 
sequence of <i><b>statements</b></i> enclosed in <i><b>curly braces</b></i> (often simply called braces):</p>
<div class="prebox">
<pre>
int main()
{                // <i>left brace</i>
                 // <i>the statements go here</i>
}                // <i>right brace</i>
</pre></div>
<p>In C++, braces tell the implementation to treat whatever appears between them as a unit. 
In this example, the left brace marks the beginning of the statements in our <code>main</code> function, 
and the right brace marks their end. In other words, the braces indicate that all the statements 
between them are part of the same function.</p>
<p>When there are two or more statements within braces, as there are in this function, the 
implementation executes them in the order in which they appear.</p>
<div class="prevnext">
<a href="1.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="3.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>