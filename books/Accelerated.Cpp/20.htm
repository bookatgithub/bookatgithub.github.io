<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>4.3 Putting it all together</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="19.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="21.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>4.3 Putting it all together</h3>
<p>So far we have defined a number of abstractions (functions and a data structure) that are 
useful in solving our various grading problems. The only way we have seen of using 
these abstractions is to put all their definitions in a single file and compile that file. Obviously, 
this approach becomes complicated very quickly. To reduce that complexity, C++, 
like many languages, supports the notion of <i><b>separate compilation</b>, </i>which allows us to put 
our program into separate files and to compile each of these files independently.</p>
<p>We'll start by understanding how to package the <code>median</code> function so that others can 
use it. We begin by putting the definition of the <code>median</code> function into a file by itself so 
that we can compile it separately. That file must include declarations for all the names 
that the <code>median</code> function uses. From the library, <code>median</code> uses the <code>vector</code> type, the <code>sort</code> 
function, and the <code>domain_error</code> exception, so we will have to include the appropriate 
headers for these facilities:</p>
<div class="prebox"><pre>
// source file for the median function
#include &lt;algorithm>&gt;   // <i>to get the declaration of</i> sort
#include &lt;stdexcept&gt;    // <i>to get the declaration of</i> domain_error
#include &lt;vector&gt;       // <i>to get the declaration of</i> vector

using std::domain_error;   using std::sort;   using std::vector;

// <i>compute the median of a</i> vector&lt;double&gt;
// note that calling this function copies the entire argument vector
double median(vector&lt;double&gt; vec)
{
    // <i>function body as defined in &sect;4.1.1/53 </i> 
}
</pre></div>
<p>As with any file, we must give our source file a name. The C++ standard does not tell us 
how to name source files, but in general, a source file's name should suggest its contents. 
Moreover, most implementations constrain source-file names, usually requiring the last 
few characters of the name to have a specific form. Implementations use these file suffixes 
to determine whether a file is a C++ source file. Most implementations require the names 
of C++ source files to end in <code>.cpp, .C,</code> or <code>.c</code>, so we might put the <code>median</code> function in a 
file named <code>median.cpp, median.C</code>, or <code>median.c</code>, depending on the implementation.</p>
<p>The next step is to make the <code>median</code> function available to other users. Analogous with 
the standard library, which puts the names it defines into headers, we can write our own 
<i><b>header file</b> </i>that will allow users to access names that we define. For example, we could 
note in a file named <code>median.h</code> that our <code>median</code> function exists. If we did so, users could 
use it by writing:</p>
<div class="prebox"><pre>
// <i>a much better way to use </i>median
#include  &quot;median.h&quot;
#include &lt;vector&gt;

int main(){/*...*/}
</pre></div>
<p>When we use a <code>#include</code> directive with double quotes rather than angle brackets, surrounding 
the header name, we are saying that we want the compiler to copy the 
entire contents of the header file that corresponds to that name into our program in place of the 
<code>#include</code> directive. Each implementation decides where to look for header files, and 
what the relationship is between the string between the quotes and the name of the file. 
We shall talk about &quot;the header file <code>median.h</code>&quot; as shorthand for &quot;the file that the 
implementation decides is the one that corresponds to the name <code>median.h</code>.&quot;</p>
<p>It is worth noting that although we refer to our own headers as header files, we refer to 
the implementation-supplied headers as standard headers rather than standard header 
files. The reason is that header files are genuine files in every C++ implementation, but 
system headers need not be implemented as files. Even though the <code>#include</code> directive is 
used to access both header files and system headers, there is no requirement that they be 
implemented in the same way.</p>
<p>Now that we know we must supply a header file, the obvious question is what should 
be in it. The simple answer is that we must write a <i><b>declaration</b> </i>for the <code>median</code> function, 
which we do by replacing the function body with a semicolon. We can also eliminate the 
names of the parameters, because they are irrelevant without the function body:</p>
<div class="prebox"><pre>
double median(vector&lt;double&gt;);
</pre></div>
<p>Our <code>median.h</code> header cannot contain just this declaration; we must also include any 
names that the declaration itself uses. This declaration uses <code>vector</code>, so we must make 
sure that that name is available before the compiler sees our declaration:</p>
<div class="prebox"><pre>
//<i> median.h</i>
#include &lt;vector&gt;
double median(std::vector&lt;double&gt;);
</pre></div>
<p>We include the <code>vector</code> header so that we can use the name <code>std::vector</code> in declaring 
the argument to <code>median</code>. The reason that we mention <code>std::vector </code>explicitly, rather 
than writing a <code>using</code>-declaration, is more subtle.</p>
<p>In general, header files should declare only the names that are necessary. By restricting 
the names contained in a header file, we can preserve maximum flexibility for our 
users. For example, we use the qualified name for <code>std::vector</code> because we have no 
way of knowing how the user of our <code>median</code> function wants to refer to <code>std::vector</code>. 
Users of our code might not want a <code>using</code>-declaration for <code>vector</code>. If we write one 
in our header, then all programs that <code>include</code> our header get a using <code>std::vector</code> declaration, 
regardless of whether they wanted it. Header files should use fully qualified 
names rather than <code>using</code>-declarations.</p>
<p>There is one last detail to cover: Header files should ensure that it is safe to include the 
file more than once as part of compiling the program. As it happens, our header file is 
already safe as it stands, because it contains only declarations. However, we consider it 
good practice to cater to multiple inclusion in every header file, not just the ones that need 
it. We do so by adding some preprocessor magic to the file:</p>
<div class="prebox"><pre>
#ifndef GUARD_median_h
#define GUARD_median_h

// median.h—<i>final version</i>
#include &lt;vector&gt;
double median(std::vector&lt;double&gt;);

#endif
</pre></div>
<p>The <b>#ifndef </b><i><b>directive</b> </i>checks whether <code>GUARD_median_h</code> is defined. This is the name of 
a <i><b>preprocessor variable</b>, </i>which is one of a variety of ways of controlling how a program is 
compiled. A full discussion of the preprocessor is beyond the scope of this book.</p>
<p>In this context, the <code>#ifndef</code> directive asks the preprocessor to process everything 
between it and the next matching <code>#endif</code> if the given name is <i>not </i>defined. We must 
choose a name that is unique in the entire program, so we make one from the name of our 
file and a string, such as <code>GUARD_</code>, that we hope will not be duplicated elsewhere.</p>
<p>The first time <code>median.h</code> is included in a program, <code>GUARD_median_h</code> will be undefined, 
so the preprocessor will look at the rest of the file. The first thing it does is to define 
<code>GUARD_median_h</code>, so that subsequent attempts to include <code>median.h</code> will have no effect.</p>
<p>The only other subtlety is that it is a good idea for the <code>#ifndef</code> to be the very first line 
of the file, without even a comment before it:</p>
<div class="prebox"><pre>
#ifndef <i>variable </i>
...
#endif
</pre></div>
<p>The reason is that some C++ implementations detect files that have this form and, if the 
<i>variable </i>is defined, do not even bother to read the file the second time around.</p>
<div class="prevnext">
<a href="19.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="21.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>