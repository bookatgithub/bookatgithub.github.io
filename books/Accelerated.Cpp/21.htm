<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>4.4 Partitioning the grading program</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="20.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="22.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>4.4 Partitioning the grading program</h3>
<p>Now that we know how to arrange to compile the <code>median</code> function separately, the next 
step is to package our <code>Student_info</code> structure and associated functions:</p>
<div class="prebox"><pre>
#ifndef GUARD_Student_info
#define GUARD_Student_info

// Student_info.h header file
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

struct Student_info {
	std::string name;
	double midterm, final;
	std::vector&lt;double&gt; homework;
};

bool compare(const Student_info&, const Student_info&);
std::istream& read(std::istream&, Student_info&);
std::istream& read_hw(std::istream&, std::vector&lt;double&gt;&);
#endif
</pre></div>
<p>Notice that we explicitly use <code>std::</code> to qualify names from the standard library, rather 
than including <code>using</code>-declarations, and that <code>Student_info.h</code> declares the <code>compare, read</code>, 
and <code>read_hw</code> functions, which are closely associated with the <code>Student_info</code> 
structure. We will use these functions only if we are also using this structure, so it makes 
sense to package these functions with the structure definition.</p>
<p>The functions should be defined in a source file that will look something like:</p>
<div class="prebox"><pre>
// <i>source file for</i> Student_info-<i>related functions</i>
#include "Student_info.h"

using std::istream;  using std::vector;

bool compare(const Student_info& x, const Student_info& y)
{
    return x.name &lt; y.name;
}

istream& read(istream& is, Student_info& s)
{
    // <i>read and store the student's name and midterm and final exam grades</i>
    is >> s.name >> s.midterm >> s.final;

    read_hw(is, s.homework);  // <i>read and store all the student's homework grades</i>
    return is;
}

// read homework grades from an input stream into a `vector<double>'
istream& read_hw(istream& in, vector&lt;double&gt;& hw)
{
    if (in) {
        // <i>get rid of previous contents</i>
        hw.clear();

        // read homework grades
        double x;
        while (in >> x)
            hw.push_back(x);

        // <i>clear the stream so that input will work for the next student</i>
        in.clear();
    }
    return in;
}
</pre></div>
<p>Note that because we include the <code>Student_info.h</code> file, this file contains both declarations 
and definitions of our functions. This redundancy is harmless, and is actually a 
good idea. It gives the compiler the opportunity to check for consistency between the 
declarations and the definitions. These checks are not exhaustive in most implementations, 
because complete checking requires seeing the entire program, but they are useful 
enough to make it worthwhile for source files to include the corresponding header files.</p>
<p>The checking and its incompleteness stem from a common source: The language 
requires function declarations and definitions to match exactly in their result type, and in 
the number and types of parameters. This rule explains the implementation's ability to 
check—but why the incompleteness? The reason is that if a declaration and definition differ 
enough, the implementation can only assume that they describe two different versions 
of an overloaded function, and that the missing definition will appear elsewhere. For 
example, suppose we defined median as in &sect;4.1.1/53, and we declared it incorrectly as</p>
<div class="prebox"><pre>
int median (std::vector&lt;double&gt;);   // <i>return type should be </i>double
</pre></div>
<p>If the compiler sees this declaration when it compiles the definition, it will complain, 
because it knows that the return type of <code>median(vector&lt;double&gt;)</code> cannot simultaneously 
be <code>double</code> and <code>int</code>. Suppose, however, that instead we had declared</p>
<div class="prebox"><pre>
double median (double);        // <i>argument type should be </i>vector&lt;double&gt;
</pre></div>
<p>Now the compiler can't complain, because <code>median(double)</code> could be defined elsewhere. 
If we call the function, then the implementation must eventually look for its definition. 
If it doesn't find the definition, it will complain at that point.</p>
<p>Note, too, that in the source file, there is no problem with <code>using</code>-declarations. Unlike 
a header file, a source file has no effect on the programs that use these functions. Hence 
reliance on <code>using</code>-declarations in a source file is purely a local decision.</p>
<p>What's left is to write a header file to declare the various overloaded <code>grade</code> functions:</p>
<div class="prebox"><pre>
#ifndef GUARD_grade_h
#define GUARD_grade_h

//<i> grade.h</i>
#include &lt;vector&gt;
#include "Student_info.h"

double grade(double, double, double);
double grade(double, double, const std::vector&lt;double&gt;&);
double grade(const Student_info&);

#endif
</pre></div>
<p>Notice how bringing the declarations of these overloaded functions together makes it easier 
to see all the alternatives. We will define all three functions in a single file, because 
they are closely related. Again, the name of the file will depend on the implementation, 
but will probably be <code>grade.cpp, grade.C</code>, or <code>grade.c:</code></p>
<div class="prebox"><pre>
#include &lt;stdexcept&gt;
#include &lt;vector&gt;
#include "grade.h"
#include "median.h"
#include "Student_info.h"

using std::domain_error;  using std::vector;

// <i>definitions for the </i>grade <i>functions from &sect;4.1/52, &sect;4.1.2/54 and &sect;4.2.2/63</i>
</pre></div>
<div class="prevnext">
<a href="20.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="22.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>