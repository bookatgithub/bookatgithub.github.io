<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>4.5 The revised grading program</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="21.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="23.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>4.5 The revised grading program</h3>
<p>Finally we can write our complete program:</p>
<div class="prebox"><pre>
#include &lt;algorithm&gt;
#include &lt;iomanip&gt;
#include &lt;ios&gt;
#include &lt;iostream&gt;
#include &lt;stdexcept&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include "grade.h"
#include "Student_info.h"

using std::cin;                     using std::setprecision;
using std::cout;                    using std::sort;
using std::domain_error;            using std::streamsize;
using std::endl;                    using std::string;
using std::max;                     using std::vector;

int main()
{
    vector&lt;Student_info&gt; students;
    Student_info record;
    string::size_type maxlen = 0;       // <i>the length of the longest name</i>

    // <i>read and store all the students data.</i>
    // <i>Invariant:  students contains all the student records read so far</i>
    //   <i>maxlen contains the length of the longest name in students</i>
    while (read(cin, record)) {
        // find length of longest name
        maxlen = max(maxlen, record.name.size());
        students.push_back(record);
    }

    // <i>alphabetize the student records</i>
    sort(students.begin(), students.end(), compare);

    // <i>write the names and grades</i>
    for (vector&lt;Student_info&gt;::size_type i = 0;
         i != students.size(); ++i) {

        // <i>write the name, padded on the right to maxlen + 1 characters</i>
        cout << students[i].name
             << string(maxlen + 1 - students[i].name.size(), ' ');

        // <i>compute and write the grade</i>
        try {
            double final_grade = grade(students[i]);
            streamsize prec = cout.precision();
            cout << setprecision(3) << final_grade
                 << setprecision(prec);
        } catch (domain_error e) {
            cout << e.what();
        }
        cout << endl;
    }
    return 0;
}
</pre></div>
<p>This program should be fairly straightforward to understand. As usual, we start with the 
necessary <code>include</code>s and <code>using</code>-declarations. Of course, we need mention only those 
headers and declarations that we use in this source file. In this program, we have our 
own headers to include as well as library headers. Those headers make available the definition 
of the <code>Student_info</code> type, and declarations for the functions that we use to 
manipulate <code>Student_info</code> objects and generate grades. The <code>main</code> function itself is the 
same as the one that we presented in &sect;4.2.3/64.</p>
<div class="prevnext">
<a href="21.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="23.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>