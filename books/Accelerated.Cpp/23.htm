<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>4.6 Details</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="22.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="24.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>4.6 Details</h3>
<p><b>Program structure:</b></p>
<p><code>#include <i>&lt;system-header&gt;</i></code></p>
<div class="details">
Angle brackets, <code>&lt; &gt;</code>, enclose system headers. System headers may or may not be 
implemented as files.
</div>
<p><code>#include <i>&quot;user-defined-header-file-name&quot;</i></code></p>
<div class="details">
User-defined header files are <code>include</code>d by enclosing the name in quotes. Typically, 
user-defined headers have a suffix of <code>.h</code>.
</div>
<p>Header files should be guarded against multiple inclusion by wrapping the file in an 
<code>#ifndef GUARD</code>_<i>header_name </i>directive. Headers should avoid declaring names 
that they do not use. In particular, they should not include <code>using</code>-declarations, but instead 
should prefix standard-library names with <code>std::</code> explicitly.</p>
<p><b>Types:</b></p>
<p><code>T&amp;</code></p>
<div class="details">
Denotes a reference to the type <code>T</code>. Most commonly used to pass a parameter 
that a function may change. Arguments to such parameters must be lvalues.
</div>
<p><code>const T&amp;</code></p>
<div class="details">
Denotes a reference to the type <code>T</code> that may not be used to change the value 
to which the reference is bound. Usually used to avoid cost of copying a 
parameter to a function.
</div>
<p><b>Structures:</b> A structure is a type that contains zero or more members. Each object of the 
structure type contains its own instance of each of its members. Every structure must have a corresponding definition:</p>
<div class="prebox"><pre>
struct <i>type-name </i>{
       <i>type-specifier member-name;</i>
       ...
};    // <i>note the semicolon</i>
</pre></div>
<p>Like all definitions, a structure definition may appear only once per source file, so it 
should normally appear in a properly guarded header file.</p>
<p><b>Functions: </b>A function must be declared in every source file that uses it, and defined only 
once. The declarations and definitions have similar forms:</p>
<div class="prebox"><pre>
<i>ret-typefunction-name (parm-decls) </i>                  // <i>function declaration</i>
<i>[</i>inline<i>] ret-typefunction-name (parm-decls) </i> {       // function definition 
        //<i> function body goes here</i>
}
</pre></div>
<p></p>
<p></p>
<p>Here, <i><code>ret-type</code> </i>is the type that the function returns, <i><code>parm-decls</code> </i>is a comma-separated list of 
the types for the parameters of the function. Functions must be declared before they are 
called. Each argument's type must be compatible with the corresponding parameter. A 
different syntax is necessary to declare or define functions with sufficiently complicated 
return types; see &sect;A.1.2/297 for the full story.</p>
<p>Function names may be overloaded: The same <i><code>function-name</code> </i>may define multiple functions 
so long as the functions differ in the number or types of the parameters. The implementation 
can distinguish between a reference and a <code>const</code> reference to the same type.</p>
<p>We can optionally qualify a function definition with <b>inline, </b>which asks the compiler 
to expand calls to the function inline when appropriate—that is, to avoid function-call 
overhead by replacing each call to the function by a copy of the function body, modified 
as necessary. To do so, the compiler needs to be able to see the function definition, so 
<code>inline</code>s are usually defined in header files, rather than in source files.</p>
<p><b>Exception handling:</b></p>
<p><code>try {  // <i>code </i></code></p>
<div class="details">
Initiates a block that might <code>throw</code> an exception.
</div>
<p><code>} catch(t) { /<i>* code* /  </i>}</code></p>
<div class="details">
Concludes the <code>try</code> block and handles exceptions that match the type <code>t</code>. 
The code following the <code>catch</code> performs whatever action is appropriate 
to handle the exception reported in <code>t</code>.
</div>
<p><code>throw e;</code></p>
<div class="details">
Terminates the current function; throws the value e back to the caller.
</div>
<p><b>Exception classes: </b>The library defines several exception classes whose names suggest the 
kinds of problems they might be used to report:</p>
<div class="prebox">
<pre>
logic_error     domain_error      invalid_argument
length_error    out_of_range      runtime_error
range_error     overflow_error    underflow_error
</pre>
</div>
<p><code>e.what()</code></p>
<div class="details">
Returns a value that reports on what happened to cause the error.
</div>
<p><b>Library facilities:</b></p>
<p><code>s1 &lt; s2</code></p>
<div class="details">
Compares <code>string</code>s <code>s1</code> and <code>s2</code> by applying dictionary ordering.
</div>
<p><code>s.width(n)</code></p>
<div class="details">
Sets the width of stream <code>s</code> to <code>n</code> for the next output operation (or leaves it 
unchanged if <code>n</code> is omitted). The output is padded on the left to the given 
width. Returns the previous width. The standard output operators use 
the existing width value and then call <code>width(0)</code> to reset the width.
</div>
<p><code>setw(n)</code></p>
<div class="details">
Returns a value of type <code>streamsize</code> (&sect;3.1/36) that, when written on an 
output stream <code>s</code>, has the effect of calling <code>s.width(n)</code>.
</div>
<h4>Exercises</h4>
<p><b>4-0.</b> Compile, execute, and test the programs in this chapter.</p>
<p><b>4-1.</b> We noted in &sect;4.2.3/65 that it is essential that the argument types in a call to <code>max</code> match 
exactly. Will the following code work? If there is a problem, how would you fix it?</p>
<div class="prebox"><pre>
int maxlen;
Student_info s;
max(s.name.size(), maxlen);
</pre></div>
<p><b>4-2.</b> Write a program to calculate the squares of <code>int</code> values up to 100. The program should write 
two columns: The first lists the value; the second contains the square of that value. Use 
<code>setw</code> (described above) to manage the output so that the values line up in columns.</p>
<p><b>4-3.</b> What happens if we rewrite the previous program to allow values up to but not including 
1000 but neglect to change the arguments to <code>setw</code>? Rewrite the program to be more robust 
in the face of changes that allow <code>i</code> to grow without adjusting the <code>setw</code> arguments.</p>
<p><b>4-4.</b> Now change your squares program to use <code>double</code> values instead of <code>int</code>s. Use manipulators 
to manage the output so that the values line up in columns.</p>
<p><b>4-5.</b> Write a function that reads words from an input stream and stores them in a <code>vector</code>. Use 
that function both to write programs that count the number of words in the input, and to 
count how many times each word occurred.</p>
<p><b>4-6.</b> Rewrite the <code>Student_info</code> structure to calculate the grades immediately and store only the 
final grade.</p>
<p><b>4-7.</b> Write a program to calculate the average of the numbers stored in a <code>vector&lt;double&gt;</code>.</p>
<p><b>4-8.</b> If the following code is legal, what can we infer about the return type of <code>f</code>?</p>
<div class="prebox"><pre>
double d = f()[n];
</pre></div>
<div class="prevnext">
<a href="22.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="24.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>