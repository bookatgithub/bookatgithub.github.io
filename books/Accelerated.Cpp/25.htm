<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>5.2 Iterators</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="24.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="26.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>5.2 Iterators</h3>
<p>To make our discussion more concrete, let us look at the container operations that 
<code>extract_fails</code> actually uses.</p>
<p>The first such operation is using the index <code>i</code> to fetch values from the <code>Student_info</code> 
structure. For example, <code>fgrade(students[i])</code> fetches the <code>i</code>th element of the <code>vector</code> 
named <code>students</code>, and passes that element to the <code>fgrade</code> function. We know that we 
access the elements of <code>students</code> sequentially, because we access those elements only by 
using <code>i</code> as an index, and the only operations we ever perform on <code>i</code> are to read it in order 
to compare it with the size of the <code>vector</code>, and to increment it:</p>
<div class="prebox"><pre>
while (i != students.size()) {
    // <i>work gets done here; but doesn't change the value of </i>i
    i++;
}
</pre></div>
<p>From this usage, it is clear that we use <code>i</code> only sequentially.</p>
<p>Unfortunately, even though we know this fact, the library has no way to know it. By 
using iterators instead of indices, we can make that knowledge available to the library. 
An <i><b>iterator</b> </i>is a value that</p>
<ul>
<li>Identifies a container and an element in the container</li>
<li>Lets us examine the value stored in that element</li>
<li>Provides operations for moving between elements in the container</li>
<li>Restricts the available operations in ways that correspond to what the container can handle efficiently</li>
</ul>
<p>Because iterators behave analogously to indices, we can often rewrite programs that use 
indices to make them use iterators instead. As an example, suppose that <code>students</code> is a 
<code>vector&lt;Student_info&gt;</code> that contains records for some students. Let's look at how we 
could write those students' names onto <code>cout</code>. One way uses an index for the iteration:</p>
<div class="prebox"><pre>
for (vector&lt;Student_info&gt;::size_type i = 0;
     i != students.size(); ++i) 
    cout &lt;&lt; students[i].name &lt;&lt; endl;
</pre></div>
<p>Another way uses iterators:</p>
<div class="prebox"><pre>
for (vector&lt;Student_info&gt;::const_iterator iter = students.begin();
     iter != students.end(); ++iter) {
    cout &lt;&lt; (*iter).name &lt;&lt; endl;
}
</pre></div>
<p>There's quite a lot going on in this rewrite, so let's pick it apart a bit at a time.</p>
<h4>5.2.1 Iterator types</h4>
<p>Every standard container, such as <code>vector</code>, defines two associated iterator types:</p>
<div class="prebox"><pre>
<i>container-type:</i>:const_iterator <i>
container-type::</i>iterator
</pre></div>
<p>where <i><code>container-type</code> </i>is the container type, such as <code>vector&lt;Student_info&gt;</code>, that 
includes the type of the container elements. When we want to use an <code>iterator</code> to change 
the values stored in the container, we use the iterator type. If we need only read 
access, then we use the <code>const_iterator</code> type.</p>
<p>Abstraction is selective ignorance. The details of what particular type an iterator has 
may be complicated, but we don't need to understand these details. All we need to know 
is how to refer to the iterator type, and what operations the iterator allows. We need to 
know the type so that we can create variables that are iterators. We don't need to know 
anything about that type's implementation. For example, our definition of <code>iter</code></p>
<div class="prebox"><pre>
vector&lt;Student_info&gt;::const_iterator iter = students.begin();
</pre></div>
<p>says that <code>iter</code> is of type <code>vector&lt;Student_info&gt;::const_iterator</code>. We don't 
know the <i>actual </i>type of <code>iter</code>—that's an implementation detail of <code>vector</code>—nor do we 
need to know. All that we need to know is that <code>vector&lt;student_info&gt;</code> has a member 
named <code>const_iterator</code> that defines a type that we can use to obtain read-only access 
to elements of the <code>vector</code>.</p>
<p>The other thing we need to know is that there is an automatic conversion from type 
<code>iterator</code> to type <code>const_iterator</code>. As we're about to learn, <code>students.begin()</code> 
returns an <code>iterator</code>, but we said that <code>iter</code> is a <code>const_iterator</code>. In order to initialize 
<code>iter</code> with the value of <code>students.begin()</code>, the implementation converts the <code>iterator</code> 
value into the corresponding <code>const_iterator</code>. This conversion is one way, meaning 
that we can convert an <code>iterator</code> to a <code>const_iterator</code> but not vice versa.</p>
<h4>5.2.2 Iterator operations</h4>
<p>Having defined <code>iter</code>, we set it to the value of <code>students.begin()</code>. We have used the 
<code>begin</code> and <code>end</code> functions before, so we should know what these functions do: They 
return a value that denotes the beginning or (one past) the end of a container. We'll 
explain our repeated emphasis on &quot;(one past)&quot; in &sect;8.2.7/149. What's useful to know now 
is that <code>begin</code> and <code>end</code> functions return a value of the iterator type for the container. 
Thus, begin returns a <code>vector&lt;Student_info&gt;::iterator</code> positioned at the initial 
element of the container, so <code>iter</code> initially refers to the first element in <code>students</code>. 
The condition in the <code>for</code> statement,</p>
<div class="prebox"><pre>
iter != students.end()
</pre></div>
<p>checks whether we've reached the end of the container. Recall that <code>end</code> returns a value 
that denotes (one past) the end of the container. As with <code>begin</code>, the type of this value is 
<code>vector&lt;Student_info&gt;::iterator</code>. We can compare two iterators, <code>const</code> or not, 
for inequality (or equality). If <code>iter</code> is equal to the value returned by <code>students.end()</code>, 
then we're through.</p>
<p>The last expression in the <code>for</code> header, <code>++iter</code>, increments the iterator so that it refers 
to the next element in <code>students</code> on the next trip through the <code>for</code>. The expression 
<code>++iter</code> uses the increment operator, overloaded for the iterator type. The increment 
operator has the effect of advancing the iterator to the next element in the container. We 
don't know, and shouldn't care, how the increment operator works. All that we need to 
know is that afterward, the iterator denotes the next element in the container.</p>
<p>In the body of the <code>for, iter</code> is positioned on an element in <code>students</code>, which element 
we need to write. We access that element by calling the <i><b>dereference</b> </i>operator, <code>*</code>. When 
applied to an iterator, the <code>*</code> operator returns an lvalue (&sect;4.1.3/56) that is the element to 
which the iterator refers. Therefore, the output operation</p>
<div class="prebox"><pre>
cout &lt;&lt; (*iter).name
</pre></div>
<p>has the effect of writing the current element's <code>name</code> member on the standard output.</p>
<p>In order to execute correctly, this expression requires parentheses that override 
the normal operator precedence. The expression <code>*iter</code> returns the value that the iterator 
<code>iter</code> denotes. The precedence of <code>.</code> is higher than the precedence of <code>*</code>, which means that 
if we want the <code>*</code> operation to apply only to the left operand of the <code>.</code>, we must enclose 
<code>*iter</code> in parentheses to get <code>(*iter)</code>. If we wrote <code>*iter.name</code>, the compiler would 
treat it as <code>*(iter.name)</code>, which would be a request to fetch the name member from 
object <code>iter</code>, and apply the dereference operator to that object. The compiler would complain 
because <code>iter</code> does not have a member named <code>name</code>. By writing <code>(*iter).name</code>, 
we say that we want to refer to the <code>name</code> member of the <code>*iter</code> object.</p>
<h4>5.2.3 Some syntactic sugar</h4>
<p>In the code we just saw, we dereferenced an iterator, and then fetched an element from 
the value returned. This combination of operations is so common that there is an abbreviation 
for it: Instead of</p>
<div class="prebox"><pre>
(*iter).name 
</pre></div>
<p>we can write</p>
<div class="prebox"><pre>
iter-&gt;name
</pre></div>
<p>We can use this syntactic sugar to rewrite the last example in &sect;5.2/80:</p>
<div class="prebox"><pre>
for (vector&lt;Student_info&gt;::const_iterator iter = students.begin();
     iter != students.end(); ++iter) {
    cout &lt;&lt; iter-&gt;name &lt;&lt; endl;
}
</pre></div>
<h4>5.2.4 <i>The meaning of </i>students.erase (students.begin () + i)</h4>
<p>Now that we understand more about iterators, we can see the real point of</p>
<div class="prebox"><pre>
students.erase(students.begin() + i);
</pre></div>
<p>in the program in &sect;5.1.1/77. We've already seen that <code>students.begin()</code> is an iterator 
that refers to the initial element of <code>students</code>, and that <code>students.begin() + i</code> refers to 
the <code>i</code>th element of <code>students</code>. What is important to realize is that this latter expression 
gets its meaning from the definition of <code>+</code> on the types of <code>students.begin()</code> and <code>i</code>. In 
other words, the iterator and index types determine the meaning of <code>+</code> in this expression.</p>
<p>If <code>students</code> were a container that did not support random-access indexing, it is likely 
that <code>students.begin()</code> would be of a type that did not have <code>+</code> defined—in which case 
the expression <code>students.begin() + i</code> would not compile. In effect, such a container 
would be able to shut off random access to its elements, while still allowing sequential 
access through iterators.</p>
<div class="prevnext">
<a href="24.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="26.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>