<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>5.3 Using iterators instead of indices</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="25.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="27.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>5.3 Using iterators instead of indices</h3>
<p>Using what we have learned about iterators, and one more new fact, we can reimplement 
the <code>extract_fails</code> function in a way that does not use indexing at all:</p>
<div class="prebox"><pre>
// <i>version 3: iterators but no indexing; still potentially slow</i>
vector&lt;Student_info&gt; extract_fails(vector&lt;Student_info&gt;&amp; students)
{
    vector&lt;Student_info&gt; fail;
    vector&lt;Student_info&gt;::iterator iter = students.begin();
    while (iter != students.end()) {
        if (fgrade(*iter)) {
            fail.push_back(*iter);
            iter = students.erase(iter);
        } else
            ++iter;
    }
return fail;
}
</pre></div>
<p>We start by defining <code>fail</code> as we did before. Next, we define the iterator, named <code>iter</code>, 
that we'll use—in place of an index—to look at the elements in <code>students</code>. Note that we 
give it type <code>iterator</code> instead of <code>const_iterator</code>:</p>
<div class="prebox"><pre>
vector&lt;Student_info&gt;::iterator iter = student.begin();
</pre></div>
<p>because we intend to use it to modify <code>students</code>, which we do in the call to <code>erase</code>. We 
initialize <code>iter</code> to denote the first element in <code>students</code>.</p>
<p>We continue with a <code>while</code> statement that will look at every element of <code>students</code>. 
Remember that <code>iter</code> is an iterator that denotes an element in the container, so <code>*iter</code> is 
the value of that element. To decide whether a student passed or failed, we pass that 
value to <code>fgrade</code>. Similarly, we changed the code that copies the failing records into 
<code>fail</code> by writing</p>
<div class="prebox"><pre>
fail.push_back(*iter) ;       // <i>dereference the iterator to get the element</i>
</pre></div>
<p>instead of</p>
<div class="prebox"><pre>
fail.push_back(students[i]);     // <i>index into the vector to get the element </i>
</pre></div>
<p>The erase has gotten simpler, because we now have an iterator to pass directly:</p>
<div class="prebox"><pre>
iter = students.erase(iter);
</pre></div>
<p>We no longer have to calculate an iterator by adding the index <code>i</code> to <code>students.begin()</code>.</p>
<p>The new fact that we used here is easy to overlook, but crucially important: We now 
assign to <code>iter</code> the value that <code>erase</code> returns. Why?</p>
<p>A bit of thinking should convince us that removing the element that <code>iter</code> denoted 
must <i><b>invalidate</b> </i>that iterator. After we have called <code>students.erase(iter)</code>, we know 
that <code>iter</code> can no longer refer to the same element because that element is gone. In fact, 
calling <code>erase</code> on a <code>vector</code> invalidates all iterators that refer to elements after the one 
that was just <code>erase</code>d. If you look back at the diagram in &sect;5.1.1/78, it should be obvious 
that after we erase the element marked <code>FAIL</code>, that element is gone, and each of the elements 
after it has moved. If the elements have moved, any iterators referring to them 
must be meaningless as well.</p>
<p>Fortunately, <code>erase</code> returns an iterator that is positioned on the element that follows 
the one that we just erased. Therefore, executing</p>
<div class="prebox"><pre>
iter = students.erase(iter);
</pre></div>
<p>makes <code>iter</code> refer to the element after the erasure, which is exactly what we need.</p>
<p>If we're dealing with an element that did not represent a failing grade, then we still 
need to increment <code>iter</code> so that we'll be positioned on the next element for the next trip 
through the loop. We do so by incrementing <code>iter</code> in the <code>else</code> branch.</p>
<p>Incidentally, as in &sect;5.1.1/78, we might be tempted to optimize the loop by saving the 
value of <code>students.end()</code> to avoid evaluating it each time through the <code>while</code>. In other 
words, we might be tempted to change</p>
<div class="prebox"><pre>
while (iter != students.end())
</pre></div>
<p>to</p>
<div class="prebox"><pre>
// <i>this code will fail because of misguided optimization </i>
vector&lt;Student_info&gt;::iterator iter = students.begin(), 
                               end_iter = students.end();
while (iter != end_iter) {
    //  . . . 
}
</pre></div>
<p>This loop will almost surely fail at run time. Why?</p>
<p>The reason is that if we ever execute <code>students.erase</code>, doing so will invalidate every 
iterator after the point erased, including <code>end_iter</code>! Therefore, it is essential that we call 
<code>students.end</code> each time through the loop, just as it was essential in &sect;5.1.1/78 to call 
<code>students.size</code> each time through the loop.</p>
<div class="prevnext">
<a href="25.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="27.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>
