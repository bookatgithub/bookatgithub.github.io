<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>5.4 Rethinking our data structure for better performance</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="26.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="28.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>5.4 Rethinking our data structure for better performance</h3>
<p>For small inputs, our implementation works fine. However, as we said in &sect;5.1.1/77, as 
our input grows, the performance degrades substantially. Why?</p>
<p>Let's think again about using <code>erase</code> to remove an element from a <code>vector</code>. The 
library optimizes the <code>vector</code> data structure for fast access to arbitrary elements. Moreover, 
we saw in &sect;3.2.3/48 that <code>vector</code>s perform well when growing a <code>vector</code> one element 
at a time, as long as elements are added at the <i>end </i>of the <code>vector</code>.</p>
<p>Inserting or removing elements from the interior of a <code>vector</code> is another story. Doing 
so requires that all elements after the one inserted or removed be moved in order to preserve 
fast random access. Moving elements means that the run time of our new code 
might be as slow as quadratic in the number of elements in the <code>vector</code>. For small inputs, 
we might not notice, but each time the size of our input doubles, the execution time 
can quadruple. If we ask our program to deal with all the students in a school rather than just 
the students in a class, even a fast computer will take too long to execute the program.</p>
<p>If we want to do better, we need a data structure that lets us insert and delete elements 
efficiently anywhere in the container. Such a container is unlikely to support random 
access through indices. Even if it did so, integer indices would be less than useful, 
because inserting and deleting elements would have to change the indices of other elements. 
Now that we know how to use iterators, we have a way of dealing with such a 
data structure that does not provide index operations.</p>
<div class="prevnext">
<a href="26.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="28.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>