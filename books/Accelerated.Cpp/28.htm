<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>5.5 The list type</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="27.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="29.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>5.5 The list type</h3>
<p>By rewriting the code to use iterators, we have removed our reliance on indices. We now 
need to reimplement our program using a data structure that will let us delete elements 
efficiently from within the container.</p>
<p>The need to insert or delete elements inside a data structure is pretty common. Not 
surprisingly, the library provides a type, named <code>list</code> and defined in the <code>&lt;list&gt;</code> header, 
that is optimized for this kind of access.</p>
<p>Just as <code>vector</code>s are optimized for fast random access, <code>list</code>s are optimized for fast 
insertion and deletion anywhere within the container. Because <code>list</code>s have to maintain a 
more complicated structure, they are slower than <code>vector</code>s if the container is accessed 
only sequentially. That is, if the container grows and shrinks only or primarily from the 
end, a <code>vector</code> will outperform a <code>list</code>. However, if a program deletes many elements 
from the middle of the container—as our program does—then <code>list</code>s will be faster for 
large inputs, becoming much faster as the inputs grow.</p>
<p>Like a <code>vector</code>, a <code>list</code> is a container that can hold objects of most.any type. As we'll see, 
<code>list</code>s and <code>vector</code>s share many operations. As a result, we can often translate programs 
that operate on <code>vector</code>s into programs that operate on <code>list</code>s, and vice versa. 
Often, all that changes is our variables' types.</p>
<p>One key operation that <code>vector</code>s support, but <code>list</code>s do not, is indexing. As we just 
saw, we can write a version of <code>extract_fails</code> that uses <code>vector</code>s to extract records that 
correspond to failing students, but that uses iterators instead of indices. It turns out that 
we can transform that version of <code>extract_fails</code> to use <code>list</code>s instead of <code>vector</code>s 
merely by changing the appropriate types:</p>
<div class="prebox"><pre>
// <i>version 4: use </i>list <i>instead of </i>vector
list&lt;Student_info&gt; extract_fails(list&lt;Student_info&gt;&amp; students)
{
    list&lt;Student_info&gt; fail;
    list&lt;Student_info&gt;::iterator iter = students.begin();

    while (iter != students.end()) { 
        if (fgrade(*iter)) {
            fail.push_back(*iter);
            iter = students.erase(iter);
        } else
            ++iter;
    }
return fail;
}
</pre></div>
<p>If we compare this code with the version from &sect;5.3/82, we see that the only change is to 
replace <code>vector</code> by <code>list</code> in the first four lines. So, for example, the return type and the 
parameter to the function are now <code>list&lt;Student_info&gt;</code>, as is the local container 
fail, into which we put the failing grades. Similarly, the type of the iterator is the one 
defined by the <code>list</code> class. Hence, we define <code>iter</code> as the <code>iterator</code> type that is a member 
of <code>list&lt;Student_info&gt;</code>. The <code>list</code> type is a template, so we must say what kind 
of object the <code>list</code> holds by naming that type inside angle brackets, just as we 
do when we define a <code>vector</code>.</p>
<p>There are no changes in the program's logic. Of course, our caller will now have to 
provide us with a <code>list</code>, and will get a <code>list</code> in return. Moreover, the details of how the 
library implements the operations are quite different, because this version operates on 
lists and the other ones operate on <code>vector</code>s. When we execute <code>++iter</code>, we are doing 
whatever it means to advance the iterator to the next element in the <code>list</code>. Similarly,</p>
<div class="prebox"><pre>
iter = students.erase(iter);
</pre></div>
<p>calls the <code>list</code> version of <code>erase</code> and assigns the <code>list</code> iterator returned from <code>erase</code> into 
<code>iter</code>. The implementations of the increment and <code>erase</code> operations will surely differ 
from their vector counterparts.</p>
<h4>5.5.1 Some important differences</h4>
<p>One important way in which the operations on <code>list</code>s differ from those on <code>vector</code>s is the 
effect of some of the operations on iterators. For example, when we <code>erase</code> an element 
from a <code>vector</code>, all iterators that refer to the element erased, or subsequent elements, are 
invalidated. Using <code>push_back</code> to append an element to a <code>vector</code> invalidates all iterators 
referring to that <code>vector</code>. This behavior follows from the fact that erasing an element 
moves the following elements, and appending to a <code>vector</code> might reallocate the entire 
<code>vector</code> to make room for the new element. Loops that use these operations must be 
especially careful to ensure that they have not saved copies of any iterators that may be 
invalidated. Inappropriately saving the value of <code>students.end()</code> is a particularly rich 
source of bugs.</p>
<p>For <code>list</code>s, on the other hand, the <code>erase</code> and <code>push_back</code> operations do not invalidate 
iterators to other elements. Only iterators that refer to the element actually <code>erase</code>d 
are invalidated, because that element no longer exists.</p>
<p>We have already mentioned that <code>list</code> class iterators do not support full random-
access properties. We'll have much more to say about iterator properties in &sect;8.2.1/144. 
For now, what's important to know is that, because of this lack of support, we cannot use 
the standard-library <code>sort</code> function to sort values that are stored in a <code>list</code>. Because of 
this restriction, the <code>list</code> class provides its own <code>sort</code> member function, which uses an 
algorithm that is optimized for sorting data stored in a <code>list</code>. Thus, to sort elements in a 
<code>list</code>, we must call the <code>sort</code> member</p>
<div class="prebox"><pre>
list&lt;Student_info&gt; students;
students.sort(compare);
</pre></div>
<p>rather than the global <code>sort</code> function</p>
<div class="prebox"><pre>
vector&lt;Student_info&gt; students;
sort(students.begin(),students.end(), compare);
</pre></div>
<p>as we do for <code>vector</code>s. It is worth noting that because the <code>compare</code> function operates on 
<code>Student_info</code> objects, we can use the same <code>compare</code> function to <code>sort</code> a <code>list</code> of 
<code>Student_info</code> records that we used to sort a <code>vector</code> of them.</p>
<h4>5.5.2 Why bother?</h4>
<p>The code that extracts records for failing students is a good example of the effect of data 
structure choices on performance. The code accesses elements sequentially, which generally 
implies that a <code>vector</code> is the best choice. On the other hand, we also delete elements 
from the interior of the container, thus favoring <code>list</code>s.</p>
<p>As with any performance-related question, the data structure that is &quot;best&quot; depends 
on whether performance even matters. Performance is a tricky subject that is generally 
outside the scope of this book, but it is worth noting that the choice of data structure can 
have a profound effect on a program's performance. For small inputs, <code>list</code>s are slower 
than <code>vector</code>s. For large inputs, a program that uses <code>vector</code>s in an inappropriate way 
can run much more slowly than it would if it were to use <code>list</code>s. It can be surprising how 
quickly performance degrades as the input grows.</p>
<p>To test our programs' performance, we used three files of student records. The first 
file had 735 records. The second file was ten times as big, and the third, ten times bigger 
than that, or 73,500 records. The following table records the time, in seconds, that it took 
to execute the programs on each file size:</p>
<div class="prebox"><pre>
    <u><b>File size   list   vector</b></u>
        735      0.1      0.1
      7,350      0.8      6.7
     73,500      8.8    597.1
</pre></div>
<p>For the file with 73,500 records, the <code>list</code> version of the program took less than nine seconds 
to run, whereas the <code>vector</code> version took nearly ten minutes. The discrepancy 
would have been even greater had there been more failing students.</p>
<div class="prevnext">
<a href="27.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="29.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>