<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>5.6 Taking strings apart</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="28.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="30.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>5.6 Taking strings apart</h3>
<p>Now that we've seen some of what we can do with containers, we're going to turn our 
attention back to <code>string</code>s. Until now, we've done only a few things with <code>string</code>s: 
We've created them, read them, concatenated them, written them, and looked at their 
size. In each of these uses, we have dealt with the <code>string</code> as a single entity. Often, this 
kind of abstract usage is what we want: We want to ignore the detailed contents of a 
<code>string</code>. Sometimes, though, we need to look at the specific characters in a <code>string</code>.</p>
<p>As it turns out, we can think of a <code>string</code> as a special kind of container: It contains 
only characters, and it supports some, but not all, of the container operations. The operations 
that it does support include indexing, and the <code>string</code> type provides an iterator that 
is similar to a <code>vector</code> iterator. Thus, many of the techniques that we can apply to 
<code>vector</code>s apply also to <code>string</code>s.</p>
<p>For example, we might want to break a line of input into words, separated from each 
other by whitespace (space, tab, backspace, or the end of the line). If we can read the 
input directly, we can get the words from the input trivially. After all, that's exactly how 
the <code>string</code> input operator executes: It reads characters up to the whitespace character.</p>
<p>However, there are times when we want to read an entire line of input and examine the 
words within that line. We'll see examples in &sect;7.3/126 and &sect;7.4.2/131.</p>
<p>Because such an operation might be generally useful, we'll write a function to do it. 
The function will take a <code>string</code> and return a <code>vector&lt;string&gt;</code>, which will contain an 
entry for each whitespace-separated word in that <code>string</code>. In order to understand this 
function, you need to know that <code>string</code>s support indexing much the same way as 
<code>vector</code>s do. So, for example, if <code>s</code> is a <code>string</code> that contains at least one character, the 
first character of <code>s</code> is <code>s[0]</code>, and the last character of <code>s</code> is <code>s[s.size() - 1]</code>.</p>
<p>Our function will define two indices, <code>i</code> and <code>j</code>, that will delimit each word in turn. The 
idea is that we will locate a word by computing values for <code>i</code> and <code>j</code> such that the word will 
be the characters in the range <code>[i, j)</code>. For example,</p>
<center>
<img src="images/pg88.jpg" />
</center>
<p>Once we have these indices, we'll use the characters that they delimit to create a new 
<code>string</code>, which we will copy into our <code>vector</code>. When we are done, we will return the 
<code>vector</code> to our caller:</p>
<div class="prebox"><pre>
vector&lt;string&gt; split(const string&amp; s)
{
    vector&lt;string&gt; ret;
    typedef string::size_type string_size;
    string_size i = 0;

    // <i>invariant: we have processed characters [original value of i, i) </i>
    while (i != s.size()) {
        // <i>ignore leading blanks</i>
        // <i>invariant: characters in range [original </i>i, <i>current i) are all spaces</i>
     while (i != s.size() &amp;&amp; isspace(s[i]))
         ++i;

     // <i>find end of next word</i>
     string_size j = i;
     // <i>invariant: none of the characters in range [original j, current j)is a space</i>
     while (j != s.size() &amp;&amp; !isspace(s[j]))
	     j++;
         // <i>if we found some nonwhitespace characters </i>
         if (i != j) {
             // <i>copy from </i>s <i>starting at </i>i <i>and taking </i>j - i <i>chars</i>
             ret.push_back(s.substr(i, j - i));
             i = j;
         }
    }
    return ret;
}
</pre></div>
<p>In addition to the system headers that we have already encountered, this code needs the 
<code>&lt;cctype&gt;</code> header, which defines <code>isspace</code>. More generally, this header defines useful 
functions for processing individual characters. The <code>c</code> at the beginning of <code>cctype</code> is a 
reminder that the <code>ctype</code> facility is part of C++'s inheritance from C.</p>
<p>The <code>split</code> function has a single parameter, which is a reference to a <code>const string</code> 
that we'll name <code>s</code>. Because we will be copying words from <code>s</code>, <code>split</code> does not need to 
change the <code>string</code>. As in &sect;4.1.2/54, we can pass a <code>const</code> reference to avoid the cost of 
copying the <code>string</code>, while still ensuring that <code>split</code> will not change its argument.</p>
<p>We start off by defining <code>ret</code>, which will hold the words from the input <code>string</code>. The 
next two statements define and initialize our first index, <code>i</code>. As we saw in &sect;2.4/22, 
<code>string::size_type</code> is the name for the appropriate type to index a <code>string</code>. Because 
we need to use this type more than once, we start by defining a shorter synonym for this 
type, as we did in &sect;3.2.2/43, to simplify the subsequent declarations. We will use <code>i</code> as the 
index that finds the start of each word, advancing <code>i</code> through the input <code>string</code> one word at a time.</p>
<p>The test in the outermost <code>while</code> ensures that once we've processed the last word in 
the input, we'll stop.</p>
<p>Inside the <code>while</code>, we start by positioning our two indices. First, we find the first non-space 
character in <code>s</code> that is at or after the position currently indicated by <code>i</code>. Because there 
might be multiple whitespace characters in the input, we increment <code>i</code> until it denotes a 
character that is not whitespace.</p>
<p>There is a lot going on in this statement:</p>
<div class="prebox"><pre>
while (i != s.size() &amp;&amp; isspace(s[i]))
    ++i;
</pre></div>
<p>The <code>isspace</code> function is a predicate that takes a <code>char</code> and returns a value that indicates 
whether that <code>char</code> is whitespace. The <code>&amp;&amp;</code> operator tests whether both its operands are 
<code>true</code>, failing if either of them is <code>false</code>. In this expression, the operation will succeed if <code>i</code> 
is not equal to the size of <code>s</code> (meaning that we have not reached the end of the <code>string</code>), 
and <code>s[i]</code> is a whitespace character. In that case, we will increment <code>i</code> and check again.</p>
<p>As we described in &sect;2.4.2.2/26, the logical <code>&amp;&amp;</code> operation uses a short-circuit strategy for 
evaluating its operands. Unlike our earlier examples, this one relies on the short-circuit 
property of <code>&amp;&amp;</code>. The binary logical operations (operators <code>&amp;&amp;</code> and <code>||</code>) execute by testing their 
left-hand operands first. If that test suffices to determine the overall result, then the 
right-hand operand is not evaluated. In the case of the <code>&amp;&amp;</code>, the second condition is evaluated 
if and only if the first condition is <code>true</code>. Thus, the condition in the <code>while</code> executes 
by first checking whether <code>i != s.size()</code>. Only if this test succeeds does it use <code>i</code> to look 
at a character in <code>s</code>. Of course, if <code>i</code> is equal to <code>s.size()</code>, then there are no more characters 
left to examine, and so we drop out of the loop.</p>
<p>Once we fall out of this <code>while</code>, we know either that <code>i</code> denotes a character that is not 
whitespace, or that we've run out of input without finding such a character.</p>
<p>Assuming that <code>i</code> is still a valid index, the next <code>while</code> will find the space that terminates 
the current word in <code>s</code>. We start by creating our other index, <code>j</code>, and initializing it to 
the value of <code>i</code>. The next <code>while</code>,</p>
<div class="prebox"><pre>
while (j != s.size() &amp;&amp; !isspace(s[j]))
    ++j;
</pre></div>
<p>executes similarly to the previous one, but this time the <code>while</code> stops when it encounters a 
whitespace character. As before, we start by ensuring that <code>j</code> is still in range. If so, we 
again call <code>isspace</code> on the character indexed by <code>j</code>. This time, we negate the return from 
<code>isspace</code> using the <i><b>logical negation</b> </i>operator, <code>!</code>. In other words, we want the condition to 
be true if <code>isspace(s[j])</code> is <i>not </i><code>true</code>.</p>
<p>Having completed the two inner <code>while</code> loops, we know that we have either found 
another word or run out of input while looking for a word. If we have run out of input, 
then both <code>i</code> and <code>j</code> will be equal to <code>s.size()</code>. Otherwise, we have found a word, which 
we must push onto <code>ret</code>:</p>
<div class="prebox"><pre>
// <i>if we found some nonwhitespace characters </i>
if (i != j) {
    // <i>copy from </i>s <i>starting at </i>i <i>and taking </i>j - i <i>chars</i>
    ret.push_back(s.substr(i, j - i));
    i = j;
}
</pre></div>
<p>The call to <code>push_back</code> uses a member of the <code>string</code> class, named <code>substr</code>, that we have 
not previously seen. It takes an index and a length, and creates a new <code>string</code> that contains 
a copy of characters from the initial <code>string</code>, starting at the index given by the first 
argument, and copying as many characters as indicated by its second argument. The substring 
that we extract starts at <code>i</code>, which is the first character in the word that we just 
found. We copy characters from <code>s</code> starting with the one indexed by <code>i</code>, and continuing 
until we have copied the characters in the (half-open) range <code>[i, j)</code>. Remembering from 
&sect;2.6/31 that the number of elements in a half-open range is the difference between the 
bounds, we see that we will copy exactly <code>j - i</code> characters.</p>
<div class="prevnext">
<a href="28.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="30.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>