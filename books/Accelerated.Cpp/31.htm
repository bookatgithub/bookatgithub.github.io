<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>5.8 Putting strings together</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="30.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="32.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>5.8 Putting strings together</h3>
<p>In &sect;1.2/12 and &sect;2.5.4/29, we wrote a program to write someone's name centered in a box 
of asterisks. However, we never actually created a <code>string</code> to hold our program's output. 
Instead, we wrote the various parts of our output, one at a time, and let the output file 
combine those fragments into a picture.</p>
<p>We will now revisit this problem, with the aim of building a single data structure that 
represents the entire framed string. This program is a simplified version of one of our 
favorite examples, called <i>character pictures. </i>A character picture is a rectangular array of 
characters that can be displayed. It is a simplification of what happens in a real 
application—in this case, applications based on bitmap graphics. The simplifications are 
to use characters instead of bits, and to write onto ordinary files instead of displaying on 
graphical hardware. The problem builds on an exercise originally presented in the first 
edition of Stroustrup's <i>The C++ Programming Language </i>(Addison-Wesley, 1986), and that 
we explored in some depth in <i>Ruminations on C++ </i>(Addison-Wesley, 1997).</p>
<h4>5.8.1 Framing a picture</h4>
<p>The particular variation of the character-picture problem that we'd like to explore in this 
section writes all the words stored in a <code>vector&lt;string&gt;</code>, one to a line, and surrounds 
these <code>string</code>s with a border. We'll line the <code>string</code>s up along the left-hand border, and 
leave a single space between the edge of asterisks and the words we are writing.</p>
<p>Assume that <code>p</code> is a <code>vector&lt;string&gt;</code> that contains the <code>string</code>s <code>&quot;this is an&quot;</code>, <code>&quot; 
example&quot;</code>, <code>&quot;to&quot;</code>, <code>&quot;illustrate&quot;</code>, and <code>&quot;framing&quot;</code>. Then we would like to have a 
function named <code>frame</code>, which behaves in such a way that calling <code>frame(p)</code> yields a 
value of type <code>vector&lt;string&gt;</code> with elements that, when written, are</p>
<div class="prebox"><pre>
**************
* this is an *
* example    *
* to         *
* illustrate *
* framing    *
**************
</pre></div>
<p>Note that the border is rectangular, not ragged, even though the <code>string</code>s themselves are 
of different lengths. This fact implies that we'll need a function to find the length of the 
longest <code>string</code> in the <code>vector</code>. Let's start there:</p>
<div class="prebox"><pre>
string::size_type width(const vector&lt;string&gt;&amp; v)
{
    string::size_type maxlen = 0;
    for (vector&lt;string&gt;::size_type i = 0; i != v.size(); ++i)
        maxlen  = max(maxlen, v[i].size());
    return maxlen;
}
</pre></div>
<p>This function will iterate through the <code>vector</code>, setting <code>maxlen</code> to the largest size that 
we've seen so far. When we fall out of the loop, <code>maxlen</code> will hold the length of the longest 
<code>string</code> in <code>v</code>.</p>
<p>The only tricky aspect of the frame function is its interface. We know that it will operate 
on a <code>vector&lt;string&gt;</code>, but what about the return type? It will be convenient if the 
function creates a new picture rather than change the picture it was given:</p>
<div class="prebox"><pre>
vector&lt;string&gt; frame(const vector&lt;string&gt;&amp; v) {
    vector&lt;string&gt; ret;
    string::size_type maxlen = width(v);
    string border(maxlen + 4, '*');

    // <i>write the top border</i>
    ret.push_back(border);

    // <i>write each interior row, bordered by an asterisk and a space </i>
    for (vector&lt;string&gt;::size_type i = 0; i != v.size(); ++i) {
        ret.push_back( &quot;* &quot; + v[i] +
                  string(maxlen - v[i].size(), ' ') + .&quot; *&quot;)
    }

    // <i>write the bottom border </i>
    ret.push_back(border);
    return ret;
}
</pre></div>
<p>We said that the function will not change the picture that it is passed, so we declare the 
parameter as a reference to <code>const</code>. The function will return a <code>vector&lt;string&gt;</code>, which 
we'll build in <code>ret</code>. We begin by figuring out how long each output <code>string</code> will be; then 
we create a <code>string</code> with that many asterisks, which we'll use to create the top and bottom 
border.</p>
<p>These borders are four characters longer than the longest <code>string</code>: one each for the 
right- and left-hand borders, and another two for the spaces that separate the borders 
from the <code>string</code>s. Taking a syntactic cue from the definition of <code>spaces</code> in &sect;1.2/12 that 
we explained in &sect;1.2/13, we define <code>border</code> to be a <code>string</code> that contains <code>maxlen + 4</code> 
asterisks. We call <code>push__back</code> to append a copy of border to <code>ret</code>, thereby forming the 
top border.</p>
<p>Next, we copy the picture that we are framing. We define the index <code>i</code>, which we will 
use to walk through <code>v</code> until we've copied each element. In the call to <code>push_back</code>, we use 
the <code>+</code> operator from <code>string</code>, which, as we learned in &sect;1.2/13, concatenates its arguments.</p>
<p>To form the output line, we concatenate the right- and left-hand borders with the 
<code>string</code> that we want to display, which is stored in <code>v[i]</code>. The third <code>string</code> in our concatenation, 
<code>string(maxlen - v[i].size(), ' ')</code>, constructs an unnamed, temporary 
<code>string</code> that holds the right number of blanks. We construct this <code>string</code> in the same 
way that we initialized border. We obtain the number of blanks by subtracting the size 
of the current <code>string</code> from <code>maxlen</code>.</p>
<p>With this knowledge, we can see that the argument to <code>push_back</code> is a new <code>string</code> 
that consists of an asterisk, followed by a space, followed by the current <code>string</code>, followed 
by enough spaces to make the <code>string</code> as long as the longest <code>string</code>, followed by 
another space and another asterisk.</p>
<p>All that's left is to append the bottom border and return.</p>
<h4>5.8.2 Vertical concatenation</h4>
<p>What makes character pictures a fun example is that, once we have them, we can do 
things with them. We just saw one operation—framing a picture. Another operation is 
concatenation, which we can do both vertically and horizontally. We'll look at vertical 
concatenation here, and at horizontal concatenation in the next section.</p>
<p>Pictures are naturally organized by rows, in the sense that we represent a picture by 
a <code>vector&lt;string&gt;</code>, each element of which is a row. Therefore, concatenating two pictures 
vertically is simple: We merely concatenate the <code>vector</code>s that represent them. 
Doing so will cause the two pictures to line up along their left margins, which is a reasonable 
way to define vertical concatenation.</p>
<p>The only problem is that although there is a <code>string</code> concatenation operation, there is 
no <code>vector</code> concatenation operation. As a result, we have to do the work ourselves:</p>
<div class="prebox"><pre>
vector&lt;string&gt; vcat(const vector&lt;string&gt;&amp; top,
            const vector&lt;string&gt;&amp; bottom)
{
    // <i>copy the </i>top <i>picture</i>
    vector&lt;string&gt; ret = top;

    // <i>copy entire bottom picture</i>
    for (vector&lt;string&gt;::const_iterator it = bottom.begin();
         it != bottom.end(); ++it)
        ret.push_back(*it);

    return ret;
}
</pre></div>
<p>This function uses only facilities that we have already seen: We define <code>ret</code> as a copy of 
<code>top</code>, append each element of <code>bottom</code> to <code>ret</code>, and return ret<code> </code>as its result.</p>
<p>The loop in this function implements one form of a common idea, namely, that of 
inserting a copy of elements from one container into another. In this particular case, we 
are appending the elements, which we can think of as inserting them at the end.</p>
<p>Because this operation is so common, the library offers a way of doing it without writing 
a loop. Instead of</p>
<div class="prebox"><pre>
for (vector&lt;string&gt;::const_iterator it = bottom.begin();
     it != bottom.end(); ++it)
    ret.push_back(*it);
</pre></div>
<p>we can write</p>
<div class="prebox"><pre>
ret.insert(ret.end(), bottom.begin(), bottom.end());
</pre></div>
<p> with the same effect.</p>
<h4>5.8.3 Horizontal concatenation</h4>
<p>By horizontal concatenation, we mean taking two pictures, and making a new picture in 
which one of the input pictures forms the left part of the new picture, and the other forms 
the right part. Before we start, we need to think about what we want to do when the pictures 
to concatenate are different sizes.  We'll arbitrarily decide that we'll align them 
along their top edges. Thus, each row of the output picture will be the result of concatenating 
the corresponding rows of the two input pictures. We'll have to pad the left-hand 
picture's rows to make them take up the right amount of space in the output picture.</p>
<p>In addition to padding the left-hand picture, we also have to worry about what to do 
when the pictures have a different number of rows. For example, if <code>p</code> holds our initial picture, 
we might want to concatenate the original value of <code>p</code> horizontally with the result of 
framing <code>p</code>. That is, we'd like <code>hcat(p, frame(p))</code> to produce</p>
<div class="prebox"><pre>
this is an **************
example    * this is an *
to         * to         *
illustrate * illustrate *
framing    * framing    *
           **************
</pre></div>
<p>Note that the left-hand picture has fewer rows than the right-hand picture. This fact 
implies that we will have to pad the output on the left-hand side to account for these missing 
rows. If the left-hand picture is longer, we'll just copy the <code>string</code>s from it into the 
new picture; we won't bother to pad the (empty) right side with blanks. With this analysis complete, we can write our function:</p>
<div class="prebox"><pre>
vector&lt;string&gt;
hcat(const vector&lt;string&gt;&amp; left, const vector&lt;string&gt;&amp; right)
{
    vector&lt;string&gt; ret;

    // <i>add 1 to leave a space between pictures</i>
    string::size_type width1 = width(left) + 1;

    // <i>indices to look at elements from </i>left <i>and </i>right <i>respectively </i>
    vector&lt;string&gt;::size_type i = 0, j = 0;

    // <i>continue until we've seen all rows from both pictures</i>
    while (i != left.size() || j != right.size()) {
        // <i>construct new </i>string <i>to hold characters from both pictures</i>
        string s;</p>

        // <i>copy a row from the left-hand side, if there is one </i>
        if (i != left.size())
            s = left[i++];

        // <i>pad to full width</i>
        s += string(width1 - s.size(), ' ');

        // <i>copy a row from the right-hand side, if there is one</i>
        if (j != right.size())
            s += right[j++];

        // <i>add </i>s <i>to the picture we're creating </i>
        ret.push_back(s);
    }
    return  ret;
}
</pre></div>
<p>We start, as we did for <code>frame</code> and <code>vcat</code>, by defining the picture that we'll return. Our 
next step is to compute the width to which we must pad the left-hand picture. That width 
will be one more than the width of the picture itself, to leave a space between the pictures 
when we concatenate them. Next, we iterate through both pictures, copying an element 
from the first, padded as necessary, followed by an element from the second.</p>
<p>The only tricky part is taking care of what to do if we run out of elements in one picture 
before we run out of elements in the other. Our iteration continues until we have 
copied all the elements for each input <code>vector</code>. Hence, the <code>while</code> loop continues until 
both indices reach the end of their respective pictures.</p>
<p>If we have not yet exhausted <code>left</code>, we copy its current element into <code>s</code>. Regardless of 
whether we copied anything from <code>left</code>, we next call the <code>string</code> compound assignment 
operator, <code>+=</code>, to pad the output to the appropriate width. The compound assignment 
operator defined by the <code>string</code> library operates as you might expect: It adds the right-hand 
operand to its left-hand operand and stores the result in the left-hand side. Of 
course, <code>&quot;add&quot;</code> here means string concatenation.</p>
<p>We determine how much to pad by subtracting <code>s.size()</code> from <code>width1</code>. We know 
that either <code>s.size()</code> is the size of the <code>string</code> that we copied from <code>left</code>, or it is zero 
because there was no entry to copy. In the first case, <code>s.size()</code> will be greater than zero 
and less than <code>width1</code>, because we added one to the length of the longest <code>string</code> to 
account for a space between the two pictures. Thus, in this case, we'll append one or 
more blanks to <code>s</code>. If <code>s.size()</code> is zero, then we'll pad the entire output line.</p>
<p>Having copied and padded the <code>string</code> for the left-hand picture, we need only 
append the <code>string</code> from the right-hand picture, assuming that there still is an element 
from <code>right</code> to copy. Regardless of whether we added a value from <code>right</code>, we push <code>s</code> 
onto the output <code>vector</code>, and continue until we've processed both input <code>vector</code>s— 
remembering to return to our caller the picture that we've created.</p>
<p>It is important to note that the correct behavior of our program depends on the fact 
that <code>s</code> is local to the <code>while</code> loop. Because <code>s</code> is declared inside the <code>while</code>, it is created, 
with a null value, and destroyed on each trip through the loop.</p>
<div class="prevnext">
<a href="30.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="32.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>