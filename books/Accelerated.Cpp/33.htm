<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Using library algorithms</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="32.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="34.htm"><img src="images/Next1.gif" /></a>
</div>
<div class="chapname">
<h1>6</h1>
</div>
<div id="chapter">
<h2>Using library algorithms</h2>
</div>
<p>As we saw in Chapter 5, many container operations apply to more than one type of container. 
For example, <code>vector, string</code>, and <code>list</code> allow us to insert elements by calling 
<code>insert</code> and remove elements by calling <code>erase</code>. These operations have the same interface 
for each type that supports them. For that matter, many container operations also 
apply to the <code>string</code> class.</p>
<p>Every container—as well as the <code>string</code> class—provides companion iterator types, 
which let us navigate through a container and examine its elements. Again, the library 
ensures that every iterator that supplies an operation does so through the same interface. 
For example, we can use the <code>++</code> operator to advance any type of iterator from one element 
to the next; we can use the <code>*</code> operator to access the element associated with any type of 
iterator; and so on.</p>
<p>In this chapter, we'll see how the library exploits these common interfaces to provide a 
collection of standard algorithms. By using these algorithms, we can avoid writing (and 
rewriting) the same code over and over again. More important, we can write programs 
that are smaller and simpler than we would write otherwise—sometimes astonishingly so.</p>
<p>Like containers and iterators, algorithms also use consistent interface conventions. 
This consistency lets us learn a few of the algorithms and then apply that knowledge to 
others as the need arises. In this chapter, we'll use several of the library algorithms to 
solve problems related to processing <code>string</code>s and student grades. Along the way, we'll 
cover most of the core concepts in the algorithm library.</p>
<p>Unless we say otherwise, the <code>&lt;algorithm&gt;</code> header defines all the algorithms that we 
introduce in this chapter.</p>
<a name="analyzing">
<h3>6.1 Analyzing strings</h3>
</a>
<p>In &sect;5.8.2/94, we used a loop to concatenate two character pictures:</p>
<div class="prebox"><pre>
for (vector&lt;string&gt;::const_iterator it = bottom.begin();
     it != bottom.end(); ++it)
    ret.push_back(*it);
</pre></div>
<p>We noted that this loop was equivalent to inserting a copy of the elements of <code>bottom</code> at 
the end of <code>ret</code>, an operation that vectors provided directly:</p>
<div class="prebox"><pre>
ret.insert(ret.end(), bottom.begin(), bottom.end());
</pre></div>
<p>This problem has an even more general solution: We can separate the notion of copying 
elements from that of inserting elements at the end of a container, as follows:</p>
<div class="prebox"><pre>
copy(bottom.begin(), bottom.end(), back_inserter(ret));
</pre></div>
<p>Here, <code>copy</code> is an example of a generic algorithm, and <code>back_inserter</code> is an example of 
an iterator adaptor.</p>
<p>A <i><b>generic algorithm</b> </i>is an algorithm that is not part of any particular kind of container, 
but instead takes a cue from its arguments' types about how to access the data it uses. 
The standard library's generic algorithms usually take iterators among their arguments, 
which they use to manipulate the elements of the underlying containers. So, for example, 
the copy algorithm takes three iterators, which we'll call <code>begin, end</code>, and <code>out</code>, and 
copies all the elements in the range <code>[begin, end)</code> to a sequence of elements starting at 
out and extending as far as necessary. In other words,</p>
<div class="prebox"><pre>
copy(begin, end, out);
</pre></div>
<p>has the same effect as</p>
<div class="prebox"><pre>
while (begin != end)
    *out++ = *begin++;
</pre></div>
<p>except that the <code>while</code> body changes the values of the iterators, and copy doesn't.</p>
<p>Before we describe iterator adaptors, we should note that this loop depends on the use 
of the <i><b>postfix</b> </i>version of the increment operators. These operators differ from the prefix 
versions, which we have used up to now, in that <code>begin++</code> returns a copy of the original 
value of <code>begin</code>, incrementing the stored value of <code>begin</code> as a side effect. In other words,</p>
<div class="prebox"><pre>
it = begin++;
</pre></div>
<p>is equivalent to</p>
<div class="prebox"><pre>
it = begin;
++begin;
</pre></div>
<p>The increment operators have the same precedence as <code>*</code>, and they are both right-associative, 
which means that <code>*out++</code> has the same meaning as <code>*(out++)</code>. Thus,</p>
<div class="prebox"><pre>
*out++ = *begin++;
</pre></div>
<p>is equivalent to the more verbose</p>
<div class="prebox"><pre>
{ *out = *begin; ++out; ++begin; }
</pre></div>
<p>Let's return to <i><b>iterator adaptors</b>, </i>which are functions that yield iterators with properties 
that are related to their arguments in useful ways. The iterator adaptors are defined in 
<code>&lt;iterator&gt;</code>. The most common iterator adaptor is <code>back_inserter</code>, which takes a 
container as its argument and yields an iterator that, when used as a destination, appends 
values to the container. For example, <code>back_inserter(ret)</code> is an iterator that, when 
used as a destination, appends elements to <code>ret</code>. Therefore,</p>
<div class="prebox"><pre>
copy(bottom.begin(), bottom.end(), back_inserter(ret));
</pre></div>
<p>copies all of the elements of <code>bottom</code> and appends them to the end of <code>ret</code>. After this 
function completes, the size of <code>ret</code> will have increased by <code>bottom.size()</code>. 
Notice that we could not call</p>
<div class="prebox"><pre>
// <i>error</i>—ret <i>is not an iterator</i>
copy(bottom.begin(), bottom.end(), ret);
</pre></div>
<p>because copy's third argument is an iterator, not a container. Nor could we call</p>
<div class="prebox"><pre>
// <i>error - no element at </i>ret.end()
copy(bottom.begin(), bottom.end(), ret.end());
</pre></div>
<p>This latter mistake is particularly insidious, because the program will compile. What it 
does when you try to run it is another story entirely. The first thing <code>copy</code> will try to do is 
assign a value to the element at <code>ret.end()</code>. There's no element there, so what the implementation 
will do is anybody's guess.</p>
<p>Why is <code>copy</code> designed this way? Because separating the notions of copying elements 
and expanding a container allows programmers to choose which operations to use. For 
example, we might want to copy elements on top of elements that already exist in a container, 
without changing the container's size. As another example, which we shall see in 
&sect;6.2.2/112, we might want to use <code>back_inserter</code> to append elements to a container that 
are not merely copies of another container's elements.</p>
<h4>6.1.1 Another way to split</h4>
<p>Another function that we can write more directly using the standard algorithms is <code>split</code>, 
which we saw in &sect;5.6/88. The hard part of writing that function was dealing with the 
indices that delimited each word in the input line. We can replace the indices by iterators, 
and use standard-library algorithms to do much of the work for us:</p>
<div class="prebox"><pre>
// <i>true if the argument is whitespace, false otherwise</i>
bool space(char c)
{
    return isspace(c);
}

// false <i>if the argument is whitespace</i>, true <i>otherwise</i>
bool not_space(char c)
{
	return !isspace(c);
}

vector&lt;string&gt; split(const string& str)
{
    typedef string::const_iterator iter;
    vector&lt;string&gt; ret;

    iter i = str.begin();
    while (i != str.end()) {

        // <i>ignore leading blanks</i>
        i = find_if(i, str.end(), not_space);

        // <i>find end of next word</i>
        iter j = find_if(i, str.end(), space);

        // <i>copy the characters in</i> [i, j)
        if (i != str.end())
            ret.push_back(string(i, j));
        i = j;
    }
    return ret;
}
</pre></div>
<p>This code uses a lot of new functions, so it will take a bit of explanation. The key idea to 
keep in mind is that it implements the same algorithm as the original, using <code>i</code> and <code>j</code> to 
delimit each word in <code>str</code>. Once we've found a word, we copy it from <code>str</code>, and push the 
copy onto the back of <code>ret</code>.</p>
<p>This time, <code>i</code> and <code>j</code> are iterators, not indices. We use <code>typedef</code> to abbreviate the iterator 
type, so that we can use <code>iter</code> instead of the longer <code>string::const_iterator</code>. 
Although the <code>string</code> type does not support all of the container operations, it does support 
iterators. Therefore, we can use the standard-library algorithms on the characters of 
a <code>string</code>, just as we can use them on the elements of a <code>vector</code>.</p>
<p>The algorithm that we use in this example is <code>find_if</code>. Its first two arguments are 
iterators that denote a sequence; the third is a predicate, which tests its argument and 
returns <code>true</code> or <code>false</code>. The <code>find_if</code> function calls the predicate on each element in the 
sequence, stopping when it finds an element for which the predicate yields <code>true</code>.</p>
<p>The standard library provides an <code>isspace</code> function to test whether a character is a 
space. However, that function is overloaded, so that it will work with languages, such as 
Japanese, that use other character types, such as <code>wchar_t</code> (&sect;1.3/14). It's not easy to pass 
an overloaded function directly as an argument to a template function. The trouble is that 
the compiler doesn't know which version of the overloaded function we mean, because 
we haven't supplied any arguments that the compiler might use to select a version. 
Accordingly, we'll write our own predicates, called <code>space</code> and <code>not_space</code>, that make 
clear which version of <code>isspace</code> we intend.</p>
<p>The first call to <code>find_if</code> seeks the first nonspace character, which begins a word. 
Remember that one or more spaces might begin a line or might separate adjacent words in 
the input. We don't want to include these spaces in the output.</p>
<p>After the first call to <code>find_if</code>, <code>i</code> will denote the first nonspace, if any, in <code>str</code>. We use 
<code>i</code> in the next call to <code>find_if</code>, which looks for the first space in <code>[i, str.end())</code>. If 
<code>find_if</code> fails to find a value that satisfies the predicate, it returns its second argument, 
which, in this case, is <code>str.end()</code>. Therefore, <code>j</code> will be initialized to denote the blank that 
separates the next word in <code>str</code> from the rest of the line, or, if we are on the last word in 
the line, <code>j</code> will be equal to <code>str.end()</code>.</p>
<p>At this point, <code>i</code> and <code>j</code> delimit a word in <code>str</code>. All that's left is to use these iterators to 
copy the data from <code>str</code> into <code>ret</code>. In the earlier version of <code>split</code>, we used 
<code>string::substr</code> to create the copy. However, that version of <code>split</code> operated on 
indices, not iterators, and there isn't a version of <code>substr</code> that operates on iterators. 
Instead, we construct a new string directly from the iterators that we have. We do so by 
using an expression, <code>string(i, j)</code>, that is somewhat similar to the definition of <code>spaces</code> 
that we explained in &sect;1.2/13. Our present example constructs a <code>string</code> that is a copy of 
the characters in the range <code>[i, j)</code>. We push this new <code>string</code> onto the back of <code>ret</code>.</p>
<p>It is worth pointing out that this version of the program omits the tests of the index <code>i</code> 
against <code>str.size()</code>. Nor are there the obvious equivalent tests of the iterator against 
<code>str.end()</code>. The reason is that the library algorithms are written to handle gracefully 
calls that pass an empty range. For example, at some point the first call to <code>find_if</code> will 
set <code>i</code> to the value returned by <code>str.end()</code>, but there is no need to check <code>i</code> before passing 
it to the second call to <code>find_if</code>. The reason is that <code>find_if</code> will look in the empty range 
<code>[i, str.end())</code> and will return <code>str.end()</code> to indicate that there is no match.</p>
<h4>6.1.2 Palindromes</h4>
<p>Another character-manipulation problem that we can use the library to solve succinctly is 
determining whether a word is a palindrome. Palindromes are words that are spelled the 
same way front to back as back to front. For example, &quot;civic,&quot; &quot;eye,&quot; &quot;level,&quot; 
&quot;madam,&quot; and &quot;rotor&quot; are all palindromes.</p>
<p>Here is a compact solution that uses the library:</p>
<div class="prebox"><pre>
bool is_palindrome(const string&amp; s)
{
    return equal(s.begin(), s.end(), s.rbegin());
}
</pre></div>
<p>The <code>return</code> statement in this function's body calls the <code>equal</code> function and the <code>rbegin</code> 
member function, both of which we have not yet seen.</p>
<p>Like <code>begin</code>, <code>rbegin</code> returns an iterator, but this time it is an iterator that starts with 
the last element in the container and marches backward through the container.</p>
<p>The <code>equal</code> function compares two sequences to determine whether they contain equal 
values. As usual, the first two iterators passed to <code>equal</code> specify the first sequence. The 
third argument is the starting point for the second sequence. The <code>equal</code> function 
assumes that the second sequence is the same size as the first, so it does not need an ending 
iterator. Because we pass <code>s.rbegin()</code> as the starting point for the second sequence, 
the effect of this call is to compare values from the back of <code>s</code> to values in the front. The 
<code>equal</code> function will compare the first character in <code>s</code> with the last. Then it will compare 
the second to the next to last, and so on. This behavior is precisely what we want.</p>
<h4>6.1.3 Finding URLs</h4>
<p>As the last of our examples of character manipulation, let's write a function that finds 
Web addresses, called uniform resource locators (URLs), that are embedded in a <code>string</code>. 
We might use such a function by creating a single <code>string</code> that holds the entire contents 
of a document. The function would then scan the document and find all the URLs in it. 
A URL is a sequence of characters of the form</p>
<p><i>protocol-name: //resource-name</i></p>
<p>where <i>protocol-name </i>contains only letters, and <i>resource-name </i>may consist of letters, digits, 
and certain punctuation characters. Our function will take a <code>string</code> argument and will 
look for instances of :// in that <code>string</code>. Each time we find such an instance, we'll look 
for the <i>protocol-name </i>that precedes it, and the <i>resource-name </i>that follows it.</p>
<p>Because we want our function to find <i>all </i>the URLs in its input, we'll want it to return 
a <code>vector&lt;string&gt;</code>, with one element for each URL. The function executes by moving the 
iterator <code>b</code> through the <code>string</code>, looking for the characters :// that might be a part of 
a URL. If we find these characters, it looks backward to find the <i>protocol-name, </i>and it looks 
forward to find the <i>resource-name:</i></p>
<div class="prebox"><pre>
vector&lt;string&gt; find_urls(const string&amp; s)
{
    vector&lt;string&gt; ret;
    typedef string::const_iterator iter;
    iter b = s.begin(), e = s.end();

    // <i>look through the entire input</i>
    while (b != e) {

        // <i>look for one or more letters followed by ://</i>
        b = url_beg(b, e);

        // <i>if we found it</i>
        if (b != e) {
            // <i>get the rest of the URL</i>
            iter after = url_end(b, e);

            // <i>remember the URL</i>
            ret.push_back(string(b, after));

            // <i>advance b and check for more URLs on this line</i>
            b = after;
        }
    }
    return ret;
}
</pre></div>
<p>We start by declaring <code>ret</code>, which is the <code></code>vector into which we will put the URLs as we 
find them, and by obtaining iterators that delimit the <code>string</code>. We will have to write the 
<code>url_beg</code> and <code>url_end</code> functions, which will find the beginning and end of any URL in 
the input. The <code>url_beg</code> function will be responsible for identifying whether a valid URL 
is present and, if so, for returning an iterator that refers to the first character of the 
<i>protocol-name. </i>If it does not identify a URL in the input, then it will return its second argument 
(<code>e</code> in this case) to indicate failure.</p>
<p>If <code>url_beg</code> finds a URL, the next task is to find the end of the URL by calling <code>url_end</code>. 
That function will search from the given position until it reaches either the end of the 
input or a character that cannot be part of a URL. It will return an iterator positioned one 
past the last character in the URL.</p>
<p>Thus, after the calls to <code>url_beg</code> and <code>url_end</code>, the iterator <code>b</code> denotes the beginning of 
a URL, and the iterator after denotes the position one past the last character in the URL:</p>
<center>
<img src="images/pg107.jpg" />
</center>
<p>We construct a new <code>string</code> from the characters in this range, and push that <code>string</code> onto 
the back of <code>ret</code>.</p>
<p>All that remains is to increment the value of <code>b</code> and to look for the next URL. Because 
URLs cannot overlap one another, we set <code>b</code> to (one past) the end of the URL that we just 
found, and continue the <code>while</code> loop until we've looked at all the input. Once that loop 
exits, we return the <code>vector</code> that contains the URLs to our caller.</p>
<p>Now we have to think about <code>url_beg</code> and <code>url_end</code>. The <code>url_end</code> function is simpler, 
so we'll start there:</p>
<div class="prebox"><pre>
string::const_iterator
url_end(string::const_iterator b, string::const_iterator e)
{
    return find_if(b, e, not_url_char);
}
</pre></div>
<p>This function just forwards its work to the library <code>find_if</code> function, which we used in 
&sect;6.1.1/103. The predicate that we pass to <code>find_if</code> is one that we will write, named 
<code>not_url_char</code>. It will return <code>true</code> when passed a character that cannot be in a URL:</p>
<div class="prebox"><pre>
bool not_url_char(char c)
{
    // <i>characters, in addition to alphanumerics, that can appear in a URL</i>
    static const string url_ch = "~;/?:@=&$-_.+!*'(),";

    // <i>see whether c can appear in a URL and return the negative</i>
    return !(isalnum(c) ||
             find(url_ch.begin(), url_ch.end(), c) != url_ch.end());
}
</pre></div>
<p>Despite being small, this function uses a fair bit of new material. First is the use of the 
<code>static</code> <i><b>storage class specifier</b>. </i>Local variables that are declared to be <code>static</code> are preserved 
across invocations of the function. Thus, we will create and initialize the <code>string url_ch</code> 
only on the first call to <code>not_url_char</code>. Subsequent calls will use the object that 
the first call created. Because <code>url_ch</code> is a <code>const string</code>, its value will not change once 
we have initialized it.</p>
<p>The <code>not_url_char</code> function also uses the <code>isalnum</code> function, which the <code>&lt;cctype&gt;</code> 
header defines. This function tests whether its argument is an alphanumeric character 
(a letter or a digit).</p>
<p>Finally, <code>find</code> is another algorithm that we haven't used yet. It is similar to <code>find_if</code>, 
except that instead of calling a predicate, it looks for the specific value given as its third 
argument. As with <code>find_if</code>, if the value that we want is present, the function returns an 
iterator denoting the first occurrence of the value in the given sequence. If the value is not 
found, then find returns its second argument.</p>
<p>With this information in hand, we can now understand the <code>not_url_char</code> function. 
Because we negate the value of the entire expression before we return it, <code>not_url_char</code> 
will yield <code>false</code> if <code>c</code> is a letter, a digit, or any of the characters in <code>url_ch</code>. If <code>c</code> is any 
other value, the function returns <code>true</code>.</p>
<p>Now the hard part begins: implementing <code>url_beg</code>. This function is messy, because it 
must deal with the possibility that the input might contain :// in a context that cannot be 
a valid URL. In practice, we'd probably have a list of acceptable <i>protocol-names </i>and look 
only for those. For simplicity, though, we'll limit ourselves to being sure that one or more 
letters precede the :// separator, and at least one character follows it:</p>
<div class="prebox"><pre>
string::const_iterator
url_beg(string::const_iterator b, string::const_iterator e)
{
    static const string sep = "://";

    typedef string::const_iterator iter;

    // i <i>marks where the separator was found</i>
    iter i = b;

    while ((i = search(i, e, sep.begin(), sep.end())) != e) {

        // <i>make sure the separator isn't at the beginning or end of the line</i>
        if (i != b && i + sep.size() != e) {

            // beg <i>marks the beginning of the protocol-name</i>
            iter beg = i;
            while (beg != b && isalpha(beg[-1]))
                --beg;

            // <i>is there at least one appropriate character before and after the separator?</i>
            if (beg != i && !not_url_char(i[sep.size()]))
                return beg;
        }

        // <i>the separator we found wasn't part of a URL advance i past this separator</i>
        i += sep.size();
    }
    return e;
}
</pre></div>
<p>The easy part is to write the function header. We know that we'll be passed two iterators 
denoting the range in which to look, and that we'll return an iterator that denotes the 
beginning of the first URL in that range, if one exists. We also declare and initialize a local 
<code>string</code>, which will hold the characters that make up the separator that identifies a potential 
URL. Like <code>url_ch</code> in the <code>not_url_char</code> function (&sect;6.1.3/107), this <code>string</code> is 
<code>static</code> and <code>const</code>. Thus, we will not be able to change the <code>string</code>, and its value will 
be created only on the first invocation of <code>url_beg</code>.</p>
<p>The function executes by placing two iterators into the <code>string</code> delimited by <code>b</code> and <code>e</code>:</p>
<center>
<img src="images/109.jpg" />
</center>
<p>The iterator <code>i</code>will denote the beginning of the URL separator, if any, and <code>beg</code> will indicate 
the beginning of the <i>protocol-name</i>, if any.</p>
<p>The function first looks for the separator, by calling <code>search</code>, a library function that we 
haven't used before. This function takes two pairs of iterators: The first pair denotes the 
sequence in which we are looking, and the second pair denotes the sequence that we wish 
to locate. As with other library functions, if <code>search</code> fails, it returns the second iterator. 
Therefore, after the call to <code>search</code>, either <code>i</code> denotes (one past) the end of the input 
<code>string</code>, or it denotes a : that is followed by //.</p>
<p>If we found a separator, the next task is to get the letters (if any) that make up the 
<i>protocol-name. </i>We first check whether the separator is at the beginning or end of the 
input. If the separator is in either of those places, we know that we don't have a URL, 
because a URL has at least one character on each side of its separator. Otherwise, we need 
to try to position the iterator <code>beg</code>. The inner <code>while</code> loop moves <code>beg</code> backward through 
the input until it hits either a nonalphabetic character or the beginning of the <code>string</code>. It 
uses two new ideas: The first is the notion that if a container supports indexing, so do its 
iterators. In other words, <code>beg[-1]</code> is the character at the position immediately before the 
one that <code>beg</code> denotes. We can think of <code>beg[-l]</code> as an abbreviation for <code>*(beg - 1)</code>. 
We'll learn more about such iterators in &sect;8.2.6/148. The second new idea is the <code>isalpha</code> 
function, defined in <code>&lt;cctype&gt;</code>, which tests whether its argument is a letter.</p>
<p>If we were able to advance the iterator over as much as a single character, we assume 
that we've found a <i>protocol-name. </i>Before returning <code>beg</code>, we still have to check that there's 
at least one valid character following the separator. This test is more complicated. We 
know that there is at least one more character in the input, because we're inside the body 
of an <code>if</code> that compares the value of <code>i + sep.size()</code> with <code>e</code>. We can access the first such 
character as <code>i[sep.size()]</code>, which is an abbreviation for <code>*(i + sep.size())</code>. We 
test whether that character can appear in a URL by passing the character to 
<code>not_url_char</code>. This function returns <code>true</code> if the character is not valid, so we negate the 
return to check whether the character is valid.</p>
<p>If the separator is not part of a URL, then the function advances <code>i</code> past the separator 
and keeps looking.</p>
<p>This code uses the <i><b>decrement operator</b>, </i>which we mentioned in the operator table in 
&sect;2.7/32, but which we have not previously used. It works like the increment operator, 
but it decrements its operand instead. As with the increment operator, it comes in prefix 
and postfix versions. The prefix version, which we use here, decrements its operand and 
returns the new value.</p>
<div class="prevnext">
<a href="32.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="34.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>