<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>6.4 Algorithms, containers, and iterators</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="35.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="37.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>6.4 Algorithms, containers, and iterators</h3>
<p>There is a fact that is crucial to understand in using algorithms, iterators, and containers:</p>
<div class="prebox"><pre>
<i>Algorithms act on container elements</i>—<i>they do not act on containers.</i>
</pre></div>
<p>The <code>sort, remove_if</code>, and <code>partition</code> functions all move elements to new positions in 
the underlying container, but they do not change the properties of the container itself. For 
example, <code>remove_if</code> does not change the size of the container on which it operates; it 
merely copies elements around within the container.</p>
<p>This distinction is especially important in understanding how algorithms interact with 
the containers that they use for output. Let's look in more detail at our use of <code>remove_if</code> 
in &sect;6.3.1/117. As we've seen, the call</p>
<div class="prebox"><pre>
remove_if(students.begin(), students.end(), fgrade)
</pre></div>
<p>did not change the size of <code>students</code>. Rather, it copied each element for which the predicate 
was false to the beginning of <code>students</code>, and left the rest of the elements alone. 
When we need to shorten the vector to discard those elements, we must do so ourselves. 
In our example, we said</p>
<div class="prebox"><pre>
students.erase(remove_if(students.begin(), students.end(), fgrade),
        students.end());
</pre></div>
<p>Here, <code>erase</code> changes the <code>vector</code> by removing the sequence indicated by its arguments. 
This call to erase shortens <code>students</code> so that it contains only the elements we want. 
Note that <code>erase</code> must be a member of <code>vector</code>, because it acts directly on the container, 
not just on its elements.</p>
<p>Similarly, it is important to be aware of the interaction between iterators and algorithms, 
and between iterators and container operations. We've already seen, in &sect;5.3/83 
and &sect;5.5.1/86, that container operations such as <code>erase</code> and <code>insert</code> invalidate the iterator 
for the element <code>erase</code>d. More important, in the case of <code>vector</code>s and <code>string</code>s, operations 
such as <code>erase</code> or <code>insert</code> also invalidate any iterator denoting elements <i>after </i>the 
one <code>erase</code>d or <code>insert</code>ed. Because these operations can invalidate iterators, we must be 
careful about saving iterator values if we are using these operations.</p>
<p>Similarly, functions such as <code>partition</code> or <code>remove_if</code>, which can move elements 
around within the container, will change which element is denoted by particular iterators. 
After running one of these functions, we cannot rely on an iterator continuing to denote a 
specific element.</p>
<div class="prevnext">
<a href="35.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="37.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>