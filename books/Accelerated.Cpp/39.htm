<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>7.2 Counting words</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="38.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="40.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>7.2 Counting words</h3>
<p>As a simple example, think about how we might count the number of times that each distinct 
word occurs in our input. With associative arrays, the solution is almost trivial:</p>
<div class="prebox"><pre>
int main()
{
    string s;
    map&lt;string, int&gt; counters;   // <i>store each word and an associated counter</i>

    // <i>read the input, keeping track of each word and how often we see it </i>
    while (cin &gt;&gt; s)
        ++counters[s];

    // <i>write the words and associated counts</i>
    for (map&lt;string, int&gt;::const_iterator it = counters.begin();
         it != counters.end(); ++it) {
        cout &lt;&lt; it-&gt;first &lt;&lt; &quot;\t&quot; &lt;&lt; it-&gt;second &lt;&lt; endl;
    }
    return 0;
}
</pre></div>
<p>As with other containers, we must specify the type of the objects that the <code>map</code> will hold. 
Because a <code>map</code> holds key-value pairs, we need to mention not only the type of the values, 
but also the type of the keys. So,</p>
<div class="prebox"><pre>
map&lt;string, int&gt; counters;
</pre></div>
<p>defines <code>counters</code> as a <code>map</code> that holds values of type <code>int</code> that are associated with keys of 
type string. We often speak of such a container as &quot;a <code>map</code> from <code>string</code> to <code>int</code>,&quot; 
because we can use the <code>map</code> by giving it a <code>string</code> as a key, and getting back the associated 
<code>int</code> data.</p>
<p>The way we define <code>counters</code> captures our intent to associate each word that we read 
with an integer counter that records how many times we have seen that word. The input 
loop reads the standard input, a word at a time, into <code>s</code>. The interesting part is</p>
<div class="prebox"><pre>
++counters[s];
</pre></div>
<p>What happens here is that we look in <code>counters</code>, using the word that we just read as the 
key. The result of <code>counters[s]</code> is the integer that is associated with the <code>string</code> stored 
in <code>s</code>. We then use <code>++</code> to increment that integer, which indicates that we have seen the 
word once more.</p>
<p>What happens when we encounter a word for the first time? In that case, <code>counters</code> 
will not yet contain an element with that key. When we index a <code>map</code> with a key that has 
not yet been seen, the <code>map</code> automatically creates a new element with that key. That element 
is <i><b>value-initialized</b>, </i>which, for simple types such as <code>int</code>, is equivalent to setting the 
value to zero. Thus, when we read a new word for the first time and execute 
<code>++counters[s]</code> with that new word, we are guaranteed that the value of <code>counters[s]</code> 
will be zero before we increment it. Incrementing <code>counters[s]</code> will, therefore, correctly 
indicate that we have seen that word once so far.</p>
<p>Once we have read the entire input, we must write the counters and the associated 
words. We do so in much the same way as we would write the contents of a <code>list</code> or a 
<code>vector</code>: We iterate through the container in a <code>for</code> loop, which uses a variable of the iterator 
type defined by the <code>map</code> class. The only real difference is in how we write the data in 
the body of the for statement:</p>
<div class="prebox"><pre>
cout &lt;&lt; it-&gt;first &lt;&lt; &quot;\t&quot; &lt;&lt; it-&gt;second &lt;&lt; endl;
</pre></div>
<p>Recall that an associative array stores a collection of key-value pairs. Using <code>[] </code>to access a 
<code>map</code> element conceals this fact, because we put the key inside the <code>[]</code> and get back the 
associated value. So, for example, <code>counters[s]</code> is an <code>int</code>. However, when we iterate 
over a <code>map</code>, we must have a way to get at both the key and the associated value. The <code>map</code> 
container lets us do so by using a companion library type called <code>pair</code>.</p>
<p>A <b>pair </b>is a simple data structure that holds two elements, which are named <code>first</code> 
and <code>second</code>. Each element in a <code>map</code> is really a <code>pair</code>, with a <code>first</code> 
member that contains the key and a <code>second</code> member that contains the associated value. When we dereference a 
<code>map</code> iterator, we obtain a value that is of the <code>pair</code> type associated with the <code>map</code>.</p>
<p>The <code>pair</code> class can hold values of various types, so when we create a <code>pair</code>, we say 
what the types of the <code>first</code> and <code>second</code> data members should be. For a <code>map</code> that has a 
key of type <code>K</code> and a value of type <code>V</code>, the associated <code>pair</code> type is <code>pair&lt;const K, V&gt;</code>.</p>
<p>Note that the <code>pair</code> associated with a <code>map</code> has a key type that is <code>const</code>. Because the 
<code>pair</code> key is <code>const</code>, we are prevented from changing the value of an element's key. If the 
key were not <code>const</code>, we might implicitly change the element's position within the <code>map</code>. 
Accordingly, the key is always <code>const</code>, so that if we dereference a <code>map&lt;string, int&gt;</code><br />
iterator, we get a <code>pair&lt;const string, int&gt;</code>. Thus, <code>it-&gt;first</code> is the current 
element's key, and <code>it-&gt;second</code> is the associated value. Because <code>it</code> is an iterator, <code>*it</code> is 
an lvalue (&sect;4.1.3/56), and therefore <code>it-&gt;first</code> and <code>it-&gt;second</code> are also lvalues. However, 
the type of <code>it-&gt;first</code> includes const, which prevents us from changing it.</p>
<p>With this knowledge, we can see that the output statement writes each key (that is, 
each distinct word from the input), followed by a tab and the corresponding count.</p>
<div class="prevnext">
<a href="38.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="40.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>
