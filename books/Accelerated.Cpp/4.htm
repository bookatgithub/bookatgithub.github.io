<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>0.7 A slightly deeper look</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="3.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="5.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>0.7 A slightly deeper look</h3>
<p>This program uses two additional concepts that permeate C++: expressions and scope. 
We will have much more to say about these concepts as this book progresses, but it is 
worthwhile to begin with some of the basics here.</p>
<p>An <i><b>expression</b></i> asks the implementation to compute something. The computation 
yields a <i><b>result</b></i>, and may also have <i><b>side effects</b></i>-that is, it may affect the state of the program 
or the implementation in ways that are not directly part of the result. For example, 
<code>3+4</code> is an expression that yields <code>7</code> as its result, and has no side effects, and</p>
<div class="prebox">
<pre>std::cout &lt;&lt; &quot;Hello, world!&quot; &lt;&lt; std::endl
</pre></div>
<p>is an expression that, as its side effect, writes <code>Hello, world!</code> on the standard output stream 
and ends the current line.</p>
<p>An expression contains operators and operands, both of which can take on many 
forms. In our <code>Hello, world!</code> expression, the two <code>&lt;&lt;</code> symbols are operators, and 
<code>std::cout, &quot;Hello, world! &quot;</code> and <code>std::endl</code> are operands.</p>
<p>Every operand has a <i><b>type</b></i>. We shall have much more to say about types, but essentially, 
a type denotes a data structure and the meanings of operations that make sense for 
that data structure. The effect of an operator depends on the types of its operands.</p>
<p>Types often have names. For example, the core language defines <code>int</code> as the name of a 
type that represents integers, and the library defines <code>std::ostream</code> as the type that provides 
stream-based output. In our program, <code>std::cout</code> has type <code>std::ostream</code>.</p>
<p>The <code>&lt;&lt;</code> operator takes two operands, and yet we have written two <code>&lt;&lt;</code> operators 
and three operands. How can this be? The answer is that <code>&lt;&lt;</code>  is <i><b>left-associative</b></i>, which, loosely 
speaking, means that when <code>&lt;&lt;</code> appears twice or more in the same expression, each <code>&lt;&lt;</code>  will 
use as much of the expression as it can for its left operand, and as little of it as it can for its 
right operand. In our example, the first <code>&lt;&lt;</code> operator has <code>&quot;Hello, world! &quot;</code> as its right 
operand and <code>std::cout</code> as its left operand, and the second <code>&lt;&lt;</code> operator has <code>std::endl</code> 
as its right operand and <code>std::cout &lt;&lt; &quot;Hello, world! &quot;</code> as its left operand. If we use 
parentheses to clarify the relationship between operands and operators, we see that our 
output expression is equivalent to</p>
<div class="prebox">
<pre>
(std::cout &lt;&lt; &quot;Hello, world!&quot;) &lt;&lt; std::endl</pre>
</div>
<p>Each &lt;&lt; behaves in a way that depends on the types of its operands. The first <code>&lt;&lt;</code>  
has <code>std::cout</code>, which has type <code>std::ostream</code>, as its left operand. Its right operand 
is a string literal, which has a mysterious type that we shall not even discuss until &sect;10.2/176. 
With those operand types, <code>&lt;&lt;</code> writes its right operand's characters onto the stream that its 
left operand denotes, and its result is its left operand.</p>
<p>The left operand of the second <code>&lt;&lt;</code> is therefore an expression that yields <code>std::cout</code>, 
which has type <code>std::ostream</code>; the right operand is <code>std::endl</code>, which is a <i><b>manipulator</b></i>. 
The key property of manipulators is that writing a manipulator on a stream manipulates 
the stream, by doing something other than just writing characters to it. When the left 
operand of <code>&lt;&lt;</code> has type <code>std::ostream</code> and the right operand is a manipulator, <code>&lt;&lt;</code> 
does whatever the manipulator says to do to the given stream, and returns the stream as its 
result. In the case of <code>std::endl</code>, that action is to end the current line of output.</p>
<p>The entire expression therefore yields <code>std::cout</code> as its value, and, as a side effect, it 
writes <code>Hello, world!</code> on the standard output stream and ends the output line. When 
we follow the expression by a semicolon, we are asking the implementation to discard 
the value-which action is appropriate, because we are interested only in the side effects.</p>
<p>The <i><b>scope</b></i> of a name is the part of a program in which that name has its meaning. C++ 
has several different kinds of scopes, two of which we have seen in this program.</p>
<p>The first scope that we used is a namespace, which, as we've just seen, is a collection of 
related names. The standard library defines all of its names in a namespace named <code>std</code>, 
so that it can avoid conflicts with names that we might define for ourselves-as long as 
we are not so foolish as to try to define <code>std</code>. When we use a name from the standard 
library, we must specify that the name we want is the one from the library; for example, 
<code>std::cout</code> means <code>cout</code> as defined in the namespace named <code>std</code>.</p>
<p>The name <code>std::cout</code> is a <i><b>qualified name</b></i>, which uses the <code>::</code> operator. This operator is 
also known as the <i><b>scope operator</b></i>. To the left of the <code>::</code> is the (possibly qualified) name of a 
scope, which in the case of <code>std::cout</code> is the namespace named <code>std</code>. To the right of the 
<code>::</code> is a name that is defined in the scope named on the left. Thus, <code>std::cout</code> means 
&quot;the name <code>cout</code> that is in the (namespace) scope <code>std</code>.&quot;</p>
<p>Curly braces form another kind of scope. The body of <code>main</code>-and the body of every 
function-is itself a scope. This fact is not too interesting in such a small program, but it 
will be relevant to almost every other function we write.</p>
<div class="prevnext">
<a href="3.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="5.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>