<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>7.3 Generating a cross-reference table</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="39.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="41.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>7.3 Generating a cross-reference table</h3>
<p>Once we know how to count how often words occur in the input, a logical next step is to 
write a program to generate a cross-reference table that indicates where each word occurs 
in the input. This extension requires several changes to our basic program.</p>
<p>First, instead of reading a word at a time, we'll need to read a line at a time, so that we 
can associate line numbers with words. Once we're reading lines instead of words, we'll 
need a way to break each line into its constituent words. Fortunately, we already wrote 
such a function, named <code>split</code>, in &sect;6.1.1/103. We can use this function to turn each input 
line into a <code>vector&lt;string&gt;</code>, from which we can extract each word.</p>
<p>Rather than using <code>split</code> directly, we're going to make it a parameter to the cross-reference 
function. That way, we leave open the possibility of changing the way we find 
the words on a line. For example, we could pass the <code>find_urls</code> function from 
&sect;6.1.3/105, and use the cross-reference function to see where URLs appear in the input.</p>
<p>As before, we will use a <code>map</code> with keys that are the distinct words from the input. This 
time, however, we will have to associate a more complicated value with each key. Instead 
of keeping track of how often the word occurs, we want to know all the line numbers on 
which the word occurred. Because any given word may occur on many lines, we will 
need to store the line numbers in a container.</p>
<p>When we get a new line number, all we will need to do is append that number to those 
that we already have for that word. Sequential access to the container elements will suffice, 
so we can use a <code>vector</code> to keep track of line numbers. Therefore, we will need a 
<code>map</code> from <code>string</code> to <code>vector&lt;int&gt;</code>.</p>
<p>With these preliminaries out of the way, let's look at the code:</p>
<div class="prebox"><pre>
// <i>find all the lines that refer to each word in the input </i>
map&lt;string, vector&lt;int&gt; &gt;
     xref(istream&amp; in,
          vector&lt;string&gt; find_words(const string&amp;) = split)
{
    string line;
    int line_number = 0;
    map&lt;string, vector&lt;int&gt; &gt; ret;

    // <i>read the next line </i>
    while (getline(in, line)) {
        ++line_number;

        // <i>break the input line into words</i>
        vector&lt;string&gt; words = find_words(line);

        // <i>remember that each word occurs on the current line</i>
        for (vector&lt;string&gt;::const_iterator it = words.begin();
             it != words.end(); ++it)
            ret[*it].push_back(line_number);
    }
    return ret;
}
</pre></div>
<p>Both the return type and the argument list of this function deserve attention. If you look 
at the declaration of our return type and the local variable <code>ret</code>, you will see that we carefully 
wrote <code>&gt;&gt;</code> instead of <code>&gt;&gt;</code>. The compiler needs that space, because if it sees <code>&gt;&gt;</code> without 
intervening spaces, it will assume that it is looking at an <code>&gt;&gt;</code> operator, rather than at 
two separate <code>&gt;</code> symbols.</p>
<p>In the argument list, notice that <code>find_words</code> defines a function parameter, which 
captures our intent to pass to <code>xref</code> the function to use to <code>split</code> the input into words. The 
other interesting thing is that we say <code>= split</code> after the definition of <code>find_words</code>, which 
indicates that this parameter has a <i><b>default argument</b>. </i>When we give a parameter a default 
argument, we're saying that callers can omit that argument if they wish. If they supply an 
argument, the function will use it. If they omit the argument, the compiler will substitute 
the default. Thus, users can call this function in either of two ways:</p>
<div class="prebox"><pre>
xref(cin);                // <i>uses </i>split <i>to find words in the input stream</i>
xref(cin, find_urls);     // <i>uses the function named </i>find_urls <i>to find words</i>
</pre></div>
<p>The function body starts by defining a <code>string</code> variable, named <code>line</code>, which will hold 
each line of input as we read it, and an <code>int</code> variable, named <code>line_number</code>, to hold the 
line number of the line that we are currently processing. The input loop calls <code>getline</code> 
(&sect;5.7/91) to read a line at a time into <code>line</code>. As long as there is input, we increment the 
line counter and then process each word in the line.</p>
<p>We begin that processing by declaring a local variable named <code>words</code>, which will hold 
all the words from <code>line</code>, and initialize it by calling <code>find_words</code>. That function will be 
either our <code>split</code> function (&sect;6.1.1/103), which splits <code>line</code> into its component words, or 
another function that takes a <code>string</code> argument and returns a <code>vector&lt;string&gt;</code> result. 
We continue with a <code>for</code> statement that visits each element in <code>words</code>, updating the <code>map</code> 
each time through <code>words</code>.</p>
<p>The <code>for</code> header should be familiar: It defines an iterator, and marches that iterator 
sequentially through <code>words</code>. The statement that forms the body of the <code>for</code> may be hard 
to understand on first reading,</p>
<div class="prebox"><pre>
ret[*it].push_back(line_number);
</pre></div>
<p>so we'll pick it apart a bit at a time. The iterator <code>it</code> denotes an element of <code>words</code>, and so 
<code>*it</code> is one of the words in the input line. We use that word to index our <code>map</code>. The 
expression <code>ret[*it]</code> returns the value stored in the <code>map</code> at the position indexed by <code>*it</code>. 
That value is a <code>vector&lt;int&gt;</code>, which holds the line numbers on which this word has 
appeared so far. We call that <code>vector</code>'s <code>push_back</code> member to append the current line 
number to the <code>vector</code>.</p>
<p>As we saw in &sect;7.2/125, if this is the first time we've seen this word, then the associated 
<code>vector&lt;int&gt;</code> will be value-initialized. Value-initialization of class types is a bit complicated, 
as we'll see in &sect;9.5/164; what we need to know is that <code>vector</code>s are value-initialized 
the same way that variables of type <code>vector</code> are created when we don't give 
them an initial value explicitly. In both cases, the <code>vector</code> is created without any elements. 
Thus, when we insert a new <code>string</code> key into the <code>map</code>, it will be associated with 
an empty <code>vector&lt;int&gt;</code>. The call to <code>push_back</code> will append the current line number to 
this initially empty <code>vector</code>.</p>
<p>Having written the <code>xref</code> function, we can use it to generate a cross-reference table:</p>
<div class="prebox"><pre>
int main()
{
    // <i>call</i> xref <i>using</i> split <i>by default</i>
    map&lt;string, vector&lt;int&gt; &gt; ret = xref(cin);

    // write the results

    for (map&lt;string, vector&lt;int&gt; &gt;::const_iterator it = ret.begin();
         it != ret.end(); ++it) {
        // <i>write the word</i>
        cout << it->first << " occurs on line(s): ";

        // followed by one or more line numbers
        vector&lt;int&gt;::const_iterator line_it = it->second.begin();
        cout << *line_it;	// <i>write the first line number</i>

        ++line_it;
        // write the rest of the line numbers, if any
        while (line_it != it->second.end()) {
            cout << ", " << *line_it;
            ++line_it;
        }
        // <i>write a new line to separate each word from the next</i>
        cout << endl;
    }
    
    return 0;
}
</pre></div>
<p>We expect that this code will look as unfamiliar as the code that updated the <code>map</code>. Nevertheless, 
it uses only operations that we've already seen.</p>
<p>We begin by calling <code>xref</code> to build a data structure that contains the numbers of the 
lines on which each word appears. We use the default value for the function parameter, 
so this call to <code>xref</code> will use <code>split</code> to break the input into words. The rest of the program 
writes the contents of the data structure that <code>split</code> returns.</p>
<p>Most of the program is the <code>for</code> statement, the form of which should be familiar from 
&sect;7.2/124. It starts at the first element in <code>ret</code> and looks at all the elements in sequence.</p>
<p>As you read the body of the <code>for</code> loop, remember that dereferencing a <code>map</code> iterator 
yields a value of type <code>pair</code>. The <code>first</code> element of the <code>pair</code> holds the (<code>const</code>) key, and 
the <code>second</code> element is the value associated with that key.</p>
<p>We begin the <code>for</code> loop by writing the word that we're processing and a message:</p>
<div class="prebox"><pre>
cout &lt;&lt; it-&gt;first &lt;&lt; &quot; occurs on line(s): &quot;;
</pre></div>
<p>That word is the key at the position in the map associated with the iterator <code>it</code>. We get at 
the key by dereferencing the iterator and fetching the <code>first</code> element from the <code>pair</code>.</p>
<p>We are justified in writing the message at this point because the only way an element 
could have gotten into <code>ret</code> is if it represents a word with one or more references. In this 
case, we know for certain that at least one line number will follow the message. We don't 
know if there will be more than one, so we are ambiguous about the plural.</p>
<p>Just as <code>it-&gt;first</code> is the key, <code>it-&gt;second</code> is the associated value, which in this case 
is a <code>vector&lt;int&gt;</code> that holds the current word's line numbers. We define <code>line_it</code> as an 
iterator that we will use to access the elements of <code>it-&gt;second</code>.</p>
<p>We want commas to separate those numbers, but we don't want a stray comma at the 
end. Therefore, we must treat either the first or the last element specially. We choose to 
treat the first one specially, by writing that element explicitly. It is safe to do so because 
every element of <code>ret</code> represents a word with at least one reference to it. Having written 
an element, we increment the iterator to indicate that we've done so. Then the <code>while</code> 
loop iterates through the remaining elements (if any) of the <code>vector&lt;int&gt;</code>. For each element, 
it writes a comma, followed by the value of the element.</p>
<div class="prevnext">
<a href="39.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="41.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>
