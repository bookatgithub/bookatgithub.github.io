<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>7.5 A note on performance</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="41.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="43.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>7.5 A note on performance</h3>
<p>If you have used associative arrays in other languages, those arrays were probably implemented 
in terms of a data structure called a <i><b>hash table</b>. </i>Hash tables can be very fast, but 
they have compensating disadvantages:</p>
<ul>
<li>For each key type, someone must supply a hash function, which computes an appropriate 
integer value from the value of the key.</li>
<li>A hash table's performance is exquisitely sensitive to the details of the hash function.</li>
<li>There is usually no easy way to retrieve the elements of a hash table in a useful order. 
C++ associative containers are hard to implement in terms of hash tables:</li>
<li>The key type needs only the <code>&lt;</code> operator or equivalent comparison function.</li>
<li>The time to access an associative-container element with a given key is logarithmic 
in the total number of elements in that container, regardless of the keys' values.</li>
<li>Associative-container elements are always kept sorted by key.</li>
</ul>
<p>In other words, although C++ associative containers will typically be slightly slower than 
the best hash-table data structures, they perform much better than naive data structures, 
their performance does not require their users to design good hash functions, and they are 
more convenient than hash tables because of their automatic ordering. If you're generally 
familiar with associative data structures, you might want to know that C++ libraries typically 
use a balanced self-adjusting tree structure to implement associative containers.</p>
<p>If you really want hash tables, they are available as parts of many C++ implementations. 
However, because they are not part of standard C++, they are beyond the scope of 
this book. Although no standard can be ideal for every purpose, the standard associative 
containers are more than adequate for most applications.</p>
<div class="prevnext">
<a href="41.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="43.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>