<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>7.6 Details</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="42.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="44.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>7.6 Details</h3>
<p><b>The do while statement </b>is similar to the <code>while</code> statement (&sect;2.3.1/19), except that the test 
is at the end. The general form of the statement is</p>
<div class="prebox"><pre>
do <i>statement </i>
while <i>(condition);</i>
</pre></div>
<p>The <i>statement </i>is executed first, after which the <i>condition </i>and <i>statement </i>are executed alternately 
until the <i>condition </i>is <code>false</code>.</p>
<p><b>Value-initialization: </b>Accessing a <code>map</code> element that doesn't yet exist creates an element 
with a value of <code>V()</code>, where <code>V</code> is the type of the values stored in the <code>map</code>. Such an expression 
is said to be value-initialized. &sect;9.5/164 explains the details of value-initialization; the 
most important aspect is that built-in types are initialized to <code>0</code>.</p>
<p><b>rand() </b>is a function that yields a random integer in the range <code>[0, RAND_MAX]</code>. Both 
<code>rand</code> and <code>RAND_MAX</code> are defined in <code>&lt;cstdlib&gt;</code>.</p>
<p><b>pair&lt;K, V&gt; </b>is a simple type whose objects hold pairs of values. Access to these data 
values is through their names, <code>first</code> and <code>second</code> respectively.</p>
<p><b>map&lt;K, V&gt; </b>is an associative array with key type <code>K</code> and value type <code>V</code>. The elements of a 
<code>map</code> are key-value pairs, which are maintained in key order to allow efficient access of 
elements by key. The iterators on <code>map</code>s are bidirectional (&sect;8.2.5/148). Dereferencing a 
map iterator yields a value of type <code>pair&lt;const K, V&gt;</code>. The <code>map</code> operations include:</p>
<p><code>map&lt;K, V&gt; m;</code></p>
<div class="details">
Creates a new empty <code>map</code>, with keys of type <code>const K</code> and values of type <code>V</code>.
</div>
<p><code>map&lt;K, V&gt; m(cmp);</code></p>
<div class="details">
Creates a new empty <code>map</code> with keys of type <code>const K</code> and values of type <code>V</code>, 
that uses the predicate <code>cmp</code> to determine the order of the elements.
</div>
<p><code>m[k]</code></p>
<div class="details">
Indexes the <code>map</code> using a key, <code>k</code>, of type <code>K</code>, and returns an lvalue of type <code>V</code>. If
there is no entry for the given key, a new value-initialized element is created 
and inserted into the <code>map</code> with this key. Because using <code>[]</code> to access a <code>map</code> 
might create a new element, <code>[]</code> is not allowed on a <code>const map</code>.
</div>
<p><code>m.begin()</code><br />
<code>m.end()</code></p>
<div class="details">
Return iterators that can be used to access the elements of a <code>map</code>. Note that 
dereferencing one of these iterators yields a key-value pair, not just a value.
</div>
<p><code>m.find(k)</code></p>
<div class="details">
Returns an iterator referring to the element with key <code>k</code>, or <code>m.end()</code> if no such element exists.
</div>
<p>For a <code>map&lt;K, V&gt;</code> and an associated iterator <code>p</code>, the following apply:</p>
<p><code>p-&gt;first</code>    Yields an lvalue of type <code>const K</code> that is the key for the element <code>p</code> denotes.</p>
<p><code>p-&gt;second</code> Yields an lvalue of type <code>V</code> that is the value part of the element that <code>p</code> denotes.</p>
<h4>Exercises</h4>
<p><b>7-0.</b> Compile, execute, and test the programs in this chapter.</p>
<p><b>7-1.</b> Extend the program from &sect;7.2/124 to produce its output sorted by occurrence count. That 
is, the output should group all the words that occur once, followed by those that occur 
twice, and so on.</p>
<p><b>7-2.</b> Extend the program in &sect;4.2.3/64 to assign letter grades by ranges:</p>
<div class="prebox"><pre>
A&nbsp; &nbsp;90-100
B&nbsp; &nbsp;80-89.99...
C&nbsp; &nbsp;70-79.99...
D&nbsp; &nbsp;60-69.99...
F&nbsp; &nbsp;&lt; 60
</pre></div>
<p>The output should list how many students fall into each category.</p>
<p><b>7-3.</b> The cross-reference program from &sect;7.3/126 could be improved: As it stands, if a word 
occurs more than once on the same input line, the program will report that line multiple 
times. Change the code so that it detects multiple occurrences of the same line number and 
inserts the line number only once.</p>
<p><b>7-4.</b> The output produced by the cross-reference program will be ungainly if the input file is 
large. Rewrite the program to break up the output if the lines get too long.</p>
<p><b>7-5.</b> Reimplement the grammar program using a <code>list</code> as the data structure in which we build 
the sentence.</p>
<p><b>7-6.</b> Reimplement the <code>gen_sentence</code> program using two <code>vector</code>s: One will hold the fully 
unwound, generated sentence, and the other will hold the rules and will be used as a stack. 
Do not use any recursive calls.</p>
<p><b>7-7.</b> Change the driver for the cross-reference program so that it writes <code>line</code> if there is only one 
line and <code>line</code>s otherwise.</p>
<p><b>7-8.</b> Change the cross-reference program to find all the URLs in a file, and write all the lines on 
which each distinct URL occurs.</p>
<p><b>7-9.</b> (difficult) The implementation of nrand in &sect;7.4.4/135 will not work for arguments greater 
than <code>RAND_MAX</code>. Usually, this restriction is no problem, because <code>RAND_MAX</code> is often the largest 
possible integer anyway. Nevertheless, there are implementations under which 
<code>RAND_MAX</code> is much smaller than the largest possible integer. For example, it is not uncommon 
for <code>RAND_MAX</code> to be 32767 (2<sup>15</sup> -1) and the largest possible integer to be 2147483647 
(2<sup>31</sup> -1). Reimplement <code>nrand</code> so that it works well for all values of <code>n</code>.</p>
<div class="prevnext">
<a href="42.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="44.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>