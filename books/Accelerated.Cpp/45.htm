<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>8.2 Data-structure independence</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="44.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="46.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>8.2 Data-structure independence</h3>
<p>The <code>median</code> function that we just implemented used templates to generalize across types 
that a <code>vector</code> might contain. We can call this function to find the median of a <code>vector</code> of 
values of any kind of arithmetic type.</p>
<p>More generally, we would like to be able to write a simple function that deals with values 
stored in any kind of data structure, such as a <code>list, a vector</code>, or a <code>string</code>. For that 
matter, we would like to be able to act on part of a container, rather than having to use the 
entire container.</p>
<p>For example, the standard library uses iterators to allow us to call <code>find</code> on any contiguous 
part of any container. If <code>c</code> is a container, and <code>val</code> is a value of the type stored in 
the container, we use find by writing expressions such as</p>
<div class="prebox"><pre>
find(c.begin(), c.end(), val)
</pre></div>
<p>Why did we have to mention <code>c</code> twice? Why doesn't the library let us say</p>
<div class="prebox"><pre>
c.find(val)
</pre></div>
<p> by analogy with <code>c.size()</code>, or even</p>
<div class="prebox"><pre>
find(c, val)
</pre></div>
<p>passing the container directly to <code>find</code> as an argument? Both questions turn out to have 
the same answer: By using iterators, and thereby requiring us to mention <code>c</code> twice, the 
library makes it possible to write a single <code>find</code> function that can find a value in any contiguous 
part of any container. Neither of these other approaches allows us to do so.</p>
<p>Let's look first at <code>c.find(val)</code>. If the library let us use <code>c.find(val)</code>, we would be 
calling find as a member of whatever type <code>c</code> has—which means that whoever defined 
the type of <code>c</code> would have to define <code>find</code> as a member. Also, if the library used the 
<code>c.find(val)</code> style for the algorithms, then we would be unable to use these functions 
for built-in arrays, about which we shall learn in Chapter 10.</p>
<p>Why does the library require us to give <code>c.begin()</code> and <code>c.end()</code> as arguments to 
<code>find</code> instead of letting us pass <code>c</code> directly? The reason to pass two values is that doing so 
delimits a range, which makes it possible to look in part of a container instead of insisting 
on looking through the whole thing. For example, think about how you would write the 
<code>split</code> function in &sect;6.1.1/103 if <code>find_if</code> were restricted to searching an entire container.</p>
<p>There is a more subtle reason for generic functions to take iterator arguments instead 
of container arguments directly: It is possible for iterators to access elements that aren't 
in containers at all in the ordinary sense. For example, in &sect;6.1.2/105, we used the <code>rbegin</code> 
function, which yields an iterator that grants access to its container's elements in reverse 
order. Passing such an iterator as an argument to <code>find</code> or <code>find_if</code> lets us search the 
container's elements in reverse order, which would be impossible if these functions 
insisted on taking a container as an argument directly.</p>
<p>Of course, it would be possible to overload the library functions, so that one could call 
them with either a container or a pair of iterators as an argument. However, it is far from 
clear that the extra convenience would outweigh the extra complexity in the library.</p>
<h4>8.2.1  Algorithms and iterators</h4>
<p>The easiest way to understand how templates let us write data-structure-independent 
programs is to look at implementations of some of the more popular standard-library 
functions. These functions all include iterators among their arguments, which identify the 
container elements on which the functions will act. All standard-library containers, and 
some other types, such as <code>string</code>, supply iterators that allow these functions to act on 
the containers' elements.</p>
<p>Some containers support operations that others do not. This support, or lack thereof, 
translates into operations that some iterators support and others do not. For example, it is 
possible to access an element with a given index directly in a <code>vector</code>, but not in a <code>list</code>. 
Accordingly, if we have an iterator that refers to an element of a <code>vector</code>, the design of 
that iterator makes it possible to obtain an iterator that refers to another element of that 
same <code>vector</code> by adding the difference between the elements' indices to the iterator. Iterators 
that refer to <code>list</code> elements offer no analogous facility.</p>
<p>Because different kinds of iterators offer different kinds of operations, it is important 
to understand the requirements that various algorithms place on the iterators that they 
use, and the operations that various kinds of iterators support. Whenever two iterators 
support the same operation, they give it the same name. For example, all iterators use <code>++</code> 
to cause an iterator to refer to the next element of its container.</p>
<p>Not all algorithms need all the iterator operations. Some algorithms, such as <code>find</code>, 
use very few iterator operations. We can find values using any of the container iterators 
that we've seen. Other algorithms, such as <code>sort</code>, use the most powerful operations, 
including arithmetic, on iterators. Of the types we've seen in the library, only <code>vector</code>s 
and <code>string</code>s are compatible with <code>sort</code>. (Sorting a <code>string</code> arranges its individual characters 
in nondecreasing order.)</p>
<p>The library defines five <i><b>iterator categories</b>, </i>each one of which corresponds to a specific 
collection of iterator operations. These iterator categories classify the kind of iterator that 
each of the library containers provides. Each standard-library algorithm says what category 
it expects for each iterator argument. Thus, the iterator categories give us a way to 
understand which containers can use which algorithms.</p>
<p>Each iterator category corresponds to a strategy for accessing container elements. 
Because iterator categories correspond to access strategies, they also correspond to particular 
kinds of algorithms. For example, some algorithms make only a single pass over 
their input, so they don't need iterators that can make multiple passes. Others require the 
ability to access arbitrary elements efficiently given only their indices, and, therefore, 
require the ability to add indices and integers.</p>
<p>We will now describe each access strategy, show an algorithm that uses it, and describe the corresponding iterator category.</p>
<h4>8.2.2  Sequential read-only access</h4>
<p>One straightforward way to access a sequence is to read its elements sequentially. Among 
the library functions that does so is <code>find</code>, which we can implement as</p>
<div class="prebox"><pre>
template &lt;class  In, class X&gt; In find(In begin. In end, const X&amp; x)
{
    while (begin != end &amp;&amp; *begin != x)
        ++begin;
    return begin;
}
</pre></div>
<p>If we call <code>find(begin, end, x)</code>, the result is either the first iterator <code>iter</code> in the range 
<code>[begin, end)</code> such that <code>*iter == x</code>, or <code>end</code> if no such iterator exists.</p>
<p>We know that this function accesses the elements in the range<code> [begin, end)</code> sequentially, 
because the only operation it ever uses to change the value of <code>begin</code> is <code>++</code>. In addition 
to using <code>++</code> to change the value of begin, it uses <code>!=</code> to compare <code>begin</code> and <code>end</code>, and 
<code>*</code> to access the container element to which <code>begin</code> refers. These operations are sufficient 
to read sequentially the elements to which a range of iterator values refers.</p>
<p>Although the operations are sufficient, they are not the only operations that we might 
want to use. For example, we might have implemented find this way:</p>
<div class="prebox"><pre>
template &lt;class In, class X&gt; In find(In begin, In end, const X&amp; x)
{
    if (begin == end || *begin == x)
        return begin;
    begin++;
    return  find(begin, end, x);
}
</pre></div>
<p>Although most C++ programmers would find this recursive programming style unusual, 
programmers accustomed to languages such as Lisp or ML will feel right at home. This 
version of find uses <code>begin++</code> instead of <code>++begin</code>, and <code>==</code> instead of <code>!=</code>. From these 
two examples, we can conclude that an iterator that offers sequential read-only access to 
elements of a sequence should support <code>++</code> (both prefix and postfix), <code>==, !=</code>, and unary <code>*</code>.</p>
<p>There is one other operator that such an iterator ought to support, and that is the 
equivalence between <code>iter-&gt;member</code> and <code>(*iter).member</code> that we used, for example, 
in &sect;7.2/124. There we used <code>it-&gt;first</code> as an abbreviation for <code>(*it).first</code>, and we 
would certainly like to be able to do so in general.</p>
<p>If a type provides all of these operations, we call it an <i><b>input iterator</b>. </i>Every container 
iterator that we've seen supports all these operations, so they are all input iterators. Of 
course, they support other operations as well, but that additional support does not affect 
the fact that they are input iterators.</p>
<p>When we say that find requires input iterators as its first and second arguments, we 
are saying that we can give find arguments of any type that meets the input-iterator 
requirements, including iterators that support additional operations.</p>
<h4>8.2.3 Sequential write-only access</h4>
<p>Input iterators can be used only for reading elements of a sequence. Obviously, there are 
contexts in which we would like to be able to use iterators to write elements of a sequence. 
For example, consider the copy function</p>
<div class="prebox"><pre>
template&lt;class In, class Out&gt;
Out copy(In begin, In end, Out dest)
{
    while (begin != end)
        *dest++ = *begin++;
    return dest;
}
</pre></div>
<p>This function takes three iterators; the first two denote the sequence from which to copy, 
and the third denotes the beginning of the destination sequence. We saw this same 
<code>while</code> loop in &sect;6.1/102: The function operates by advancing <code>begin</code> through the container 
until it reaches <code>end</code>, copying each element into <code>dest</code> as it goes.</p>
<p>As the name <code>In</code> suggests, <code>begin</code> and <code>end</code> are input iterators. We use them only for 
reading elements, just as we did in <code>find</code>. What about <code>Out</code>, the type of the parameter 
<code>dest</code>? Looking at the operations on <code>dest</code>, we see that in this function, we need only be 
able to evaluate <code>*dest =</code> <i>value </i>and <code>dest++</code>. As with <code>find</code>, logical completeness argues 
that we should also be able to evaluate <code>++dest</code>.</p>
<p>There is one other requirement that is less evident. Suppose it is an iterator that we 
wish to use for output only, and we execute</p>
<div class="prebox"><pre>
*it = x;
++it;
++it;
*it = y;
</pre></div>
<p>By incrementing it twice between assignments to <code>*it</code>, we have left a gap in our output 
sequence. Therefore, if we wish to use an iterator exclusively for output, there is an 
implicit requirement that we not execute <code>++it</code> more than once between assignments to 
<code>*it</code>, or assign a value to <code>*it</code> more than once without incrementing <code>it</code>.</p>
<p>If a function uses a type in a way that meets these requirements, we call that type an 
<b><i>output iterator. </i></b>All the standard containers provide iterators that meet these requirements, 
as does <code>back_inserter</code>. It is worth noting that the &quot;write-once&quot; property is a requirement 
on programs that use iterators, not on iterators themselves. That is, iterators that 
satisfy only the output-iterator requirements are required to support only programs that 
maintain that property. The iterator generated by <code>back_inserter</code> is an output iterator, 
so programs that use it must obey the &quot;write-once&quot; requirement. The container iterators 
all offer additional operations, so programs that use them are not restricted in this way.</p>
<h4>8.2.4 Sequential read-write access</h4>
<p>Suppose we want to be able to read and write the elements of a sequence, but only 
sequentially: We intend to advance iterators forward but never backward. An example of 
a library function that does so is <code>replace</code>, from the <code>&lt;algorithm&gt;</code> header:</p>
<div class="prebox"><pre>
template&lt;class For, class X&gt;
void replace(For beg, For end, const X&amp; x, const X&amp; y)
{
    while (beg != end){
        if (*beg == x)
            *beg = y; 
        ++beg;
    }
}
</pre></div>
<p>This function examines the elements in the range <code>[beg, end)</code> and replaces every element 
that is equal to <code>x</code> by <code>y</code>. It should be clear that the type <code>For</code> needs to support all the operations 
supported by an input iterator, as well as all the operations supported by an output 
iterator. Moreover, it should not need to meet the single-assignment requirement of output 
iterators, because it now makes sense to read the element value after assigning it, and 
perhaps to change it. Such a type is <i>a <b>forward iterator</b>, </i>and it is required to support</p>
<div class="prebox"><pre>
*it (for both reading and writing)
++it and it++ (but not --it or it—-)
it == j and it != j (where j has the same type as it)
it-&gt;member (as a synonym for (*it).member)
</pre></div>
<p>All the standard-library containers meet the forward-iterator requirements.</p>
<h4>8.2.5 Reversible access</h4>
<p>Some functions need to get at a container's elements in reverse order. The most straightforward 
example of such a function is <code>reverse</code>, which the standard library defines in the 
<code>&lt;algorithm&gt;</code> header</p>
<div class="prebox"><pre>
template&lt;class Bi&gt; void reverse(Bi begin, Bi end)
{
    while (begin != end) {
        --end;
        if (begin != end)
            swap(*begin++, *end);
    }
}
</pre></div>
<p>In this algorithm, we march <code>end</code> backward from the end of the <code>vector</code> and <code>beg</code> forward 
from the beginning, exchanging the elements that they reference as we go.</p>
<p>This function uses the iterators <code>begin</code> and <code>end</code> as if they were forward iterators, 
except that it also uses <code>--</code>, which is obviously the key to being able to traverse a sequence 
backward. If a type meets all the requirements of a forward iterator, and also supports <code>--</code>
(both prefix and postfix), we call it a <i><b>bidirectional iterator</b>.</i></p>
<p>The standard-library container classes all support bidirectional iterators.</p>
<h4>8.2.6 Random access</h4>
<p>Some functions need to be able to jump around in a container. One good example of such 
a function is the classical binary-search algorithm. The standard library implements this 
algorithm in several forms, the most straightforward of which is called—you guessed 
it—<code>binary_search</code>. The standard-library implementation actually uses some clever 
techniques (well beyond the scope of this book) that allow it to do binary searches on 
sequences defined by forward iterators. A simpler version, which requires random-access 
iterators, looks like this:</p>
<div class="prebox"><pre>
template&lt;class Ran, class X&gt;
bool binary_search(Ran begin, Ran end, const X&amp; x)
{
    while (begin &lt; end) {
        // <i>find the midpoint of the range</i>
        Ran mid = begin + (end - begin) / 2;
        // <i>see which part of the range contains </i>x; <i>keep looking only in that part </i>
        if (x &lt; *mid)
            end = mid;
        else if (*mid &lt; x)
            begin = mid + 1;
        // <i>if we got here, then </i>*mid == x <i>so we're done </i>
        else return true;
    }
    return false;
}
</pre></div>
<p>In addition to relying on the other usual iterator properties, this function relies on the 
ability to do arithmetic on iterators. For example, it subtracts one iterator from another to 
obtain an integer, and adds an iterator and an integer to obtain another iterator. Again, 
the notion of logical completeness adds requirements to random-access iterators. If <code>p</code> and 
<code>q</code> are such iterators, and <code>n</code> is an integer, then the complete list of additional requirements, 
beyond those for bidirectional iterators, is</p>
<div class="prebox"><pre>
p + n, p - n, and n + p
p - q
p[n] (equivalent to *(p + n))
p &lt; q, p &gt; q, p &lt;= q, and p &gt;= q
</pre></div>
<p>Subtracting two iterators yields the distance between the iterators as an integral type that 
we will discuss in &sect;10.1.4/175. We did not include <code>==</code> and <code>!=</code> in the requirements because 
random-access iterators also support the requirements on bidirectional iterators.</p>
<p>The only algorithm that we have used that requires random-access iterators is the 
<code>sort</code> function. The <code>vector</code> and <code>string</code> iterators are random-access iterators. However, 
the <code>list</code> iterator is not; it supports only bidirectional iterators. Why?</p>
<p>The essential reason is that <code>list</code>s are optimized for fast insertion and deletion. 
Hence, there is no quick way to navigate to an arbitrary element of the <code>list</code>. The only 
way to navigate through a <code>list</code> is to look at each element in sequence.</p>
<h4>8.2.7 Iterator ranges and off-the-end values</h4>
<p>As we've seen, the convention that algorithms take two arguments to specify ranges is 
nearly universal in the library. The first argument refers to the first element of the range; 
the second argument refers to <i>one past </i>the last element of the range. Why do we specify 
one past the end of the range? When is it even valid to do so?</p>
<p>In &sect;2.6/30, we saw one reason to use an upper bound for a range that is one past the 
last value in the range—namely, that if we specified the end of a range by a value equal to 
the last element, then we would be saying implicitly that the last element was special 
somehow. If the end value is treated specially, it is easy to write programs that mistakenly 
stop one iteration before the end. As far as iterators are concerned, there are at least 
three more reasons to mark the end of a range by an iterator that is one past the last element, 
instead of one that refers to the last element directly.</p>
<p>One reason is that if the range had no elements at all, there would be no last element to 
mark the end. We would then be in the curious position of having to designate an empty 
range by an iterator that refers to where the element before the beginning of the range 
would be. With that strategy, we would have to handle empty ranges differently from all 
others, which would make our programs harder to understand and less reliable. We saw 
in &sect;6.1.1/103 that treating empty ranges the same as any others simplified our program.</p>
<p>The second reason is that marking the end of a range by an iterator that is one past the 
end lets us get away with comparing iterators only for equality and inequality, and makes 
it unnecessary to define what it means for one iterator to be less than another. The point 
is that we can tell immediately if the range is empty by comparing the two iterators; the 
range is empty if and only if the iterators are equal. If they are unequal, then we know 
that the beginning iterator refers to an element, so we can do something and then increment 
that iterator to reduce the size of the range. In other words, marking ranges by the 
beginning and one past the end allows us to use loops of the form</p>
<div class="prebox"><pre>
// <i>invariant: we must still process the elements in the range </i>[begin, end)
while (begin != end) {
    // <i>do something with the element to which </i>begin <i>refers</i>
    ++begin;
}
</pre></div>
<p>and we need only to be able to do (in)equality comparisons on iterators.</p>
<p>The third reason is that defining a range by the beginning and one past the end gives 
us a natural way to indicate &quot;out of range.&quot; Many standard-library algorithms—and 
algorithms that we ourselves write—take advantage of this out-of-range value by returning 
the second iterator of a range to indicate failure. For example, our <code>url_beg</code> function 
in &sect;6.1.3/108 used this convention to signal its inability to find a URL. If the algorithms 
did not have this value available, they would have to invent one, which would complicate 
both the algorithms and the programs that use them.</p>
<p>In short, although it may seem odd to indicate the end of a range by an iterator that 
refers to one element past the end, doing so makes most programs simpler and more reliable 
than they would be otherwise. To this end, every container type is required to support 
an off-the-end value for its iterators. Each container's <code>end</code> member returns such a 
value, and that value can be the result of other iterator operations as well. For example, if 
<code>c</code> is a container, copying <code>c.begin()</code> and incrementing that copy a number of times equal 
to <code>c.size()</code> will yield an iterator that is equal to <code>c.end()</code>. The effect of dereferencing 
an off-the-end iterator is undefined, as is that of computing an iterator value that is before 
the beginning of a container, or more than one past the end.</p>
<div class="prevnext">
<a href="44.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="46.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>