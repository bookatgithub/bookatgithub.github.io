<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>8.3 Input and output iterators</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="45.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="47.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>8.3 Input and output iterators</h3>
<p>Why are input and output iterators separate categories from forward iterators if no standard 
container requires the distinction? One reason is that not all iterators are associated 
with containers. For example, if <code>c</code> is a container that supports <code>push_back</code>, then 
<code>back_inserter(c)</code> is an output iterator that meets no other iterator requirements.</p>
<p>As another example, the standard library provides iterators that can be bound to input 
and output streams. Not surprisingly, the iterators for istream meet the requirements 
for input iterators, and those for <code>ostream</code>s meet the requirements for output iterators. 
Using the appropriate stream iterator, we can use the normal iterator operations to 
manipulate an <code>istream</code> or an <code>ostream</code>. For example, <code>++</code> will advance the iterator to the 
next value in the stream. For input streams, <code>*</code> will yield the value at the current position 
in the input, and for output streams, <code>*</code> will let us write to the corresponding <code>ostream</code>. 
The stream iterators are defined in the <code>&lt;iterator&gt;</code> header.</p>
<p>The input stream iterator is an input-iterator type named <code>istream_iterator</code>:</p>
<div class="prebox"><pre>
vector&lt;int&gt; v;
// <i>read ints from the standard input and append them to </i>v
copy(istream_iterator&lt;int&gt;(cin), istream_iterator&lt;int&gt;(), 
     back_inserter(v));
</pre></div>
<p>As usual, the first two arguments to <code>copy</code> specify a range from which to copy. The first 
argument constructs a new <code>istream_iterator</code>, bound to <code>cin</code>, that expects to read values 
of type <code>int</code>. Remember that C++ input and output are typed operations: When we 
read from a stream, we always say the type of value that we expect to read, although 
those types are often implicit in the operations that do the read. For example,</p>
<div class="prebox"><pre>
getline(cin, s)                           // <i>read data into a </i>string
cin &gt;&gt; s.name &gt;&gt; s.midterm &gt;&gt; s.final;    // <i>read a </i>string <i>and two </i>doubles
</pre></div>
<p>Similarly, when we define a stream iterator, we must have a way to tell it what type it 
should read from or write to the stream. Accordingly, the stream iterators are templates.</p>
<p>The second argument to <code>copy</code> creates a default (empty) <code>istream_iterator&lt;int&gt;</code>, 
which is not bound to any file. The <code>istream_iterator</code> type has a default value with 
the property that any <code>istream_iterator</code> that has reached end-of-file or is in an error 
state will appear to be equal to the default value. Therefore, we can use the default value 
to indicate the &quot;one-past-the-end&quot; convention for copy.</p>
<p>We can now see that the call to <code>copy</code> will read values from the standard input until we 
hit end-of-file or an input that is not valid as an <code>int</code>.</p>
<p>We cannot use an <code>istream_iterator</code> for writing. If we wish to write, we need an 
<code>ostream_iterator</code>, which is the iterator type whose objects we use for output:</p>
<div class="prebox"><pre>
// <i>write the elements of v each separated from the other by a space</i>
copy(v.begin(), v.end(), ostream_iterator&lt;int&gt;(cout, &quot; &quot;));
</pre></div>
<p>Here we copy the entire <code>vector</code> onto the standard output. The third argument constructs 
a new iterator bound to <code>cout</code>, which expects to write values of type <code>int</code>.</p>
<p>The second argument used to construct the <code>ostream_iterator&lt;int&gt;</code> object specifies 
a value to be written after each element. Typically, this value is a string literal. If we 
do not supply such a value, the <code>ostream_iterator</code> will write values without any separation. 
Therefore, if we omit the separator, a call to copy will run all the values together 
into one unreadable mess:</p>
<div class="prebox"><pre>
// <i>no separation between elements!</i>
copy(v.begin(), v.end(), ostream_iterator&lt;int&gt;(cout));
</pre></div>
<div class="prevnext">
<a href="45.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="47.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>