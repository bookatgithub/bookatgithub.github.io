<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>8.4 Using iterators for flexibility</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="46.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="48.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>8.4 Using iterators for flexibility</h3>
<p>We can make a slight improvement in the <code>split</code> function that we presented in 
&sect;6.1.1/103. As written, the <code>split</code> function returns a <code>vector&lt;string&gt;</code>, which is limiting: 
Instead of a <code>vector</code>, our users might want a <code>list&lt;string&gt;</code> or another kind of container. 
Nothing about the <code>split</code> algorithm requires that we produce a <code>vector</code>.</p>
<p>We can be more flexible by rewriting <code>split</code> to take an output iterator instead of 
returning a value. In this version of the function, we'll use that iterator to write the words 
that we find. Our caller will have bound the iterator to the output location where the values 
should be placed:</p>
<div class="prebox"><pre>
template &lt;class Out&gt;                           // <i>changed</i>
void split(const string&amp; str, Out os) {        //  <i>changed</i>

    typedef string::const_iterator iter;

    iter i = str.begin();
    while (i != str.end()) {
        // <i>ignore leading blanks</i>
        i = find_if(i, str.end(), not_space);

        // <i>find end of next word</i>
        iter j = find_if(i, str.end(), space);

        // copy the characters in [i, j)
        if (i != str.end())
            *os++ = string(i, j);       // <i>changed</i>

        i = j;
    }
}
</pre></div>
<p>Like the <code>write_analysis</code> function that we wrote in &sect;6.2.2/113, our new version of 
<code>split</code> has nothing to return, so we say that its return type is <code>void</code>. We have now made 
<code>split</code> a template function that takes a single type parameter <code>Out</code>, the name of which 
suggests an output iterator. Recall that because forward, bidirectional, and random-access 
iterators meet all the output-iterator requirements, we can use our <code>split</code> with any 
kind of iterator except a pure input iterator such as <code>istream_iterator</code>.</p>
<p>The parameter <code>os</code> is of type <code>Out</code>. We will use it to write the values of the words as we 
find them. We do so near the end of the function</p>
<div class="prebox"><pre>
*os++ = string(i, j);      // <i>changed</i>
</pre></div>
<p>which writes the word that we just found. The subexpression <code>*os</code> denotes the current 
position in the container to which <code>os</code> is bound, so we assign the value of <code>string(i, j)</code> 
to the element at that position. Having done the assignment, we increment <code>os</code> so that we 
meet the output-iterator requirements, and so that the next trip through the loop will 
assign a value to the next container element.</p>
<p>Programmers who wish to use this revised <code>split</code> function will have to change their 
programs, but now we can write the words into almost any container. For example, if <code>s</code> is 
the <code>string</code> whose words we want to append to a <code>list</code> called <code>word_list</code>, then we 
could call <code>split</code> as follows:</p>
<div class="prebox"><pre>
split(s, back_inserter(word_list));
</pre></div>
<p>Similarly, we can write a trivial program to test our split program:</p>
<div class="prebox"><pre>
int main()
{
    string s;
    while (getline(cin, s))
        split(s, ostream_iterator&lt;string&gt;(cout, &quot;\n&quot;));
    return 0;
}
</pre></div>
<p>Like the driver function that we wrote in &sect;5.7/90, this function calls <code>split</code> to separate the 
input line into separate words, and writes those words onto the standard output. We 
write to <code>cout</code> by passing to <code>split</code> an <code>ostream_iterator&lt;string&gt;</code> that we bind to 
<code>cout</code>. When <code>split</code> assigns to <code>*os</code>, it will be writing to <code>cout</code>.</p>
<div class="prevnext">
<a href="46.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="48.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>
