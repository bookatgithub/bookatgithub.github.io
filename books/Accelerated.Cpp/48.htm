<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>8.5 Details</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="47.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="49.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>8.5 Details</h3>
<p><b>Template functions </b>that return simple types have the form</p>
<div class="details">
<code>template&lt;class <i>type-parameter [, </i>class <i>type-parameter]... </i>&gt;</code><br />
<code><i>ret-type function-name (parameter-list)</i></code>
</div>
<p>Each <i>type-parameter </i>is a name that may be used inside the function definition wherever a 
type is required. Each of these names should be used in the function <i>parameter-list </i>to 
name the type of one or more parameters.</p>
<p>If the types do not all appear in the argument list, then the caller must qualify the 
<i>function-name </i>with the actual types that cannot be inferred. For example,</p>
<div class="prebox"><pre>
template&lt;class T&gt; T zero() { return 0; }
</pre></div>
<p>defines <code>zero</code> to be a template function with a single type parameter, which is used to 
name the return type. In calling this function, we must supply the return type explicitly:</p>
<div class="prebox"><pre>
double x = zero&lt;double&gt;();
</pre></div>
<p>The <code>typename</code> keyword must be used to qualify declarations that use types that are 
defined by the template type parameters. For example,</p>
<div class="prebox"><pre>
typename T::size_type <i>name;</i>
</pre></div>
<p>declares <i><code>name</code> </i>to have type <code>size_type</code>, which must be defined as a type inside <code>T</code>.</p>
<p>The implementation automatically instantiates a separate instance of the template 
function for each set of types used in a call to the function.</p>
<p><b>Iterators:</b> A key contribution of the C++ standard library is the idea that algorithms can 
achieve data-structure independence by using iterators as the glue between algorithms 
and containers. Furthermore, the realization that algorithms can be factored based on the 
operations that are required for the iterators that they use means that it is easy to match 
a container with the algorithms that can be used on it.</p>
<p>There are five iterator categories. In general, the later categories subsume the operations 
in the earlier ones:</p>
<div class="prebox"><pre>
<i>Input iterator:</i>           Sequential access in one direction, input only
<i>Output iterator:</i>          Sequential access in one direction, output only
<i>Forward iterator:</i>         Sequential access in one direction, input and output
<i>Bidirectional iterator:</i>   Sequential access in both directions, input and output
<i>Random-access iterator:</i>   Efficient access to any element, input and output
</pre></div>
<h4>Exercises</h4>
<p><b>8-0.</b> Compile, execute, and test the programs in this chapter.</p>
<p><b>8-1.</b> Note that the various <code>analysis</code> functions we wrote in &sect;6.2/110 share the same behavior; 
they differ only in terms of the functions they call to calculate the final grade. Write a template 
function, parameterized by the type of the grading function, and use that function to 
evaluate the grading schemes.</p>
<p><b>8-2.</b> Implement the following library algorithms, which we used in Chapter 6 and described in 
&sect;6.5/121. Specify what kinds of iterators they require. Try to minimize the number of distinct 
iterator operations that each function requires. After you have finished your implementation, 
see &sect;B.3/321 to see how well you did.</p>
<div class="prebox"><pre>
equal(b, e, d)                 search(b, e, b2, e2)
find(b, e, t)                  find_if(b, e, p)
copy(b, e, d)                  remove_copy(b, e, d, t)
remove_copy_if(b, e, d, p)     remove(b, e, t)
transform(b, e, d, f)          partition(b, e, p)
accumulate(b, e, t)
</pre></div>
<p><b>8-3.</b> As we learned in &sect;4.1.4/58, it can be expensive to return (or pass) a container by value. Yet 
the <code>median</code> function that we wrote in &sect;8.1.1/140 passes the <code>vector</code> by value. Could we 
rewrite the <code>median</code> function to operate on iterators instead of passing the <code>vector</code>? If we 
did so, what would you expect the performance impact to be?</p>
<p><b>8-4.</b> Implement the <code>swap</code> function that we used in &sect;8.2.5/148. Why did we call <code>swap</code> rather than 
exchange the values of <code>*beg</code> and <code>*end</code> directly? <i>Hint: </i>Try it and see.</p>
<p><b>8-5.</b> Reimplement the <code>gen_sentence</code> and <code>xref</code> functions from Chapter 7 to use output iterators 
rather than writing their output directly to a <code>vector&lt;string&gt;</code>. Test these new versions by 
writing programs that attach the output iterator directly to the standard output, and by storing 
the results in a <code>list&lt;string&gt;</code> and a <code>vector&lt;string&gt;</code>.</p>
<p><b>8-6.</b> Suppose that <code>m</code> has type <code>map&lt;int, string&gt;</code>, and that we encounter a call to 
<code>copy(m.begin(), m.end(), back_inserter(x))</code>. What can we say about the type of 
<code>x</code>? What if the call were <code>copy(x.begin(), x.end(), back_inserter(m))</code> instead?</p>
<p><b>8-7. </b> Why doesn't the <code>max</code> function use two template parameters, one for each argument type?</p>
<p><b>8-8.</b> In the <code>binary_search</code> function in &sect;8.2.6/148, why didn't we write <code>(begin + end) / 2</code> 
instead of the more complicated <code>begin + (end - begin) /2</code>?</p>
<div class="prevnext">
<a href="47.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="49.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>
