<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Defining new types</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="48.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="50.htm"><img src="images/Next1.gif" /></a>
</div>
<div class="chapname">
<h1>9</h1>
</div>
<div id="chapter">
<h2>Defining new types</h2>
</div>
<p>C++ has two kinds of types: built-in types and class types. Built-in types, so called 
because they are defined as part of the core language, include <code>char, int</code>, and <code>double</code>. 
The types that we've used from the library, such as <code>string, vector</code>, and <code>istream</code>, are 
all class types. Except for some of the low-level, system-specific routines in the 
input-output library, the library classes rely only on the same language facilities that any 
programmer can use to define application-specific types.</p>
<p>Much of the design of C++ rests on the idea of letting programmers create types that 
are as easy to use as are the built-in types. As we shall see, the ability to create types with 
straightforward, intuitive interfaces requires substantial language support, as well as taste 
and judgment in class design. We'll start by using the grading problem from Chapter 4 as 
a way of exploring the most fundamental class-definition facilities. Starting in Chapter 11, 
we will build on these basic concepts by looking at how we can build types that are as 
complete as the ones that the library offers.</p>
<div class="prevnext">
<a href="48.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="50.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>