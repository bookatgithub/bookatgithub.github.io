<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>0.8 Details</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="4.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="6.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>0.8 Details</h3>
<p>Although the program we've written is simple, we've covered a lot of ground in this 
chapter. We intend to build on what we've introduced here, so it is important for you to 
be sure that you understand this chapter fully before you continue.</p>
<p>To help you do so, this chapter-and every chapter except Chapter 16-ends with a 
section called <i>Details</i> and a set of exercises. The <i>Details</i> sections summarize and occasionally 
expand on the information in the text. It is worth looking at each <i>Details</i> section as a 
reminder of the ideas that the chapter introduced.</p>
<p><b>Program structure:</b> C++ programs are usually in <i><b>free form</b></i>, meaning that spaces are 
required only when they keep adjacent symbols from running together. In particular, 
newlines (i.e., the way in which the implementation represents the change from one line 
of the program to the next) are just another kind of space, and usually have no additional 
special meaning. Where you choose to put spaces in a program can make it much 
easier-or harder-to read. Programs are normally indented to improve readability.<br />
&nbsp; &nbsp;There are three entities that are not free-form:</p>
<p><code>string literals</code></p>
<div class="details">
characters enclosed in double quotes; may not span lines
</div>
<p><code>#include <i>name</i></code></p>
<div class="details">
must appear on a line by themselves (except for comments)
</div>
<p><code>// <i>comments</i></code></p>
<div class="details">
<code>//</code> followed by anything; ends at the end of the current line
</div>
<p>A comment that begins with <code>/*</code> is free-form; it ends with the first subsequent <code>*/</code> and can 
span multiple lines.</p>
<p><b>Types</b> define data structures and operations on those data structures. C++ has two kinds 
of types: those built into the core language, such as <code>int</code>, and those that are defined outside 
the core language, such as <code>std::ostream</code>.</p>
<p><b>Namespaces</b> are a mechanism for grouping related names. Names from the standard 
library are defined in the namespace called <code>std</code>.</p>
<p><b>String literals</b> begin and end with double quotes (<code>&quot;</code>); each string literal must appear 
entirely on one line of the program. Some characters in string literals have special meaning 
when preceded by a backslash (<code>\</code>):</p>
<p><code>\n</code>&nbsp; &nbsp; &nbsp; newline character</p>
<p><code>\t</code>&nbsp; &nbsp; &nbsp; tab character</p>
<p><code>\b</code>&nbsp; &nbsp; &nbsp; backspace character</p>
<p><code>\</code>&quot;&nbsp; &nbsp; &nbsp; treats this symbol as part of the string rather than as the string terminator</p>
<p><code>\'</code>&nbsp; &nbsp; &nbsp; &nbsp;same meaning as <code>'</code> in string literals, for consistency with character literals (&sect;1.2/14)</p>
<p><code>\\</code>&nbsp; &nbsp; &nbsp; includes a <code>\</code> in the string, treating the next character as an ordinary character</p>
<p>We'll see more about string literals in &sect;10.2/176 and &sect;A.2.1.3/302.</p>
<p><b>Definitions and headers:</b> Every name that a C++ program uses must have a corresponding 
definition. The standard library defines its names in headers, which programs access 
through <code>#include</code>. Names must be defined before they are used; hence, a <code>#include</code> 
must precede the use of any name from that header. The <code>&lt;iostream&gt;</code> header defines the 
library's input-output facilities.</p>
<p><b>The main function:</b> Every C++ program must define exactly one function, named <code>main</code>, 
that returns an <code>int</code>. The implementation runs the program by calling <code>main</code>. A zero 
return from <code>main</code> indicates success; a nonzero return indicates failure. In general, functions 
must include at least one <code>return</code> statement and are not permitted to fall off the end 
of the function. The <code>main</code> function is special: It may omit the return; if it does so, the 
implementation will assume a zero return value. However, explicitly including a return 
from <code>main</code> is good practice.</p>
<p><b>Braces and semicolons:</b> These inconspicuous symbols are important in C++ programs. 
They are easy to overlook because they are small, and they are important because forgetting 
one typically evokes compiler diagnostic messages that may be hard to understand.</p>
<p>A sequence of zero or more statements enclosed in braces is a statement, called a <i><b>block</b></i>, 
which is a request to execute the constituent statements in the order in which they appear. The 
body of a function must be enclosed in braces, even if it is only a single statement. 
The statements between a pair of matching braces constitute a scope.</p>
<p>An expression followed by a semicolon is a statement, called an <i><b>expression statement</b></i>, 
which is a request to execute the expression for its side effects and discard its result. The 
expression is optional; omitting it results in a <i><b>null statement</b></i>, which has no effect.</p>
<p><b>Output:</b> Evaluating <code>std::cout &lt;&lt; e</code> writes the value of <code>e</code> on the standard-output 
stream, and yields <code>std::cout</code>, which has type <code>ostream</code>, as its value in order 
to allow chained output operations.</p>

<h3>Exercises</h3>
<p><b>0-0.</b> Compile and run the <code>Hello, world!</code>  program.</p>
<p><b>0-1.</b> What does the following statement do?<br />
<div class="prebox">
<pre></pre>3 + 4;</div></p>
<p><b>0-2.</b> Write a program that, when run, writes<br />
<div class="prebox"><pre>This (&quot;) is a quote, and this (\) is a backslash.
</pre></div></p>
<p><b>0-3.</b> The string literal <code>&quot;\t&quot;</code> represents a tab character; different C++ implementations display 
tabs in different ways. Experiment with your implementation to learn how it treats tabs.</p>
<p><b>0-4.</b> Write a program that, when run, writes the <code>Hello, world!</code> program as its output.</p>
<p><b>0-5.</b> Is this a valid program? Why or why not?
<div class="prebox"><pre>
#include &lt;iostream&gt;
int main()   std::cout &lt;&lt; &quot;Hello, world!&quot; &lt;&lt; std::endl;
</pre></div></p>
<p><b>0-6.</b> Is this a valid program? Why or why not?</p>
<div class="prebox"><pre>
#include &lt;iostream&gt;
int main()   {{{{{{ std::cout &lt;&lt; &quot;Hello, world!&quot; &lt;&lt; std::endl; }}}}}}
</pre></div>
<p><b>0-7.</b> What about this one?</p>
<div class="prebox"><pre>
#include &lt;iostream&gt;

int main() 
{
    /* <i>This is a comment that extends over several lines
        because it uses /* and */ as its starting and ending delimiters </i>*/
    std::cout &lt;&lt; &quot;Does this work?&quot; &lt;&lt; std::endl;
    return 0; 
}
</pre></div>
<p><b>0-8.</b> ...and this one?</p>
<div class="prebox"><pre>
#include &lt;iostream&gt;
int main()
{
    // This is a comment that extends over several lines
    // by using // at the beginning of each line instead of using /*
    // or */ to delimit comments.
    std::cout &lt;&lt; &quot;Does this work?&quot; &lt;&lt; std::endl;
    return 0;
}
</pre></div>
<p><b>0-9.</b> What is the shortest valid program?</p>
<p><b>0-10.</b> Rewrite the <code>Hello, world!</code>  program so that a newline occurs everywhere that whitespace is allowed in the program.</p>
<div class="prevnext">
<a href="4.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="6.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>