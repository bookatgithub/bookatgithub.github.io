<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>9.2 Class types</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="50.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="52.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>9.2 Class types</h3>
<p>At its most fundamental level, a class type is a mechanism for combining related data values 
into a data structure, so that we can treat that data structure as a single entity. For 
example, the <code>Student_info</code> structure that we built in &sect;4.2.1/61,</p>
<div class="prebox"><pre>
struct Student_info {
std::string name;
double midterm, final;
std::vector&lt;double&gt; homework;
}
</pre></div>
<p>let us define and manipulate objects of type <code>Student_info</code>. Each object of this type has 
four data elements: a <code>std::string </code>named name, a <code>std::vector&lt;double&gt;</code> named 
<code>homework</code>, and two <code>double</code>s named <code>midterm</code> and <code>final</code>.</p>
<p>As it stands, programmers who use the <code>Student_info</code> type may—and must— 
manipulate these data elements directly. They may manipulate the data directly because 
the definition of <code>Student_info</code> has not restricted access to the data elements. They 
must do so because no other operations are available on <code>Student_info</code>.</p>
<p>Rather than letting users access the data directly, we would like to hide the implementation 
details of how <code>Student_info</code>s are stored. In particular, we want to require the 
type's users to access objects only through functions. To do so, we first need to provide 
the users with convenient operations for manipulating <code>Student_info</code> objects. These 
operations will form the interface to our class.</p>
<p>Before looking at these functions, it is worth reviewing why we are using the fully 
qualified names for <code>std::string</code> and <code>std::vector</code>, rather than assuming that a 
<code>using</code>-declaration that allowed us to access the names directly had been made. Code 
that wants to use our <code>Student_info</code> structure must have access to the class definition, 
so we will put the definition in a header file. As we pointed out in &sect;4.3/67, code that is 
intended for use by others should contain the minimal number of declarations necessary. 
Obviously, we must define the name <code>Student_info</code>, because that is the name we want 
users to use. The fact that <code>string</code> and <code>vector</code> are used by <code>Student_info</code> is an implementation 
artifact. There is no reason to force <code>using</code>-declarations on users of 
<code>Student_info</code> just because we use these types in the implementation.</p>
<p>In our programming examples, and as a matter of good practice, we use the qualified 
names in code that goes into header files, but we will continue to assume that the corresponding 
source files contain appropriate <code>using</code>-declarations. Therefore, when we write 
program text that we intend to appear outside a header file, we will generally not use 
fully qualified names.</p>
<h4>9.2.1 Member functions</h4>
<p>In order to control access to <code>Student_info</code> objects, we need to define an interface that 
programmers can use. Let's start by defining operations to <code>read</code> a record and to calculate 
the overall grade:</p>
<div class="prebox"><pre>
struct Student_info {
    std::string name;
    double midterm, final;
    std::vector&lt;double&gt; homework;

    std::istream&amp; read(std::istream&amp;);     // <i>added </i>
    double grade() const;                  // <i>added</i>
};
</pre></div>
<p>We still say that each <code>Student_info</code> object has four data elements, but we've also given 
<code>Student_info</code> two member functions. These member functions will let us <code>read</code> a 
record from an input stream and calculate the final <code>grade</code> for any <code>Student_info</code> object. 
The <code>const</code> on the declaration of <code>grade</code> is a promise that calling the <code>grade</code> function will 
not change any of the data members of the <code>Student_info</code> object.</p>
<p>We first discussed member functions in &sect;1.2/14 when we talked about using the <code>size</code> 
member of class <code>string</code>. Essentially, a member function is a function that is a member of 
a class object. In order to call a member function, our users must nominate the object of 
which the function to be called is a member. So, analogous to calling <code>greeting.size()</code> 
for a <code>string</code> object named <code>greeting</code>, our users will call <code>s.read(cin)</code> or <code>s.grade()</code> 
on behalf of a <code>Student_info</code> object named <code>s</code>. The call <code>s.read(cin)</code> will read values 
from the standard input and set the state of s appropriately. The call <code>s.grade()</code> will calculate 
and return the final grade for <code>s</code>.</p>
<p>The definition of the first of our member functions looks a lot like the original version 
of <code>read</code> in &sect;4.2.2/62:</p>
<div class="prebox"><pre>
istream&amp; Student_info::read(istream&amp; in)
{
    in &gt;&gt; name &gt;&gt; midterm &gt;&gt; final;
    read_hw(in, homework);
    return in;
}
</pre></div>
<p>As we did originally, we would put these functions in a common source file named 
<code>Student_info.cpp, Student_info.C</code>, or <code>Student_info.c</code>. The important point is 
that the declarations for these functions are now part of our <code>Student_info</code> structure, so 
they must be available to all users of the <code>Student_info</code> class.</p>
<p>There are three important comparison points between this code and the original:</p>
<ol>
<li>The name of the function is <code>Student_info::read</code> instead of plain <code>read</code>.</li>
<li>Because this function is a member of a <code>Student_info</code> object, we do not need to pass 
a <code>Student_info</code> object as an argument, or to define a <code>Student_info</code> object at all.</li>
<li>We access the data elements of our object directly.  For example, in &sect;4.2.2/62, we 
referred to <code>s.midterm</code>; here we refer to just <code>midterm</code>.</li>
</ol>
<p>We will explain each of these differences in turn.</p>
<p>The <code>::</code> in the function name is the same scope operator that we have already used, as 
far back as &sect;0.7/5, to access names that the standard library defines. For example, 
we wrote <code>string::size_type </code>to get the name <code>size_type</code> that is a member of class 
<code>string</code>. Similarly, by writing <code>Student_info::read</code>, we are defining the function, 
named <code>read</code>, that is a member of the <code>Student_info</code> type.</p>
<p>This member function requires only an <code>istream&amp;</code> parameter, because the 
<code>Student_info&amp;</code> parameter will be implicit in any call. Remember that when we call a 
function that is a member of a <code>vector</code> or <code>string</code> object, we must say which <code>vector</code> or 
<code>string</code> we want. For example, if <code>s</code> is a <code>string</code>, then we write <code>s.size()</code> to call the 
<code>size</code> member of object <code>s</code>. There is no way to call the <code>size</code> function from class <code>string</code> 
without nominating a <code>string</code> object. In the same way, when we call the <code>read</code> function, 
we will have to say explicitly into which <code>Student_info</code> object we're reading. That 
object is implicitly used in the <code>read</code> function.</p>
<p>The references to the members inside <code>read</code> are unqualified because they are references 
to members of the object on which we are operating. In other words, if we call 
<code>s.read(cin)</code> for a <code>Student_info</code> object named <code>s</code>, then we are operating on object <code>s</code>. 
When <code>read</code> uses <code>midterm, final</code>, and <code>homework</code>, it will be using <code>s.midterm, 
s final</code>, and <code>s.homework</code> respectively.</p>
<p>Now let's look at the grade member:</p>
<div class="prebox"><pre>
double Student_info::grade() const
{
    return ::grade(midterm, final, homework);
}
</pre></div>
<p>This version resembles the version in &sect;4.2.2/63, and differs from it in ways analogous to 
the differences in <code>read</code>: We define <code>grade</code> as a member of <code>Student_info</code>, the function 
takes an implicit rather than an explicit reference to a <code>Student_info</code> object, and it 
accesses the members of that object without any qualification.</p>
<p>This code contains two more important differences. First, note the call to <code>::grade</code>. 
Putting <code>::</code> in front of a name insists on using a version of that name that is not a member 
of anything. In this case, we need the <code>::</code> so that the call will reach the version of <code>grade</code> 
that takes two <code>double</code>s and a <code>vector&lt;double&gt;</code>, which we defined in &sect;4.1.2/54. Without 
it, the compiler would think that we were referring to <code>Student_info::grade</code>, and 
would complain because we tried to call it with too many arguments.</p>
<p>The other important difference is the use of <code>const</code> immediately after <code>grade</code>'s parameter 
list. We can understand this usage by comparing our new function declaration with the original:</p>
<div class="prebox"><pre>
double Student_info::grade() const { ... }         //  <i>member-function version </i>
double grade(const Student_info&amp;) { ... }          //  <i>original from &sect;4.2.2/63</i>
</pre></div>
<p>In the original function, we passed the <code>Student_info</code> as a reference to <code>const</code>. By doing 
so, we ensured that we could ask for the <code>grade</code> of a <code>const Student_info</code> object, and 
that the compiler would complain if the <code>grade</code> function tried to change its parameter.</p>
<p>When we call a member function, the object of which it is a member is not an argument. 
Therefore, there is no entry in the parameter list in which we might be able to say 
that the object is <code>const</code>. Instead, we qualify the function itself, thereby making it a 
<b>const <i>member function. </i></b>Member functions that are <code>const</code> may not change the internal 
state of the object on which they are executing: We are guaranteed that if we call 
<code>s.grade()</code> on behalf of a <code>Student_info</code> object named <code>s</code>, doing so will not change the 
data members of <code>s</code>.</p>
<p>Because the function guarantees that it will not change the values in the object, we can 
call it for <code>const</code> objects. By the same token, we cannot call non<code>const</code> functions on 
<code>const</code> objects, so, for example, we cannot call the <code>read</code> member on behalf of a <code>const 
Student_info</code> object. After all, a function such as <code>read</code> says that it can change the 
object's state. Calling such a function on a <code>const</code> object could violate our <code>const</code> promise.</p>
<p>It is important to note that even if a program never creates any <code>const</code> objects directly, 
it may create lots of references to <code>const</code> objects through function calls. When we pass a 
non<code>const</code> object to a function that takes a <code>const</code> reference, then the function treats that 
object as if it were <code>const</code>, and the compiler will permit it to call only <code>const</code> members of 
such objects.</p>
<p>Note that we included the <code>const</code> qualifier in both the declaration of the function 
inside the class definition and in the definition of the function. As always, argument 
types must be identical between the function declaration and definition (&sect;4.4/69).</p>
<h4>9.2.2  Nonmember functions</h4>
<p>Our new design made <code>read</code> and <code>grade</code> into member functions. What about <code>compare</code>? 
Should it also be a member of the class?</p>
<p>As we'll see in &sect;9.5/164, &sect;11.2.4/193, &sect;11.3.2/196, &sect;12.5/222, and &sect;13.2.1/234, the C++ 
language requires certain kinds of functions to be defined as members. It turns out that 
<code>compare</code> is not one of these, so we have the option to do it either way. There is a general 
rule that helps us decide what to do in such cases: If the function changes the state of an 
object, then it ought to be a member of that object. Unfortunately, even this rule says 
nothing about functions that do not change the state of the object, so we still must decide 
what to do about <code>compare</code>.</p>
<p>To do so, we should think a bit about what the function does and how users might 
want to call it. The <code>compare</code> function decides which of its <code>Student_info</code> arguments is
 &quot;less than&quot; the other, based on inspecting the arguments' name members. We'll see in 
 &sect;12.2/213 that there is sometimes an advantage to defining operations such as <code>compare</code> 
 outside the class body. Therefore, we shall leave <code>compare</code> as a global function, which we 
 will implement shortly.</p>
 <div class="prevnext">
<a href="50.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="52.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>