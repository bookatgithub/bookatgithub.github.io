<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>9.3 Protection</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="51.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="53.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>9.3 Protection</h3>
<p>By defining the <code><code>grade</code></code> and <code><code>read</code></code> functions as members, we have fixed half of our problem: 
Users of type <code>Student_info</code> no longer <i>have </i>to manipulate the internal state of the 
object directly. However, they still <i>can </i>do so. We would like to hide the data, and allow 
users to access the data only through our member functions.</p>
<p>C++ supports data hiding by allowing authors of types to say which members of those 
types are <b>public, </b>and hence accessible to all users of the type, and which parts are 
<b>private, </b>and inaccessible to users of the type:</p>
<div class="prebox"><pre>
class Student_info {
public:
    // <i>interface goes here</i>
    double grade() const;
    std::istream&amp; read(std::istream&amp;);

    private:
    // <i>implementation goes here</i>
    std::string name;
    double midterm, <code>final</code>;
    std::vector&lt;double&gt; homework;
};
</pre></div>
<p>We've made a couple of changes to our definition of <code>Student_info</code>: We've said <b>class </b>
instead of <code>struct</code>, and we've added two <i><b>protection labels</b>. </i>Each protection label defines 
the accessibility of all the members that follow the label. Labels can occur in any order 
within the class, and can occur multiple times.</p>
<p>By putting name, <code>homework</code>, <code>midterm</code>, and <code>final</code> after a <code>private</code> label, we have 
made these data elements inaccessible to users of the <code>Student_info</code> type. References to 
these members from nonmember functions are now illegal, and the compiler will generate 
a diagnostic message to the effect that the member is private or inaccessible. The members 
in the public section are fully available; any user may call <code>read</code> or <code>grade</code>.</p>
<p>What about the use of <code>class</code> instead of <code>struct</code>? We can use either keyword to 
define a new type. The <i>only </i>difference between saying <code>struct</code> and <code>class</code> is the default 
protection, which applies to every member defined before the first protection label. If we 
say <code>class Student_info</code>, then every member between the first <code>{</code> and the first protection 
label is <code>private</code>. If, instead, we write <code>struct Student_info</code>, then every member 
declared between the <code>{</code> and the first protection label is public. For example,</p>
<div class="prebox"><pre>
class Student_info {
public:
    double grade() const;
    //<i> etc</i>.
};
</pre></div>
<p>is equivalent to</p>
<div class="prebox"><pre>
struct Student_info {
    double grade() const;   // <i>public by default</i>
    // <i>etc.</i>
};
</pre></div>
<p>and</p>
<div class="prebox"><pre>
class Student_info {
    std::string name;          // private <i>by default</i>
    // <i>other private members</i> 
public:
    double grade() const;
    // <i>other public members</i>
};
</pre></div>
<p>is equivalent to</p>
<div class="prebox"><pre>
struct Student_info {
private:
    std::string name;
    //<i> other private members</i>
public:
    double grade() const;
    // <i>other public members</i>
};
</pre></div>
<p>In each of these definitions, we're saying that we'll allow users to get at the member functions 
of <code>Student_info</code> objects, but we will not allow them to access the data members.</p>
<p>There is no difference between what we can do with a <code>struct</code> or a <code>class</code>. In fact, 
there is no way, short of reading the code, for our users to distinguish whether we used 
<code>struct</code> or <code>class</code> to define our class type. Our choice of <code>struct</code> or <code>class</code> can have a 
useful documentation role. In general, our programming style is to reserve <code>struct</code> to 
denote simple types whose data structure we intend to expose. For that reason, we used 
<code>struct</code> to define our original <code>Student_info</code> data type in Chapter 4. Now that we 
intend to build a type that will control access to its members, we use class to define our <code>Student_info</code> type.</p>
<h4>9.3.1 Accessor functions</h4>
<p>At this point, we've hidden our data members, so that users can no longer modify the 
data in a <code>Student_info</code> object. Instead, they must use the <code>read</code> operation to set the 
data members, and the <code>grade</code> function to find out the <code>final</code> <code>grade</code> for a given 
<code>Student_info</code>. There's one more operation that we must still provide: We must give 
users a way to get at the student's name. For example, think a bit about the program in 
&sect;4.5/70, in which we wrote a formatted report of student <code>grade</code>s. That program needs to 
access the student's name in order to generate the report. Although we want to allow 
<code>read</code> access, we do not want to allow write access. Doing so is straightforward:</p>
<div class="prebox"><pre>
class Student_info {
public:
double grade() const;
    std::istream&amp; read(std::istream&amp;)          // <i>must change definition</i>
    std::string name() const { return n; }     // <i>added</i>
private:
    std::string n;                             // <i>changed</i>
    double midterm, final;
    std::vector&lt;double&gt; homework;
};
</pre></div>
<p>Instead of giving our users access to the <code>name</code> data member, we've added a member function, 
also named <code>name</code>, that will give (read-only) access to the corresponding data value. 
Of course, we have to change the data member's name to avoid confusing it with the 
name of the function.</p>
<p>The <code>name</code> function is a <code>const</code> member function, which takes no arguments and which 
returns a <code>string</code> that is a copy of <code>n</code>. By copying <code>n</code>, rather than returning a reference to it, 
we ensure that users can read but not change the value of<code> </code>n. Because we need only read 
access to the data, we declare the member function as <code>const</code>.</p>
<p>When we defined <code>grade</code> and <code>read</code>, we did so outside the class definition. When we 
define a member function as part of the class definition, as we have done here with the 
<code>name</code> function, we are hinting to the compiler that it should avoid function-call overhead 
and expand calls to the function inline (&sect;4.6/72) if possible.</p>
<p>Functions such as <code>name</code> are often called <i><b>accessor functions</b>. </i>This nomenclature is potentially 
misleading, because it implies that we are granting access to a part of our data structure. 
Indeed, historically, such functions were often introduced to allow easy access to 
hidden data, thus breaking the encapsulation that we were trying to achieve. Accessors 
should be provided only when they are part of the abstract interface of the class. In the 
case of <code>Student_info</code>, our abstraction is that of a student and a corresponding final 
grade. Therefore, the notion of a student name is part of our abstraction, and it is fitting 
to provide a <code>name</code> function. On the other hand, we do not provide accessors to the other 
grades—<code>midterm</code>, <code>final</code>, or <code>homework</code>. These grades are an essential part of our 
implementation, but they are not part of our interface.</p>
<p>Having added the name member function, we can now write the compare function:</p>
<div class="prebox"><pre>
bool compare(const Student_info&amp; x, const Student_info&amp; y)
{
    return x.name() &lt; y.name();
}
</pre></div>
<p>This function looks a lot like the version from &sect;4.2.2/64. The only difference is how we 
get at the student's name. In the original version, we could access the data member 
directly; here, we must invoke the <code>name</code> function, which returns the student's name. 
Because <code>compare</code> is part of our interface, we should include a declaration for this function 
in the same header that defines <code>Student_info</code> and we should include this definition 
in the associated source file that contains the definitions of the member functions.</p>
<h4>9.3.2 Testing for empty</h4>
<p>Having hidden our members and provided the appropriate accessor function, we have 
one remaining problem: There is still a reason that a user might want to look directly at an 
object's data. For example, consider what happens if we call <code>grade</code> on an object for 
which <code>read</code> has not been called:</p>
<div class="prebox"><pre>
Student_info s;
cout &lt;&lt; s.grade() &lt;&lt; endl;    // <i>exception: s has no data</i>
</pre></div>
<p>Because we haven't called <code>read</code> to give s any values, the <code>homework</code> member of <code>s</code> will be 
empty, and the call to <code>grade</code> will throw an exception. Although our users can <code>catch</code> the 
exception, they have no way to detect the problem in advance, so that they can avoid 
making the call at all.</p>
<p>Using the original <code>Student_info</code> structure from Chapter 4, users could test the 
<code>homework</code> member to determine whether a call to <code>grade</code> would succeed. If <code>homework</code> 
turned out to be empty, then they knew not to call <code>grade</code>. This approach worked, but at 
the cost of forcing users to know about the structure of the object in order to perform the 
test. We can do better, by offering the same test in a more abstract form:</p>
<div class="prebox"><pre>
class Student_info {
public:
    bool valid() const { return !homework.empty(); }
   // <i>as before</i>
};
</pre></div>
<p>The <code>valid</code> function will tell the user whether the object contains valid data, with a value 
of <code>true</code> indicating that the student did at least one homework assignment, and therefore 
that it is possible to compute the student's grade. Our users can call <code>valid</code> to determine 
whether subsequent operations will succeed. For example, before calling <code>grade</code>, a user 
can check whether the object is <code>valid</code>, thereby avoiding a potential exception.</p>
<div class="prevnext">
<a href="51.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="53.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>