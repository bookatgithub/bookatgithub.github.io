<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>9.4 The Student_info class</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="52.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="54.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>9.4 The Student_info class</h3>
<p>At this point we have resolved most of our objections to the original <code>Student_info</code> 
structure, so it is worth reviewing what we've done:</p>
<div class="prebox"><pre>
class Student_info {
public:
    std::string name() const { return n; }
    bool valid() const { return !homework.empty(); }

    //<i> as defined in &sect;9.2.1/157, and changed to read into n instead of name</i>
    std::istream&amp; read(std::istream&amp;);

    double grade() const;           // <i>as defined in &sect;9.2.1/158</i>
private:
    std::string n;
    double midterm, final;
    std::vector&lt;double&gt; homework;
};
bool compare(const Student_info&amp;, const Student_info&amp;);
</pre></div>
<p>Users can change the state of a <code>Student_info</code> object only by calling the <code>read</code> member 
function. They cannot reach inside an object and directly change any of the data members. 
Instead, we provide operations that hide our implementation. Finally, all the operations 
on <code>Student_info</code> objects are logically gathered together.</p>
<div class="prevnext">
<a href="52.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="54.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>