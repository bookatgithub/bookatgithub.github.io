<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>9.5 Constructors</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="53.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="55.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>9.5 Constructors</h3>
<p>Although our class is reasonably complete and usable as it stands, there is one more thing 
to think about: We have not said anything about what happens when objects are created.</p>
<p>We know that the library guarantees that when we create an object of a library class, 
the object starts with an appropriate value. For example, when we define a <code>string</code> or a 
<code>vector</code> without an initial value, we get an empty <code>string</code> or <code>vector</code>. Both <code>string</code> and 
<code>vector</code> also allow us to give a new object an initial value, such as specifying a size or a 
count and a fill character.</p>
<p><i><b>Constructors </b></i>are special member functions that define how objects are initialized. 
There is no way to call a constructor explicitly. Instead, creating an object of class type 
calls the appropriate constructor automatically as a side effect.</p>
<p>If we do not define any constructors, the compiler will synthesize one for us. We'll 
have more to say about synthesized operations in &sect;11.3.5/201. What we need to know 
now is what happens if we do not define any constructors. In this case, our users will be 
able to define <code>Student_info</code> objects, but will not be able to initialize them explicitly, 
except as a copies of other <code>Student_info</code> objects.</p>
<p>The synthesized constructor will initialize the data members to a value that depends 
on how the object is being created. If the object is a local variable, then the data members 
will be be default-initialized (&sect;3.1/38). If the object is used to initialize a container element, 
either as a side effect of adding a new element to a <code>map</code>, or as the elements of a container 
defined to have a given size, then the members will be value-initialized (&sect;7.2/125). 
These rules are slightly complicated, but their essentials are:</p>
<ul>
<li>If an object is of a class type that defines one or more constructors, then the appropriate 
constructor completely controls initialization of the objects of that class.</li>
<li>If an object is of built-in type, then value-initializing it sets it to zero, and default-
initializing it gives it an undefined value.</li>
<li>Otherwise, the object can be only of a class type that does not define any constructors. 
In that case, value- or default-initializing the object value- or default-initializes each of 
its data members. This initialization process will be recursive if any of the data members 
is of a class type with its own constructor.</li>
</ul>
<p>As it stands, our <code>Student_info</code> class is in this third category: It is a class type, but we do 
not explicitly say how to construct <code>Student_info</code> objects. So, if we define a local 
<code>Student_info</code> variable, then the <code>n</code> and <code>homework</code> members will be automatically initialized 
to the empty <code>string</code> and <code>vector</code> respectively, because they are class objects 
with constructors. In contrast, default-initializing <code>midterm</code> and <code>final</code> will give them 
undefined values, meaning they will hold whatever garbage happens to be in memory 
when the object is created.</p>
<p>Given our simple operations, this behavior may appear harmless: None of our operations 
uses the value of <code>midterm</code> or <code>final</code> without first initializing the object by calling 
<code>read</code>, which assigns values to these members. However, it is normally good practice to 
ensure that every data member has a sensible value at all times. For example, it is possible 
that later we (or a subsequent maintainer of our code) will add operations that examine 
these data members. If we don't initialize them in the constructor, then these new 
operations might cause future failures. Moreover, as we'll see in &sect;11.3.5/201, even though 
we do not explicitly use <code>midterm</code> or <code>final</code>, there are synthesized operations on the class 
that could do so. Any use other than writing to an undefined value is illegal (&sect;3.1/38), 
and so, strictly speaking, we must initialize these values.</p>
<p>In practice, we'll want to define two constructors: The first constructor takes no arguments 
and creates an empty <code>Student_info</code> object; the second takes a reference to an 
input stream and initializes the object by reading a student record from that stream. This 
strategy allows our users to write code such as</p>
<div class="prebox"><pre>
Student_info s;           //  <i>an empty</i> Student_info
Student_info s2(cin);     //  <i>initialize s2 by reading from</i> cin
</pre></div>
<p>Constructors are distinguished from other member functions in two ways: They have 
the same name as the name of the class itself, and they have no return type. Constructors 
are similar to other functions in that we can define multiple versions of constructors that 
differ in terms of the number or type of their arguments. With this knowledge, we might 
update our class to add our two constructors:</p>
<div class="prebox"><pre>
class Student_info {
public:
    Student_info()                 // <i>construct an empty Student_info object</i>
    Student_info(std::istream&amp;);   // <i>construct one by reading a stream </i>
    //<i> as before</i>
};
</pre></div>
<h4>9.5.1 The default constructor</h4>
<p>The constructor that takes no arguments is known as the <i><b>default constructor</b>. </i>Its job is normally 
to ensure that its object's data members are properly initialized. In the case of 
<code>Student_info</code> objects, we want to initialize the data to indicate that we haven't yet read 
a record: We'll want the <code>homework</code> member to be an empty <code>vector</code>, the <code>n</code> member to be 
an empty <code>string</code>, and the <code>midterm</code> and <code>final</code> members to be initialized to zero:</p>
<div class="prebox"><pre>
Student_info::Student_info(): midterm(O), final(0) { }
</pre></div>
<p>The constructor definition uses some new syntax. Between the <code>:</code> and the <code>{</code> is a sequence 
of <i><b>constructor initializers</b>, </i>which tell the compiler to initialize the given members with the 
values that appear between the corresponding parentheses. Therefore, this particular 
default constructor works by explicitly setting the <code>midterm</code> and <code>final</code> grades to 0. 
Other than that, the constructor does no overt work: The body of the function is empty. As we shall see, <code>n</code> and <code>homework</code> are implicitly initialized.</p>
<p>Understanding constructor initializers is crucial to understanding how to create and initialize objects. 
When we create a new class object, several steps happen in sequence:</p>
<ol>
<li>The implementation allocates memory to hold the object.</li>
<li>It initializes the object, as directed by the constructor's initializer list.</li>
<li>It executes the constructor body.</li>
</ol>
<p>The implementation initializes every data member of every object, regardless of whether 
the constructor initializer list mentions those members. The constructor body may <i>change</i> 
these initial values subsequently, but the initialization happens before the constructor 
body begins execution. It is usually better to give a member an initial value explicitly, 
rather than assigning to it in the body of the constructor. By initializing rather than 
assigning a value, we avoid doing the same work twice.</p>
<p>We said that constructors exist to ensure that objects are created with their data members 
in a sensible state. In general, this design goal means that every constructor should 
initialize every data member. The need to give members a value is especially critical for 
members of built-in type. If the constructor fails to initialize such members, objects 
declared at local scope will be initialized with garbage, which is almost never correct.</p>
<p>We can now understand why we said that the <code>Student_info</code> default constructor did 
no other &quot;overt&quot; work. Although we explicitly initialized only <code>midterm</code> and <code>final</code>, the 
other data members are initialized implicitly. Specifically, <code>n</code> is initialized by the <code>string</code> 
default constructor, and <code>homework</code> is initialized by the <code>vector</code> default constructor.</p>
<h4>9.5.2 Constructors with arguments</h4>
<p>Our second <code>Student_info</code> constructor is even easier:</p>
<div class="prebox"><pre>
Student_info::Student_info(istream&amp; is) { read(is); }
</pre></div>
<p>This constructor delegates the real work to the <code>read</code> function. The constructor has no 
explicit initializer, so the <code>homework</code> and <code>n</code> members will be initialized by the default constructors 
for <code>vector</code> and <code>string</code> respectively. The <code>midterm</code> and <code>final</code> members will 
have explicit initial values only if the object is being value-initialized. This lack of initialization 
doesn't matter, because read immediately gives these variables new values.</p>
<div class="prevnext">
<a href="53.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="55.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>