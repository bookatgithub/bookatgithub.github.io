<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>9.6 Using the Student_info class</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="54.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="56.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>9.6 Using the Student_info class</h3>
<p>Our new <code>Student_info</code> class is now quite different from the original <code>Student_info</code> 
structure from Chapter 4. Not surprisingly, using the class is different from using the 
original structure. After all, our objective was to prevent users from being able to change 
our data values, which we accomplished by making them <code>private</code>. Instead, we intend 
for users to write their programs in terms of the interface provided by our class. As an 
example, we can rewrite our original <code>main</code> program from &sect;4.5/70, which wrote the final 
grades for the students in a formatted report, to use this version of the class:</p>
<div class="prebox"><pre>
int main()
{
    vector&lt;Student_info&gt; students;
    Student_info record;
    string::size_type maxlen = 0;

    // <i>read and store the data</i>
    while (record.read(cin)) {                      //  <i>changed</i>
        maxlen = max(maxlen, record.name().size())  //  <i>changed</i>
        students.push_back(record);
    }

    // <i>alphabetize the student records</i>
    sort(students.begin(), students.end(), compare);

    // <i>write the names and grades</i>
    for (vector&lt;Student_info&gt;::size_type i = 0;
         i != students.size(); ++i) {
        cout &lt;&lt; students[i].name()                        // <i>changed</i>
             &lt;&lt; string(maxlen + 1 - students[i].name.size(), ' ');
        try {
            double final_grade = students[i].grade();     // <i>changed</i>
            streamsize prec = cout.precision();
            cout &lt;&lt; setprecision(3) &lt;&lt; final_grade
                 &lt;&lt; setprecision(prec) &lt;&lt; endl;
        } catch (domain_error e) {
            cout &lt;&lt; e.what() &lt;&lt; endl;
        }
    }
    return 0;
}
</pre></div>
<p>The changes here are to the calls of <code>name, read</code>, and <code>grade</code>. So, for example, the first 
<code>while</code> loop now says</p>
<div class="prebox"><pre>
while (record.read(cin)) {
</pre></div>
<p>instead of</p>
<div class="prebox"><pre>
while (read(cin, record)) {
</pre></div>
<p>Our revised version calls the member <code>read</code> of the object <code>record</code>. The earlier version 
called the global <code>read</code> function, passing it <code>record</code> as an explicit parameter. Both calls 
have the same effect: The object <code>record</code> will be assigned values read from <code>cin</code>.</p>
<div class="prevnext">
<a href="54.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="56.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>