<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>9.7 Details</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="55.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="57.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>9.7 Details</h3>
<p><b>User-defined types </b>can be defined as either <code>struct</code>s or <code>class</code>es. The only difference is 
in the default protection that applies to members defined before the first protection label: 
Members defined after struct are <code>public</code>; those defined after class are <code>private</code>.</p>
<p><b>Protection labels </b>control access to members of a class type: <code>public</code> members are generally 
accessible; <code>private</code> members are accessible only to members of the class. Protection 
labels can appear in any order and multiple times within a class.</p>
<p><b>Member functions: </b>Types may define member functions as well as data. Member functions 
are implicitly called on behalf of a specific object. References to member data or 
functions from within a member function are implicitly bound to that object.</p>
<p>Member functions can be defined inside or outside the class definition. Defining a 
member function inside the class asks the implementation to expand calls to it inline, thus 
avoiding function call overhead. Outside the class, the name of the function must be qualified 
to indicate that it is from the class scope: <i>class-name::member-name </i>refers to the 
member <i>member-name </i>from the class <i>class-name.</i></p>
<p>Member functions can be defined as <code>const</code> by inserting the <code>const</code> keyword after the 
parameter list. Such members may not change the state of the object on which they are 
invoked. Only <code>const</code> member functions may be called for <code>const</code> objects.</p>
<p><b>Constructors </b>are special member functions that define how objects of the type are initialized. 
Constructors have the same name as the class and have no return value. A class can 
define multiple constructors as long as they differ in the number or types of their arguments. 
It is good practice for every constructor to ensure that every data member has a 
sensible value on exit from the constructor.</p>
<p><b>Constructor initializer list: </b>A constructor initializer is a comma-separated list of <i>member-
name (value) </i>pairs. Each <i>member-name </i>is initialized from the associated <i>value. </i>Data members 
that are not explicitly initialized are implicitly initialized.</p>
<p>The order in which members are initialized is determined by the order of declaration 
in the class, so care must be taken when using one class member to initialize another. It is 
safer practice to avoid such interdependence by assigning values to these members inside 
the constructor body and not initializing them in the constructor initializer.</p>
<h4>Exercises</h4>
<p><b>9-0.</b> Compile, execute, and test the programs in this chapter.</p>
<p><b>9-1.</b> Reimplement the <code>Student_info</code> class so that it calculates the final <code>grade</code> when reading the 
student's record, and stores that grade in the object. Reimplement the <code>grade</code> function to use 
this precomputed value.</p>
<p><b>9-2.</b> If we define the <code>name</code> function as a plain, non<code>const</code> member function, what other functions 
in our system must change and why?</p>
<p><b>9-3.</b> Our <code>grade</code> function was written to throw an exception if a user tried to calculate a grade for 
a <code>Student_info</code> object whose values had not yet been read. Users who care are expected 
to catch this exception. Write a program that triggers the exception but does not catch it. 
Write a program that catches the exception.</p>
<p><b>9-4.</b> Rewrite your program from the previous exercise to use the <code>valid</code> function, thereby avoiding 
the exception altogether.</p>
<p><b>9-5.</b> Write a class and associated functions to generate grades for students who take the course 
for pass/fail credit. Assume that only the midterm and final grades matter, and that a student 
passes with an average exam score greater than 60. The report should list the 
students in alphabetical order, and indicate P or F as the grade.</p>
<p><b>9-6.</b> Rewrite the grading program for the pass/fail students so that the report shows all the students 
who passed, followed by all the students who failed.</p>
<p><b>9-7.</b> The <code>read_hw</code> function &sect;4.1.3/57 solves a general problem (reading a sequence of values into 
a <code>vector</code>) even though its name suggests that it should be part of the implementation of 
<code>Student_info</code>. Of course, we could change its name—but suppose, instead, that you 
wanted to integrate it with the rest of the <code>Student_info</code> code, in order to clarify that it was 
not intended for public access despite its apparent generality? How would you do so?</p>
<div class="prevnext">
<a href="55.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="57.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>
