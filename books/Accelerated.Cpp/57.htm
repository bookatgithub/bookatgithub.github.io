<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Managing memory and low-level data structures</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="56.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="58.htm"><img src="images/Next1.gif" /></a>
</div>
<div class="chapname">
<h1>10</h1>
</div>
<div id="chapter">
<h2>Managing memory and low-level data structures</h2>
</div>
<p>Until now, we have been storing data either in variables or in containers, such as <code>vector</code>, 
that come from the standard library. The reason for this strategy is that the standard-
library facilities are usually more flexible and easier to use than the facilities that are part 
of the core language.</p>
<p>Once you know how to use the library, the logical next step is to understand how it 
works. The key to this understanding turns out to involve core-language programming 
tools and techniques that come in handy in other contexts as well. We use the term <i><b>low-
level</b> </i>to refer to these ideas because they underlie the standard library and because they 
correspond closely to the way typical computer hardware works. For these reasons, they 
tend to be harder to use, and are more dangerous, but they sometimes can be more 
efficient—provided that you understand them thoroughly—than are the related ideas in 
the standard library. Because no library can solve all problems, many C++ programs 
wind up using low-level techniques from time to time.</p>
<p>This chapter departs from our usual style of presenting problems before their solutions, 
because the tools that we are going to present work at a low enough level that it is 
hard to use any one tool by itself to solve useful problems. Instead, we are going to begin 
by presenting two related ideas: arrays and pointers. Once we have done so, we'll show 
how those ideas combine with <code>new</code>-expressions and <code>delete</code>-expressions to allow a form 
of dynamic memory allocation that programmers can control more directly than they can 
control the automatic memory management offered by library classes such as <code>vector</code> 
and <code>list</code>.</p>
<p>Once we understand how arrays and pointers work, we will explore, in Chapter 11, 
how the library uses these facilities to implement its containers.</p>
<div class="prevnext">
<a href="56.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="58.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>