<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>10.1 Pointers and arrays</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="57.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="59.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>10.1 Pointers and arrays</h3>
<p>An array is a kind of container, similar to a <code>vector</code> but less powerful. A pointer is a kind 
of random-access iterator that is essential for accessing elements of arrays, and has other 
uses as well. Pointers and arrays are among the most primitive data structures in C and 
C++. They are virtually inseparable from one another, in the sense that it is impossible to 
do anything useful with an array without using pointers, and pointers become much 
more useful in the presence of arrays.</p>
<p>Because these two notions are so closely intertwined, we shall explain them both 
before trying to solve significant problems with either. It is easier to explain pointers 
without understanding arrays than to explain arrays without understanding pointers, so 
we shall discuss pointers first.</p>
<h4>10.1.1 Pointers</h4>
<p>A <i><b>pointer</b> </i>is a value that represents the <i><b>address</b> </i>of an object. Every distinct object has a 
unique address, which denotes the part of the computer's memory that contains the 
object. If you can access an object, you can obtain its address, and vice versa. For example, 
if <code>x</code> is an object, then <code>&amp;x</code> is the address of that object, and if <code>p</code> is the address of an 
object, then <code>*p</code> is the object itself. The <code>&amp;</code> in <code>&amp;x</code> is an <i><b>address operator</b>, </i>and is distinct from 
the use of <code>&amp;</code> to define reference types (&sect;4.1.2/54). The <code>*</code> is a <i><b>dereference operator</b>, </i>which 
works analogously to the way <code>*</code> works when applied to any other iterator (&sect;5.2.2/81). If <code>p</code> 
contains the address of <code>x</code>, we also say that <code>p</code> is a <i><b>pointer</b> </i>that <i><b>points to</b> </i>x. It is common to 
represent such a state of affairs with a diagram such as</p>
<center>
<img src="images/170.jpg" />
</center>
<p>As with other built-in types, a local variable that is a pointer has no meaningful value 
until we give it one. Programmers frequently use the value 0 to initialize pointers, 
because converting 0 to a pointer yields a value that is guaranteed to be distinct from a 
pointer to any object. Moreover, the constant 0 is the only integer value that can be converted 
to a pointer type. The resulting value, often called a <i><b>null pointer</b>, </i>is often useful in 
comparisons.</p>
<p>As with all C++ values, pointers have types. The address of an object of type <code>T</code> has 
type &quot;pointer to <code>T</code>,&quot; written as <code>T*</code> in definitions and similar contexts.</p>
<p>Suppose that x is an object of type <code>int</code>, defined as</p>
<div class="prebox"><pre>
int x;
</pre></div>
<p>and we want to define <code>p</code> to have a type that will allow <code>p</code> to contain the address of <code>x</code>. We 
do so by saying that the type of <code>p</code> is &quot;pointer to <code>int</code>,&quot; which we say implicitly by defining 
<code>*p</code> to have type <code>int</code>:</p>
<div class="prebox"><pre>
int *p;          // *p <i>has type </i>int
</pre></div>
<p>Here <code>*p</code> is a <i><b>declarator</b>, </i>which is the part of a definition that defines a single variable. 
Even though the <code>*</code> and the <code>p</code> are part of a single declarator, most C++ programmers write 
this definition as</p>
<div class="prebox"><pre>
int* p;          // p <i>has type </i>int*
</pre></div>
<p>to emphasize the notion that <code>p</code> has a particular type (i.e., <code>int*</code>). These two usages are 
equivalent because spaces around the <code>*</code> are neutral. However, the latter usage conceals a 
pitfall that is so important that it deserves special attention:</p>
<div class="prebox"><pre>
int* p, q;       // <i>What does this definition mean?</i>
</pre></div>
<p>defines <code>p</code> as an object of type &quot;pointer to <code>int</code>&quot; and <code>q</code> as an object of type <code>int</code>. This example 
is easier to understand if we view it this way:</p>
<div class="prebox"><pre>
int  *p, q;      // *p <i>and </i>q <i>have type </i>int
</pre></div>
<p>or, for that matter, this way:</p>
<div class="prebox"><pre>
int (*p), q;     // (*p) <i>and </i>q <i>have type </i>int
</pre></div>
<p>Still better, we can make our intentions crystal clear by writing</p>
<div class="prebox"><pre>
int* p;          // *p <i>has type </i>int
int q;           // q <i>has type </i>int
</pre></div>
<p>We now know enough to write a simple program that uses pointers:</p>
<div class="prebox"><pre>
int main()
{
    int x = 5;

    // p <i>points to x </i>
    int* p = &amp;x;
    cout &lt;&lt; &quot;x = &quot; &lt;&lt; x &lt;&lt; endl;

    // <i>change the value of </i>x <i>through </i>p
    *p = 6;
    cout &lt;&lt; &quot;x = &quot; &lt;&lt; x &lt;&lt; endl;
    return 0;
}
</pre></div>
<p>The output of this program will be</p>
<div class="prebox"><pre>
x = 5
x = 6
</pre></div>
<p>Immediately after we have defined <code>p</code>, the state of our variables is</p>
<center>
<img src="images/171.jpg" />
</center>
<p>It should be no surprise that <code>x</code> is 5 when we execute the first output expression. The next 
statement changes the value of <code>x</code> to 6 by executing <code>*p = 6</code>. Remember, once <code>p</code> contains 
the address of <code>x, *p</code> and <code>x</code> are two different ways of referring to the same object. Thus, 
the <code>x</code> is 6 when the second output expression is executed.</p>
<p>It may be useful to think of a pointer to an object as an iterator that refers to the only 
element of a &quot;container&quot; that contains that object and nothing else.</p>
<h4>10.1.2 Pointers to functions</h4>
<p>In &sect;6.2.2/113, we saw a program that passed a function as an argument to another function, 
and noted that there was slightly more going on there than met the eye. The truth is 
that functions are not objects, and there is no way to copy or assign them, or to pass them 
as arguments directly. In particular, there is no way for a program to create or modify a 
function—only the compiler can do that. All that a program can ever do with a function is 
call it or take its address.</p>
<p>Nevertheless, we can call a function with another function as an argument, as we did 
when we passed <code>median_analysis</code> as an argument to <code>write_analysis</code> in &sect;6.2.2/112. 
What happens is that the compiler quietly translates such calls so as to use pointers to 
functions instead of using functions directly. Pointers to functions behave similarly to any 
other pointers. Once you have dereferenced such a pointer, however, all you can do with 
the resulting function is call it—or take the function's address yet again.</p>
<p>Declarators for pointers to functions resemble other declarators. For example, just as 
we wrote</p>
<div class="prebox"><pre>
int *p;
</pre></div>
<p>to say that <code>*p</code> has type <code>int</code>, thereby implying that p is a pointer, we might write</p>
<div class="prebox"><pre>
int (*fp)(int);
</pre></div>
<p>to say that if we dereference <code>fp</code>, and call it with an <code>int</code> argument, the result has 
type <code>int</code>. By implication, <code>fp</code> is a pointer to a function that takes an <code>int</code> argument and 
returns an <code>int</code> result.</p>
<p>Because all that you can do with a function is to take its address or call it, any use of a 
function that is not a call is assumed to be taking its address, even without an explicit <code>&amp;</code>. 
Similarly, you can call a pointer to a function without dereferencing the pointer explicitly. 
So, for example, if we have a function whose type matches <code>fp</code>, such as</p>
<div class="prebox"><pre>
int next(int n)
{
    return n + 1;
}
</pre></div>
<p>then we can make <code>fp</code> point to <code>next</code> by writing either of the following two statements:</p>
<div class="prebox"><pre>
// <i>these two statements are equivalent </i>
fp = &amp;next;
fp = next;
</pre></div>
<p>Similarly, if we have an <code>int</code> variable named <code>i</code>, we can use <code>fp</code> to call <code>next</code>, and thereby 
increment <code>i</code>, by writing either</p>
<div class="prebox"><pre>
// <i>these two statements are equivalent </i>
i = (*fp)(i);
i = fp(i);
</pre></div>
<p>Finally, if we write a function that looks like it takes another function as a parameter, the 
compiler quietly translates the parameter to be a pointer to a function instead. So, for 
example, in the <code>write_analysis</code> function in &sect;6.2.2/113, the parameter that we wrote as</p>
<div class="prebox"><pre>
double analysis(const vector&lt;Student_info&gt;&amp;)
</pre></div>
<p>could equivalently have been written as</p>
<div class="prebox"><pre>
double (*analysis)(const vector&lt;Student_info&gt;&amp;)
</pre></div>
<p>However, this automatic translation does not apply to return values from functions. If we 
wanted to write a function that returned a function pointer, of the same type as the 
parameter to <code>write_analysis</code>, then we would have to say explicitly that the function 
returns a pointer. One way to do so is to begin by using a <code>typedef</code> to define, say, 
<code>analysis_fp</code> as the name of the type of an appropriate pointer:</p>
<div class="prebox"><pre>
typedef double (*analysis_fp)(const <code>vector</code>&lt;Student_info&gt;&amp;); 
</pre></div>
<p>Then we can use that type to declare our function:</p>
<div class="prebox"><pre>
// get_analysis_ptr <i>returns a pointer to an analysis function </i>
analysis_fp get_analysis_ptr();
</pre></div>
<p>The alternative</p>
<div class="prebox"><pre>
double (*get_analysis_ptr())(const vector&lt;Student_info&gt;&amp;);
</pre></div>
<p>is arcane. In effect, we are saying that if you call <code>get_analysis_ptr()</code>, and dereference 
the result, what you get is a function that takes a const <code>vector&lt;Student_info&gt;&amp;</code> 
and returns a <code>double</code>. Fortunately, functions that return pointers to functions are rare! 
We use this syntax nowhere else in this book, but we explain it in more detail in &sect;A.l/295. 
Pointers to functions are most commonly used as arguments to other functions. As an 
example, here is a sample implementation of the <code>find_if</code> library function:</p>
<div class="prebox"><pre>
template&lt;class In, class Pred&gt;
In find_if(In begin, In end, Pred f)
{
    while (begin != end &amp;&amp; !f(*begin))
        ++begin;
    return begin;
}
</pre></div>
<p>In this example, <code>Pred</code> can potentially be any type at all, as long as <code>f(*begin)</code> has a 
meaningful value. Suppose we have a predicate function, such as</p>
<div class="prebox"><pre>
bool is_negative(int n)
{
    return n &lt; 0;
}
</pre></div>
<p>and we use <code>find_if</code> to locate the first negative element in a <code>vector&lt;int&gt;</code> named <code>v</code>: 
<div class="prebox"><pre>
vector&lt;int&gt;::iterator i = find_if(v.begin(), v.end(), is_negative);
</pre></div>
<p>We are able to write <code>is_negative</code> instead of <code>&amp;is_negative</code> only because the name of a 
function turns into a pointer to the function automatically. Similarly, the implementation 
of <code>find_if</code> is permitted to call <code>f(*beg)</code> instead of <code>(*f)(*beg)</code> only because calling a 
function pointer automatically calls the function to which it points.</p>
<h4>10.1.3 Arrays</h4>
<p>An <i><b>array</b> </i>is a kind of container that is part of the core language rather than part of the 
standard library. Every array contains a sequence of one or more objects of the same type. 
The number of elements in the array must be known at compile time, which requirement 
implies that arrays cannot grow or shrink dynamically the way library containers do.</p>
<p>Because arrays are not class types, they have no members. In particular, they do not 
have the <code>size_type</code> member to name an appropriate type to deal with the size of an 
array. Instead, the <code>&lt;cstddef&gt;</code> header defines <b>size_t, </b>which is a more general type. 
The implementation defines <code>size_t</code> as the appropriate <code>unsigned</code> type large enough to 
hold the size of any object. Thus, we can (and should) use <code>size_t</code> to refer to the size of 
an array, similarly to the way we use <code>size_type</code> to deal with the size of a container.</p>
<p>For example, a three-dimensional geometry program might represent a point this way:</p>
<div class="prebox"><pre>
double coords[3];
</pre></div>
<p>knowing that the number of dimensions in physical space is unlikely to change any time 
soon. A more experienced programmer might represent the point this way:</p>
<div class="prebox"><pre>
const size_t NDim = 3;
double coords[NDim];
</pre></div>
<p>taking advantage, for documentation purposes, of the fact that the value of <code>NDim</code> is 
known at compilation time (because it is a <code>const size_t</code> that is initialized from a constant). 
Using <code>NDim</code> instead of 3 distinguishes the 3 that represents the number of dimensions 
from a 3 that represents, say, the number of sides in a triangle.</p>
<p>No matter how we define an array, there is always a fundamental relationship 
between arrays and pointers: Whenever we use the name of an array as a value, that name 
represents a pointer to the initial element of the array. We have defined <code>coords</code> as an 
array, so using <code>coords</code> as a value gives us the address of the array's initial element. As 
with any other pointer, we can dereference it with the <code>*</code> operator to get the object to 
which it points, so that executing</p>
<div class="prebox"><pre>
*coords = 1.5; 
</pre></div>
<p>sets the initial element of <code>coords</code> to 1. 5.</p>
<h4>10.1.4 Pointer arithmetic</h4>
<p>We now know how to define arrays, and how to obtain the address of the initial element 
of an array. What about the other elements? Recall that in &sect;10.1/169 we said that a 
pointer was a kind of iterator. More specifically, a pointer is a random-access iterator. 
This fact gives us a second fundamental property of arrays: If <code>p</code> points to the <code>m</code>th element 
of an array, then<code> p + n</code> points to the <code>(m + n)</code>th element of the array and <code>(p - n)</code> points to 
the <code>(m - n)</code>th element—assuming, of course, that these elements exist.</p>
<p>Continuing our example, and noting that, as usual, the initial element of <code>coords</code> has 
number 0, we see that <code>coord + 1</code> is the address of element number 1 of the <code>coords</code> array 
(i.e., the element after the initial element), and <code>coords + 2</code> is the address of element number 
2, which is also the last element because we defined <code>coords</code> to have three elements.</p>
<p>What about <code>coords + 3</code>? That value represents the address of where element number 
3 would be in the <code>coords</code> array if the element existed—but the element doesn't exist.</p>
<p>Nevertheless, <code>coords + 3</code> is a valid pointer, even though it doesn't point to an element. 
Analogous with <code>vector</code> and <code>string</code> iterators, adding <code>n</code> to the address of the initial 
element of an <code>n</code>-element array yields an address that is not guaranteed to be the 
address of any object, but it is one that we can use for comparisons. Moreover, the rules 
that relate <code>p, p + n</code>, and <code>p - n</code> are valid even if one or more of those expressions yields a 
value that is one (but not more than one) past the end of an array.</p>
<p>So, for example, we can copy the contents of <code>coords</code> into a <code>vector</code> by writing</p>
<div class="prebox"><pre>
vector&lt;double&gt; v;
copy(coords, coords + NDim, back_inserter(v));
</pre></div>
<p>where, as before, <code>NDim</code> is just a fancy way of spelling 3. In this example, <code>coords + NDim</code> 
does not point to an element, but it is a valid off-the-end iterator, and passing it as the second 
argument to copy presents no difficulty.</p>
<p>As another example, because we can construct a <code>vector</code> from two iterators, we could 
have constructed v directly as a copy of the elements in <code>coords</code> by writing</p>
<div class="prebox"><pre>
vector&lt;double&gt; v(coords, coords + NDim);
</pre></div>
<p>In other words, suppose that <code>a</code> is an <code>n</code>-element array, that <code>v</code> is a <code>vector</code>, and that we 
want to apply standard-library algorithms to elements of <code>a</code>. Then, wherever we 
might use <code>v.begin()</code> and <code>v.end()</code> to give standard-library algorithms access to elements of 
<code>v</code>, we should use <code>a</code> and <code>a + n</code> as arguments when we wish to apply these algorithms to 
the elements of <code>a</code>.</p>
<p>If <code>p</code> and <code>q</code> are pointers to elements of the same array, then <code>p - q</code> is an integer that represents 
the distance in elements between <code>p</code> and <code>q</code>. More precisely, <code>p - q</code> is defined so that 
<code>(p - q) + q </code>is equal to <code>p</code>. Because <code>p - q</code> might be negative, it has a signed integer type. 
Whether that type is <code>int</code> or <code>long</code> depends on the implementation, so the library provides 
a synonym, named <b><code>ptrdiff_t</code>, </b>to represent the appropriate type. Like <code>size_t</code>, the 
<code>ptrdiff_t</code> type is defined in the <code>&lt;cstddef&gt;</code> header.</p>
<p>We saw in &sect;8.2.7/150 that there is no guarantee of being able to compute an iterator 
that refers to a point before the beginning of a container. Analogously, it is never legitimate 
to compute an address that falls before the beginning of an array. In other words, 
if <code>a</code> is an <code>n</code>-element array, then <code>a+i</code> is valid if and only if <code>0 &le; i &le; n</code>, and <code>a+i</code> refers to an element 
of <code>a</code> if and only if <code>0 &le; i &lt; n</code> (but not if <code>i</code> and <code>n</code> are equal).</p>
<h4>10.1.5 Indexing</h4>
<p>We said in &sect;10.1/169 that pointers are random-access iterators for arrays. Therefore, like 
all random-access iterators, they support indexing. Specifically, if <code>p</code> points to the <code>m</code>th element 
of an array, <code>p[n]</code> is the <code>m+n</code>th element of the array—not the address of the element, 
but the element itself.</p>
<p>Recall from &sect;10.1.3/174 that the name of an array is the address of the initial element 
of the array. This fact, together with the definition of <code>p[n]</code>, implies that if <code>a</code> is an array, 
<code>a[n]</code> is the <code>n</code>th element of the array. More formally, if <code>p</code> is a pointer and <code>n</code> is an integer, 
then <code>p[n]</code> is equivalent to <code>*(p + n)</code>.</p>
<p>In most languages, the behavior of indexing is fundamental and obvious. In C++, 
this behavior is not a direct property of arrays. Rather, it is a corollary to the properties of 
array names and pointers, and the fact that pointers supply the operations defined for 
random-access iterators.</p>
<h4>10.1.6 Array initialization</h4>
<p>Arrays have an important property that the standard-library containers do not share: 
There is a convenient syntax for giving an initial value to each element of an array. Moreover, 
using this syntax often lets us avoid having to state the size of the array explicitly.</p>
<p>For example, if we were writing a program that deals with dates, we might like to 
know how many days are in each month. One way to do so would be the following:</p>
<div class="prebox"><pre>
const int month_lengths[] = {
    31,  28,  31,  30,  31,  30,    //<i> we will deal elsewhere with leap years</i>
    31,  31,  30,  31,  30,  31
};
</pre></div>
<p>Here, we have given an initial value to each element that corresponds to the length of a 
month, with January being month 0 and December being month 11. Now, we can use 
<code>month_lengths[i]</code> to refer to the length of month i.</p>
<p>Note that we did not say explicitly how many elements the <code>month_lengths</code> array 
has. Because we initialized it explicitly, the compiler will count elements for us—a task to 
which it is much better suited than we.</p>
<div class="prevnext">
<a href="57.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="59.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>
