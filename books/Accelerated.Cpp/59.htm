<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>10.2 String literals revisited</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="58.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="60.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>10.2 String literals revisited</h3>
<p>We have finally learned enough to understand the true meaning of string literals: A string 
literal is really an array of <code>const char</code> with one more element than the number of characters 
in the literal. That extra character is a null character (i.e., <code>'\0'</code>) that the compiler 
automatically appends to the rest of the characters. In other words, if we define</p>
<div class="prebox"><pre>
const char hello[] = { 'H', 'e', 'l', 'l', 'o', '\0' };
</pre></div>
<p>then the variable <code>hello</code> has exactly the same meaning as the string literal &quot;Hello&quot;, 
except, of course, that the variable and the literal are two distinct objects and, therefore, 
have different addresses.</p>
<p>The reason that the compiler inserts the null character is to allow the programmer to 
locate the end of the literal given only the address of its initial character. The null character 
acts as an end marker, so that the programmer can know where the string ends. There 
is a library function in <code>&lt;cstring&gt;</code> called <code>strlen</code>, which tells us how many characters 
are in a string literal or other null-terminated array of characters, <i>not counting the null at 
the end. </i>The <code>strlen</code> function might be implemented as follows:</p>
<div class="prebox"><pre>
// <i>Example implementation of standard-library function</i>
size_t strlen(const char* p)
{
    size_t size = 0;
    while (*p++ != '\0')
        ++size;
    return size;
}
</pre></div>
<p>Recall from &sect;10.1.3/174 that <code>size_t</code> is an unsigned integral type that is appropriate to 
contain the size of any array, which makes it the appropriate type for <code>size</code>. The <code>strlen</code> 
function counts characters in the array denoted by <code>p</code> up to but not including the null. 
Because the variable <code>hello</code> has the same meaning as the string literal &quot;<code>Hello</code>&quot;,</p>
<div class="prebox"><pre>
string s(hello);
</pre></div>
<p>will define a <code>string</code> variable named <code>s</code> that contains a copy of the characters stored in 
<code>hello</code>, just as</p>
<div class="prebox"><pre>
string s(&quot;Hello&quot;);
</pre></div>
<p>defines a <code>string</code> variable named s that contains a copy of the characters in &quot;Hello&quot;. 
Moreover, because we can construct a <code>string</code> from two iterators, we can also write</p>
<div class="prebox"><pre>
string s(hello, hello + strlen(hello));
</pre></div>
<p>Here, using the name of the array <code>hello</code> yields a pointer to the initial character of the 
<code>hello</code> array, and <code>hello + strlen(hello)</code> is a pointer to the <code>'\0'</code> that is at the end of 
the array which is also one character past the <code>o</code> of <code>hello</code>. Because pointers are iterators, 
we can construct a <code>string</code> from two pointers, similar to what we did in &sect;6.1.1/103, 
where we created a new <code>string</code> from two iterators. In both cases, the first iterator refers 
to the initial character of the sequence that we wish to use to initialize the string that we 
are constructing, and the second iterator refers to one past the last character.</p>
<div class="prevnext">
<a href="58.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="60.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>