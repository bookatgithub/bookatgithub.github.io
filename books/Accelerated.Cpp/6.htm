<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Working with strings</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="5.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="7.htm"><img src="images/Next1.gif" /></a>
</div>
<div class="chapname">
<h1>1</h1>
</div>
<div id="chapter">
<h2>Working with strings</h2>
</div>
<p>Chapter 0 looked closely at a tiny program, which we used to introduce surprisingly 
many fundamental C++ ideas: comments, standard headers, scopes, namespaces, expressions, 
statements, string literals, and output. This chapter continues our overview of the 
fundamentals by writing similarly simple programs that use character strings. In the process, 
we'll learn about declarations, variables, and initialization, as well as something 
about input and the C++ <code>string</code> library. The programs in this chapter are so simple that 
they do not even require any control structures, which we will cover in Chapter 2.</p>
<a name="input">
<h4>1.1 Input</h4>
</a>
<p>Once we can write text, the logical next step is to read it. For example, we can modify the 
<code>Hello, world!</code> program to say hello to a specific person:</p>
<div class="prebox"><pre>
//<i> ask for a person's name, and greet the person</i>
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    // <i>ask for the person's name</i>
    std::cout &lt;&lt; &quot;Please enter your first name: &quot;;

    // <i>read the name</i>
    std::string name;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// <i>define name</i>
    std::cin &gt;&gt; name;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// <i>read into</i>

    // <i>write a greeting</i>
    std::cout &lt;&lt; &quot;Hello, &quot; &lt;&lt; name &lt;&lt; &quot;!&quot; &lt;&lt; std::endl;
    return 0;
}
</pre></div>
<p>When we execute this program, it will write</p>
<div class="prebox"><pre>
Please enter your first name:
</pre></div>
<p>on the standard output. If we respond, for example,</p>
<div class="prebox"><pre>
Vladimir</pre></div>
<p>then the program will write</p>
<div class="prebox"><pre>
Hello, Vladimir!</pre></div>
<p>Let's look at what's going on. In order to read input, we must have a place to put it. Such 
a place is called a <i><b>variable</b></i>. A variable is an <i><b>object</b></i> that has a name. An object, in turn, is a 
part of the computer's memory that has a type. The distinction between objects and variables 
is important because, as we'll see in &sect;3.2.2/45, &sect;4.2.3/65, and &sect;10.6.1/183, it is possible 
to have objects that do not have names.</p>
<p>If we wish to use a variable, we must tell the implementation what name to give it and 
what type we want it to have. The requirement to supply both a name and a type makes 
it easier for the implementation to generate efficient machine code for our programs. The 
requirement also lets the compiler detect misspelled variable names-unless the misspelling 
happens to match one of the names that our program said it intended to use.</p>
<p>In this example, our variable is named <code>name</code>, and its type is <code>std::string</code>. 
As we saw in &sect;0.5/3 and &sect;0.7/5, the use of <code>std::</code> implies that the name, <code>string</code>, that follows it 
is part of the standard library, not part of the core language or of a nonstandard library. 
As with every part of the standard library, <code>std::string</code> has an associated header, 
namely <code>&lt;string&gt;</code>, so we've added an appropriate <code>#include</code> directive to our program.</p>
<p>&nbsp;&nbsp;&nbsp;The first statement,</p>
<div class="prebox"><pre>
std::cout &lt;&lt; &quot;Please enter your first name: &quot;;
</pre></div>
<p>should be familiar by now: It writes a message that asks for the user's name. An important 
part of this statement is what isn't there, namely the <code>std::endl</code> manipulator. 
Because we did not use <code>std::endl</code>, the output does not begin a new line after the program 
has written its message. Instead, as soon as it has written the prompt, the computer 
waits-on the same line-for input. The next statement,</p>
<div class="prebox"><pre>
std::string name;&nbsp; &nbsp; &nbsp; &nbsp; // <i>define name</i>
</pre></div>
<p>is a <i><b>definition</b></i>, which defines our variable named name that has type <code>std::string</code>. 
Because this definition appears within a function body, <code>name</code> is a <i><b>local variable</b></i>, which 
exists only while the part of the program within the braces is executing. As soon as the 
computer reaches the <code>}</code>, it <i><b>destroys</b></i> the variable <code>name</code>, and returns any memory that the 
variable occupied to the system for other uses. The limited lifetime of local variables is 
one reason that it is important to distinguish between variables and other objects.</p>
<p>Implicit in the type of an object is its <i><b>interface</b></i>-the collection of operations that are 
possible on an object of that type. By defining <code>name</code> as a variable (a named object) of type 
<code>string</code>, we are implicitly saying that we want to be able to do with <code>name</code> whatever the 
library says that we can do with <code>string</code>s.</p>
<p>One of those operations is to <i><b>initialize</b></i> the <code>string</code>. Defining a <code>string</code> variable 
implicitly initializes it, because the standard library says that every <code>string</code> object starts 
out with a value. We shall see shortly that we can supply a value of our own when we 
create a <code>string</code>. If we do not do so, then the <code>string</code> starts out containing no characters 
at all. We call such a <code>string</code> an <i><b>empty</b></i> or <i><b>null</b></i> <code>string</code>.</p>
<p>Once we have defined name, we execute</p>
<div class="prebox"><pre>std::cin  &gt;&gt; name;       // <i>read into name</i>
</pre></div>
<p>which is a statement that reads from <code>std::cin</code> into <code>name</code>. Analogous with its use of the 
<code>&lt;&lt;</code> operator and <code>std::cout</code> for output, the library uses the <code>&gt;&gt;</code> <code>operator</code> and <code>std::cin</code> 
for input. In this example, <code>&gt;&gt;</code> reads a <code>string</code> from the standard input and stores what it 
read in the object named <code>name</code>. When we ask the library to read a <code>string</code>, it begins by 
discarding <i><b>whitespace</b></i> characters (space, tab, backspace, or the end of the line) from the 
input, then reads characters into <code>name</code> until it encounters another whitespace character or 
end-of-file. Therefore, the result of executing <code>std::cin &gt;&gt; name</code> is to read a word from 
the standard input, storing in <code>name</code> the characters that constitute the word.</p>
<p>The input operation has another side effect: It causes our prompt, which asks for the 
user's name, to appear on the computer's output device. In general, the input-output 
library saves its output in an internal data structure called a <i><b>buffer</b></i>, which it uses to optimize 
output operations. Most systems take a significant amount of time to write characters 
to an output device, regardless of how many characters there are to write. To avoid 
the overhead of writing in response to each output request, the library uses the buffer to 
accumulate the characters to be written, and <i><b>flushes</b></i> the buffer, by writing its contents to 
the output device, only when necessary. By doing so, it can combine several output operations 
into a single write.</p>
<p>There are three events that cause the system to flush the buffer. First, the buffer might 
be full, in which case the library will flush it automatically. Second, the library might be 
asked to read from the standard input stream. In that case, the library immediately 
flushes the output buffer without waiting for the buffer to become full. The third occasion 
for flushing the buffer is when we explicitly say to do so.</p>
<p>When our program writes its prompt to <code>cout</code>, that output goes into the buffer associated 
with the standard output stream. Next, we attempt to read from <code>cin</code>. This read 
flushes the <code>cout</code> buffer, so we are assured that our user will see the prompt.</p>
<p>Our next statement, which generates the output, explicitly instructs the library to flush 
the buffer. That statement is only slightly more complicated than the one that wrote the 
prompt. Here we write the string literal <code>&quot;Hello, &quot;</code> followed by the value of the <code>string</code> 
variable <code>name</code>, and finally by <code>std::endl</code>. Writing the value of <code>std::endl</code> ends the line 
of output, and then flushes the buffer, which forces the system to write to the output 
stream immediately.</p>
<p>Flushing output buffers at opportune moments is an important habit when you are 
writing programs that might take a long time to run. Otherwise, some of the program's 
output might languish in the system's buffers for a long time between when your program 
writes it and when you see it.</p>
<div class="prevnext">
<a href="5.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="7.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>