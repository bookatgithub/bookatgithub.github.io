<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>10.3 Initializing arrays of character pointers</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="59.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="61.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>10.3 Initializing arrays of character pointers</h3>
<p>We said in &sect;10.2/176 that a string literal is just a convenient way of writing the address of 
the initial character of a null-terminated sequence of characters. We said in &sect;10.1.6/176 
that we can initialize the elements of an array by giving a sequence of appropriate values, 
enclosed in curly braces, as an initializer. By combining these two facts, we learn that we 
can initialize an array of character pointers by giving a sequence of string literals.</p>
<p>This claim is quite a mouthful. To make it concrete, suppose that we wish to convert 
numeric grades to letter grades according to the following rule:</p>
<div class="prebox"><pre>
If the grade is at least   97   94   90   87   84    80   77   74   70   60   0 
then the letter grade is   A+   A    A-   B+    B    B-   C+   C    C-   D    F
</pre></div>
<p>Here is a program that does the conversion:</p>
<div class="prebox"><pre>
string letter_grade(double grade)
{
    // <i>range posts for numeric grades</i>
    static const double numbers[] = {
        97, 94, 90, 87, 84, 80, 77, 74, 70, 60, 0
    };

    // <i>names for the letter grades</i>
    static const char* const letters[] = {
        &quot;A+&quot;, &quot;A&quot;, &quot;A-&quot;, &quot;B+&quot;, &quot;B&quot;, &quot;B-&quot;, &quot;C+&quot;, &quot;C&quot;, &quot;C-&quot;, &quot;D&quot;, &quot;F&quot;
    };

    // <i>compute the number of grades given the size of the array</i>
    // <i>and the size of a single element</i>
    static const size_t ngrades = sizeof(numbers)/sizeof(*numbers);

    // <i>given a numeric grade, find and return the associated letter grade</i>
    for (size_t i = 0; i &lt; ngrades; ++i) {
        if (grade &gt;= numbers[i])
            return letters[i];
    }
    return &quot;?\?\?&quot;;
}
</pre></div>
<p>The definition of <code>numbers</code> uses the keyword <code>static</code>, which we saw in &sect;6.1.3/107. In the 
present context, it tells the compiler to initialize the <code>letters</code> and <code>numbers</code> arrays only 
once, no later than the first time each array is used. Without the <code>static</code>, the compiler 
would have initialized the array for each call, which would have slowed the program 
needlessly. We have said that the array elements are <code>const</code> because we do not intend to 
change them—which is what allows us to get away with initializing the array only once.</p>
<p>The <code>letters</code> array is an array of constant pointers to <code>const char</code>. In this case, each 
element points to the initial element of its respective letter-grade string literal.</p>
<p>The definition of <code>ngrades</code> introduces a new keyword, <code>sizeof</code>, which we use to 
determine how many elements the <code>numbers</code> array has without having to count the elements 
ourselves. If <code>e</code> is an expression, then <code>sizeof(e)</code> returns a <code>size_t</code> value that tells 
us how much memory an object of the type of <code>e</code> consumes. It does so without actually 
evaluating the expression, which is possible because it does not need to evaluate the 
expression in order to determine its type, and because all objects of a given type occupy 
the same amount of storage.</p>
<p>The <code>sizeof</code> operator reports its result in <i><b>bytes</b>, </i>which are storage units whose exact 
nature varies from one implementation to another. The only guarantees about bytes are 
that a byte contains at least eight bits, every object occupies at least one byte, and that a 
<code>char</code> occupies exactly one byte.</p>
<p>Of course, we want to determine how many elements the <code>numbers</code> array has, not how 
many bytes it occupies. To do so, we divide the size of the entire array by the size of a single 
element. Recall from &sect;10.1.3/174 that because <code>numbers</code> is an array, <code>*numbers</code> is an 
element of the array. It happens to be the initial element, but the particular element is 
irrelevant in this context because all elements are the same size. What is relevant is that 
<code>sizeof(*numbers)</code> is the size of a single element of the <code>numbers</code> array, so that 
<code>sizeof(numbers)/sizeof(*numbers)</code> is the number of elements in the array.</p>
<p>Once we have established our tables, determining the letter grade is simplicity itself. 
We look sequentially at the elements of <code>numbers</code> until we find that <code>grade</code> is greater than 
or equal to one of them. When we find the relevant element of <code>numbers</code>, we return the 
corresponding element of <code>letters</code>. This element is a pointer, but we have already seen 
in &sect;10.2/176 that we can convert a character pointer to a <code>string</code>.</p>
<p>If we cannot find an appropriate letter grade, it means that our user gave us a negative 
numeric grade, in which case we return a nonsense letter grade. The <code>\</code> characters are 
there because, as we explain in more detail in &sect;A.2.1.4/302, C++ programs should not contain 
two or more consecutive question marks. We must, therefore, use &quot;<code>?\?\?</code>&quot; to represent <code>???</code> in a program.</p>
<div class="prevnext">
<a href="59.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="61.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>