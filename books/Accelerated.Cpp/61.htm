<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>10.4 Arguments to main</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="60.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="62.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>10.4 Arguments to main</h3>
<p>Now that we understand pointers and character arrays, we can understand how to pass 
arguments to the <code>main</code> function. Most operating systems provide a way to pass a 
sequence of character strings to <code>main</code> as an argument, if the <code>main</code> function is willing to 
accept them. The way the author of <code>main</code> signals such willingness is by giving <code>main</code> two 
parameters: an <code>int</code> and a pointer to a pointer to char. Like any parameters, these can 
have arbitrary names, but programmers often call them <code>argc</code> and <code>argv</code>. The value of 
<code>argv</code> is a pointer to the initial element of an array of pointers, one for each argument. The 
value of <code>argc</code> is the number of pointers in the array of which <code>argv</code> points to the initial 
element. The initial element of that array always represents the name by which the program 
is called, so <code>argc</code> is always at least 1. The arguments, if any, occupy subsequent 
elements of the array.</p>
<p>As an example, this program writes its arguments, if any, with spaces between them:</p>
<div class="prebox"><pre>
int main(int argc, char** argv)
{
    // <i>if there are arguments, write them</i>
    if (argc &gt; 1) {
        int i;   // declare i outside the for because we need it after the loop finishes
        for (i = 1; i &lt; argc-1; ++i)         // write all but the last entry and a space
            cout &lt;&lt; argv[i] &lt;&lt; &quot; &quot;;          // argv[i] is a char*
        
        cout &lt;&lt; argv[i] &lt;&lt; endl;             // write the last entry but not a space
    }
    return 0;
}
</pre></div>
<p>If we compile this program and put the resulting executable in a file called say, then by asking the system to execute</p>
<div class="prebox"><pre>
say Hello, world
</pre></div>
<p>we will cause our program to write</p>
<div class="prebox"><pre>
Hello, world
</pre></div>
<p>In this case, <code>argc</code> will be 3, and the three elements of <code>argv</code> will be pointers to the initial 
characters of arrays initialized with <code>say, Hello</code>, and world respectively. We can visualize 
the value of <code>argv</code> this way:</p>
<center>
<img src="images/180.jpg" />
</center>
<div class="prevnext">
<a href="60.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="62.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>
