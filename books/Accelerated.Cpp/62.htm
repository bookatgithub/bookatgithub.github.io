<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>10.5 Reading and writing files</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="61.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="63.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>10.5 Reading and writing files</h3>
<p>The programs in this book use only <code>cin</code> and <code>cout</code> for their input and output. Larger 
applications, however, often need to work with multiple files, both for input and output. 
C++ offers a wide variety of facilities for doing so, of which we will discuss only a few.</p>
<h4>10.5.1 The standard error stream</h4>
<p>It is often useful for a program to be able to comment about what it is doing in a way that 
is not part of its regular output. Such comments might notify the user about error conditions, 
or might constitute a log of events that the program considers significant.</p>
<p>To make such comments easy to distinguish from ordinary output, the C++ library 
defines a <i><b>standard error</b> </i>stream, in addition to the standard input and output streams. 
This stream is often merged with the standard output, but most systems provide a way to 
separate them.</p>
<p>To write to the standard error stream, C++ programs can use either <code>cerr</code> or <code>clog</code>. 
These output streams are both attached to the same destination. The difference between 
them is how they handle buffering (&sect;1.1/11).</p>
<p>The <code>clog</code> stream, as its name suggests, is intended for logging purposes. Accordingly, 
it has the same buffering properties as <code>cout</code>: It saves characters and writes them when 
the system decides that it is appropriate to do so. The <code>cerr</code> stream, on the other hand, 
always writes its output immediately. This strategy guarantees that the output will 
become visible as soon as possible, but it imposes what might be substantial overhead. 
Therefore, to write an urgent complaint, you should use <code>cerr</code>; to produce a running commentary 
about what the program is doing, you should use <code>clog</code>.</p>
<h4>10.5.2 Dealing with multiple input and output files</h4>
<p>The standard input, output, and error streams might or might not be associated with files. 
For example, a window system might run C++ programs with these streams connected to 
a window associated with the program, and might use completely different facilities to do 
so than it would to access disk files.</p>
<p>For this reason, the objects that the C++ standard library uses for file input and output 
have different types than the objects that it uses to denote the standard input and output 
streams. If you wish to work with an input or output file, you must create an object of 
type <code>ifstream</code> or ofstream respectively. This requirement may seem to cause needless 
difficulty. After all, we have seen that the library's input and output facilities are all 
defined in terms of types <code>istream</code> and <code>ostream</code>. Does the library have another set of 
definitions for <code>ifstream</code> and <code>ofstream</code>?</p>
<p>Fortunately, the answer is no. As we shall see in Chapter 13, it is possible to say that 
one type is similar enough to another that one can stand in for the other. The standard 
library says exactly that, by defining <code>ifstream</code> to be a kind of <code>istream</code> and <code>ofstream</code> 
to be a kind of <code>ostream</code>. As a result, it is possible to use an <code>ifstream</code> wherever the 
library expects an <code>istream</code> and an <code>ofstream</code> wherever the library expects an <code>ostream</code>. 
The definitions of both of these classes appear in header <code>&lt;fstream&gt;</code>.</p>
<p>When we define an <code>ifstream</code> or <code>ofstream</code> object, we might expect to have to supply, 
in the form of a <code>string</code>, the name of the file that we wish to use. In fact, we are 
required to supply, not a <code>string</code>, but rather a pointer to the initial element of a null-
terminated character array. One reason for this curious requirement is to give programs 
the option of using the input-output library without using the <code>string</code> facilities. Another 
reason is historical: The input-output library predates the <code>string</code> class by several years. 
A third reason is that this requirement makes it easier to interface with operating-system 
input-output facilities, which typically use such pointers to communicate. Whatever the 
reasons, the fact is that programs that deal with files must ultimately express the files' 
names as pointers to null-terminated character arrays.</p>
<p>As an example, here is a program that copies a file named <code>in</code> to a file named <code>out</code>:</p>
<div class="prebox"><pre>
int main()
{
    ifstream infile(&quot;in&quot;);
    ofstream outfile(&quot;out&quot;);

    string s;

    while (getline(infile, s))
        outfile &lt;&lt; s &lt;&lt; endl;
    return 0;
}
</pre></div>
<p>This program takes advantage of the fact that a string literal is effectively a pointer to the 
initial character of a null-terminated array. If we don't want to have to give the name of 
the file as a literal, the best alternative is to store the file name in a <code>string</code> and then use 
the <code>c_str</code> member function that we will describe in &sect;12.6/224. So, for example, if <code>file</code> 
is a <code>string</code> variable that contains the name of a file that we want to read, we can create 
an <code>ifstream</code> object that will read it by defining it as</p>
<div class="prebox"><pre>
ifstream infile(file.c_str());
</pre></div>
<p>As a final example, here is a program that produces, on its standard output, a copy of 
the contents of all the files whose names are given as arguments to main:</p>
<div class="prebox"><pre>
int main(int argc, char **argv)
{
    int fail_count = 0;
    // <i>for each file in the input list</i>
    for (int i = 1; i &lt; argc; ++i) {
        ifstream in(argv[i]);

        // <i>if it exists, write its contents, otherwise generate an error message</i>
        if (in) {
            string s;
            while (getline(in, s))
                cout &lt;&lt; s &lt;&lt; endl;
        } else {
            cerr &lt;&lt; &quot;cannot open file &quot; &lt;&lt; argv[i] &lt;&lt; endl;
            ++fail_count;
        }
    }
    return fail_count;
}
</pre></div>
<p>For each argument given to main (&sect;10.4/179), the program creates an <code>ifstream</code> object to 
read the file by that name. If the object appears <code>false</code> when used as a condition, that 
means that the file does not exist, or that it cannot be read for some reason. Accordingly, 
the program complains on <code>cerr</code>, and keeps a count of how many failures it had. If the 
program created the <code>ifstream</code> object successfully, it reads the file, one line at a time, into 
s, and writes the contents of each line on the standard output.</p>
<p>When the program returns control to the system, it passes back the number of files that 
it was unable to read. As usual, a return value of zero indicates success, which in this case 
will indicate that we were able to read all the files.</p>
<div class="prevnext">
<a href="61.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="63.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>
