<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>10.6 Three kinds of memory management</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="62.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="64.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>10.6 Three kinds of memory management</h3>
<p>So far, we have seen two distinct kinds of memory management, although we have not 
discussed them explicitly. The first kind is usually called <b><i>automatic </i></b>memory management, 
and is associated with local variables: A local variable occupies memory that the system 
allocates when it encounters the variable's definition during execution. The system automatically 
deallocates that memory at the end of the block that contains the definition.</p>
<p>Once a variable has been deallocated, any pointers to it become invalid.   It is the 
programmer's responsibility to avoid using such invalid pointers. For example,</p>
<div class="prebox"><pre>
// <i>this function deliberately yields an invalid pointer.</i>
// <i>it is intended as a negative example—don't do this!</i>
int* invalid_pointer()
{
    int x;
    return &amp;x;  // <i>instant disaster!</i>
}
</pre></div>
<p>This function returns the address of the local variable <code>x</code>. Unfortunately, when the function 
returns, doing so ends execution of the block that contains the definition of <code>x</code>, which 
deallocates <code>x</code>. The pointer that <code>&amp;x</code> created is now invalid, but the function tries to return 
it anyway. What happens at this po<code>int</code> is anybody's guess. In particular, C++ implementations 
are not required to diagnose the error—you get what you get.</p>
<p>If we want to return the address of a variable such as <code>x</code>, one way to do so is to use the 
other kind of memory management, by asking for <code>x</code> to be <b><i>statically allocated:</i></b></p>
<div class="prebox"><pre>
// <i>This function is completely legitimate.</i>
int* pointer_to_static()
{
    static int x;
    return &amp;x;
}
</pre></div>
<p>By saying that <code>x</code> is <code>static</code>, we are saying that we want to allocate it once, and only once, 
at some point before the first time that <code>pointer_to_static</code> is ever called, and that we 
do not want to deallocate it as long as our program runs. There is nothing wrong with 
returning the address of a <code>static</code> variable; the pointer will be valid as long as the program 
runs, and it will be irrelevant afterward.</p>
<p>However, <code>static</code> allocation has the potential disadvantage that every call to 
<code>pointer_to_static</code> will return a pointer to the same object! Suppose we want to 
define a function such that each time we call it, we get a pointer to a brand new object, 
which stays around until we decide that we no longer want it. To do so, we use <b><i>dynamic 
allocation, </i></b>which we request by using the <b>new </b>and <b>delete </b>keywords.</p>
<h4>10.6.1 Allocating and deallocating an object</h4>
<p>If <code>T</code> is the type of an object, <code>new T</code> is an expression that allocates an object of type <code>T</code>, which 
is default-initialized, and yields a pointer to this (unnamed) newly allocated object. It is 
possible to give a specific value to use when initializing the object by executing <code>new 
T</code><i>(args). </i>The object stays around until the program either ends or executes <code>delete p</code> 
(whichever happens first), where <code>p</code> is (a copy of) the pointer returned by new. In order to 
<code>delete</code> a pointer, the pointer must point to an object that was allocated by <code>new</code>, or be 
equal to zero. Deleting a zero pointer has no effect. As an example,</p>
<div class="prebox"><pre>
int* p = new int(42);
</pre></div>
<p>will allocate an unnamed new object of type <code>int</code>, initialize the object to 42, and cause <code>p</code> to 
point to that object. We can affect the value of the object by executing statements such as</p>
<div class="prebox"><pre>
++*p;     // <i>p is now 43</i>
</pre></div>
<p>after which the object has the value 43. When we're done with the object, we can execute</p>
<div class="prebox"><pre>
delete p;
</pre></div>
<p>after which the space occupied by <code>*p</code> is freed and <code>p</code> becomes an invalid pointer, with a 
value that we can no longer use until we have assigned a new value to it.</p>
<p>As another example, we might write a function that allocates an <code>int</code> object, initializes 
it, and returns a pointer to it:</p>
<div class="prebox"><pre>
int* pointer_to_dynamic()
{
    return new int(0);
}
</pre></div>
<p>which imposes on its caller the responsibility of freeing the object at an appropriate time.</p>
<h4>10.6.2  Allocating and deallocating an array</h4>
<p>If <code>T</code> is a type and <code>n</code> is a non-negative integral value, <code>new T[n]</code> allocates an array of 
<code>n</code> objects of type <code>T</code> and returns a pointer (which has type <code>T*</code>) to the initial element of the 
array. Each object is default-initialized, meaning that if <code>T</code> is a built-in type and the array is 
allocated at local scope, then the objects are uninitialized. If <code>T</code> is a class type, then each 
element is initialized by running its default constructor.</p>
<p>When <code>T</code> is a class type, there are two important implications of this initialization process: 
First, if the class doesn't allow default-initialization, then the compiler will reject the 
program. Second, each of the <code>n</code> elements in the array is initialized, which can be a substantial 
execution overhead. In Chapter 11, we'll see that the standard library provides a 
more flexible mechanism for dynamically allocating arrays. It is often preferable to use 
that mechanism, rather than new, when dynamically allocating an array.</p>
<p>Although every ordinary array is required to have at least one element, it is possible 
to allocate an &quot;array&quot; with no elements by executing new <code>T[n] </code>with <code>n</code> equal to zero. In this 
case, new has a little trouble returning a pointer to the initial element—because there isn't 
one. What it does instead is return a valid off-the-end pointer, which we can later use as 
an argument to <code>delete[]</code>, and which we can think of as being a pointer to where the initial 
element would be if it existed.</p>
<p>The point of this curious behavior is to permit programs such as</p>
<div class="prebox"><pre>
T* p = new T[n];
vector&lt;T&gt; v(p, p + n);
delete[] p;
</pre></div>
<p>to work even if <code>n</code> is zero. The fact that <code>p</code> doesn't point to an element when <code>n</code> is zero is 
irrelevant; all that matters is that <code>p</code> and <code>p + n</code> are pointers that can legitimately be compared 
with each other and found to be equal. In all cases, the <code>vector</code> will have n elements. 
It is a great convenience for such programs to work properly even when <code>n</code> is zero.</p>
<p>Note the use of <code>delete[]</code> in this example. The brackets are necessary to tell the system 
to deallocate an entire array, rather than a single element. An array allocated by 
<code>new[]</code> stays around until the program ends or until the program executes <code>delete[] p</code>, 
where <code>p</code> is (a copy of) the pointer that <code>new[]</code> yielded. Before deallocating the array, the 
system destroys each element, in reverse order.</p>
<p>As an example, here is a function that takes a pointer to the initial character of a null-
terminated character array such as a string literal, copies all the characters in the array 
(including the null character at the end) into a newly allocated array, and returns a 
pointer to the initial element of the new array:</p>
<div class="prebox"><pre>
char* duplicate_chars(const char* p) {
    // <i>allocate enough space; remember to add one for the null</i>
    size_t length = strlen(p) + 1;
    char* result = new char[length];

    // <i>copy into our newly allocated space and return pointer to first element </i>
    copy(p, p + length, result);
    return result;
}
</pre></div>

<p>Recall from &sect;10.2/176 that <code>strlen</code> returns the number of characters in a null-terminated 
array, excluding the null character at the end. We therefore add 1 to the result of <code>strlen</code> 
to account for the null, and allocate that many characters. Because pointers are iterators, 
we can use the <code>copy</code> algorithm to copy characters from the array denoted by <code>p</code> into the 
array denoted by <code>result</code>. Because <code>length</code> includes the null character at the end of the 
array, the call to <code>copy</code> copies that character as well as the ones before it.</p>
<p>As before, this function imposes on its caller the obligation to free the memory that it 
allocated. In general, finding an opportune time to free dynamically allocated memory is 
far from easy. We shall discuss techniques for automating this task in &sect;11.3.4/200.</p>
<div class="prevnext">
<a href="62.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="64.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>