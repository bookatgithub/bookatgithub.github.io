<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>10.7 Details</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="63.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="65.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>10.7 Details</h3>
<p><b>Pointers</b> are random-access iterators that hold the addresses of objects. For example:</p>
<p><code>p = &amp;s</code>&nbsp;&nbsp;&nbsp;&nbsp;Makes <code>p</code> point to <code>s</code>.</p>
<p><code>*p = s2 </code>&nbsp;Dereferences <code>p</code> and assigns a new value to the object to which <code>p</code> points.</p>
<p><code>vector&lt;string&gt; (*sp)(const string&amp;) = split;</code></p>
<div class="details">
Defines <code>sp</code> as a function pointer that points to the <code>split</code> function.
</div> 
<p><code>int nums[100];</code></p>
<div class="details">
Defines <code>nums</code> as an array of 100 <code>int</code>s. 
</div>
<p><code>int* bn = nums;</code></p>
<div class="details">
Defines <code>bn</code> as a pointer to the first element of the array <code>nums</code>.
</div>
<p><code>int* en = nums + 100;</code></p>
<div class="details">
Defines <code>en</code> as a pointer to (one past) the last element of the array <code>nums</code>. 
</div>
<p>Pointers can point at single objects, arrays of objects, or functions. When a pointer refers 
to a function, its value may be used only to call the function.</p>
<p><b>Arrays</b> are fixed-size, built-in containers whose iterators are pointers. Uses of 
the name of an array are automatically converted to a pointer to the initial element of the array. A 
string literal is a null-terminated array of characters. Indexing an array is defined in terms 
of pointer operations: For every array <code>a</code> and an index <code>n, a[n]</code> is the same as <code>*(a + n)</code>. 
If <code>a</code> is an array with <code>n</code> elements, then the range <code>[a, a + n)</code> represents all the elements of <code>a</code>. 
Arrays can be initialized when they are defined:</p>
<div class="prebox"><pre>
string days[] = { &quot;Mon&quot;, &quot;Tues&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;, &quot;Sun&quot; }; 
</pre></div>
<p>The implementation infers the size of <code>days</code> from the number of initializers.</p>
<p><b>The main function </b>may (optionally) take two arguments. The first argument, an <code>int</code>, 
says how many character arrays are stored in the second argument, which is a <code>char**</code>. 
The second argument to <code>main</code> is sometimes written as</p>
<div class="prebox"><pre>
char* argv[]
</pre></div>
<p>which is equivalent to <code>char**</code>. This syntax is legal only in parameter lists.</p>
<p><b>Input-Output:</b></p>
<p><code>cerr</code></p>
<div class="details">
Standard error stream. Output is not buffered.
</div>
<p><code>clog</code></p>
<div class="details">
Standard error intended for logging. Output is buffered.
</div>
<p><code>ifstream(cp)</code> </p>
<div class="details">
Input stream bound to the file named by the <code>char* cp</code>. Supports the operations on <code>istream</code>s.
</div>
<p><code>ofstream (cp)</code></p>
<div class="details">
Output stream bound to the file named by the <code>char* cp</code>. Supports the operations on <code>ostream</code>s.
</div>
<p>Input and output file streams are defined in <code>&lt;ifstream&gt;</code>.</p>
<p><b>Memory management:</b></p>
<p><code>new T</code></p>
<div class="details">
Allocates and default-initializes a new object of type <code>T</code> and returns a pointer to the object.
</div>
<p><code>new T(<i>args</i>)</code></p>
<div class="details">
Allocates and initializes a new object of type <code>T</code> using <i><code>args</code> </i>to initialize 
the object. Returns a pointer to the object.
</div>
<p><code>delete p</code></p>
<div class="details">
Destroys the object to which <code>p</code> points and frees the memory used to hold 
<code>*p</code>. The pointer must point at an object that was dynamically allocated. 
</div>
<p><code>new T[n]</code></p>
<div class="details">
Allocates and default-initializes an array of <code>n</code> new objects of type <code>T</code>. 
Returns a pointer to the initial element in the array. 
</div>
<p><code>delete[] p</code>    </p>
<div class="details">
Destroys the objects in the array to which <code>p</code> points and frees the memory 
used to hold the array. The pointer must point to the initial element of 
an array that was dynamically allocated.
</div>
<h4>Exercises</h4>
<p><b>10-0.</b> Compile, execute, and test the programs in this chapter.</p>
<p><b>10-1</b>. Rewrite the student-grading program from &sect;9.6/166 to generate letter grades.</p>
<p><b>10-2.</b> Rewrite the <code>median</code> function from &sect;8.1.1/140 so that we can call it with either a <code>vector</code> or 
a built-in array. The function should allow containers of any arithmetic type.</p>
<p><b>10-3.</b> Write a test program to verify that the <code>median</code> function operates correctly. Ensure that 
calling <code>median</code> does not change the order of the elements in the container.</p>
<p><b>10-4.</b> Write a class that implements a <code>list</code> that holds <code>string</code>s.</p>
<p><b>10-5.</b> Write a bidirectional iterator for your <code>String_list</code> class.</p>
<p><b>10-6.</b> Test the class by rewriting the <code>split</code> function to put its output into a <code>String_list</code>.</p>
<div class="prevnext">
<a href="63.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="65.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>
