<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>11.1 The Vec class</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="65.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="67.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>11.1 The Vec class</h3>
<p>When we design a class, we normally start by specifying the interface that we want to 
provide. One way to determine the right interface is to look at the kind of programs we 
want our users to be able to write. Because we want to implement a useful subset of the 
standard <code>vector</code> class, a good place to start is to look at how we've used <code>vector</code>s:</p>
<div class="prebox"><pre>
// <i>construct a</i> vector
vector&lt;Student_info&gt; vs;        // <i>empty</i> vector
vector&lt;double&gt; v(100);          //  vector <i>with 100 elements</i>

// <i>obtain the names of the types used by the</i> vector
vector&lt;Student_info&gt;::const_iterator b, e;
vector&lt;Student_info&gt;::size_type i = 0;

// <i>use size and the index operator to look at each element in the </i>vector
for (i = 0; i != vs.size(); ++i)
    cout &lt;&lt; vs[i].name(); 

// <i>return iterators positioned on the first and one past the last element</i>
b = vs.begin(); e = vs.end();
</pre></div>
<p>Of course, this list of operations is but a subset of what the standard <code>vector</code> class provides—but by implementing this subset, we can understand the language facilities necessary to support much of the <code>vector</code> interface.</p>
</body>
<div class="prevnext">
<a href="65.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="67.htm"><img src="images/Next1.gif" /></a>
</div>
</html>