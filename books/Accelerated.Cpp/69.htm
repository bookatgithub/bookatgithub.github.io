<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>11.4 Dynamic Vecs</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="68.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="70.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>11.4 Dynamic Vecs</h3>
<p>Before we implement our memory management functions, we should realize that our 
<code>Vec</code>s are inferior to standard <code>vector</code>s in an important way: We do not provide a 
<code>push_back</code> operation, and so our <code>Vec</code>s are of fixed size. Remember that <code>push_back</code> 
pushes its argument onto the back of the <code>vector</code> and, in the process, increases the size of 
the <code>vector</code> by one element.</p>
<p>We could add a <code>push_back</code> function that allocated new space to hold one more element 
than the current <code>Vec</code> holds. We'd have to copy the existing elements into this new 
space, constructing a new last element from the argument to <code>push_back</code>. We can see 
that this strategy would be expensive if our users made many calls to <code>push_back</code>.</p>
<p>There is a classic approach to solving a problem such as this one: Allocate more storage 
than we need. Only when we exhaust the preallocated storage will we go back for more. 
For simplicity, whenever <code>push_back</code> needs to get more space, we'll allocate twice as 
much storage as we currently use. So, if we create a <code>Vec</code> with 100 elements, and then call 
<code>push_back</code> for the first time, it will allocate enough space to hold 200 elements. It will 
copy the existing 100 elements into the first half of the newly allocated space and construct 
a new, last element at the end of that sequence. The next 99 calls to <code>push_back</code> 
will be satisfied without having to go back for more memory.</p>
<p>This strategy implies that we'll need to change how we keep track of the array that 
holds our elements. We'll still need to keep track of the first element, but now we'll need 
two &quot;end&quot; pointers. One will point (one past) the last constructed element, which, equivalently, 
is a pointer to the first available element. The other pointer will point (one past) 
the last allocated element. So, our <code>Vec</code> objects will now look like</p>
<center>
<img src="images/203.jpg" />
</center>
<p>Fortunately, only <code>push_back</code> and our memory management functions, which we have 
not yet written, will need to know about this new member. Moreover, <code>push_back</code> itself 
is pretty simple; it forwards the hard work to two of our memory-management functions, 
named <code>grow</code> and <code>unchecked_append</code>, which we shall eventually have to write.</p>
<div class="prebox"><pre>
template &lt;class T&gt; class Vec {
public:
    void push_back(const T&amp; val) {
        if (avail == limit)          // <i>get space if needed</i>
            grow();
        unchecked_append(val) ;     // <i>append the new element</i>
    }
private:
    iterator data;     // <i>as before, pointer to the first element in the Vec </i>
    iterator avail;    // <i>pointer to (one past) the last constructed element </i>
    iterator limit;    // <i>now points to (one past) the last available element </i>
    // rest of the class interface and implementation as before</i>
};
</pre></div>
<div class="prevnext">
<a href="68.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="70.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>