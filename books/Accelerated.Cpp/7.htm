<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>1.2 Framing a name</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="6.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="8.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>1.2 Framing a name</h3>
<p>So far, our program has been restrained in its greetings. We'd like to change that by writing 
a more elaborate greeting, so that the input and output look like this:</p>
<div class="prebox"><pre>
Please enter your first name: Estragon

********************
*                  *
* Hello, Estragon! *
*                  *
********************
</pre></div>
<p>Our program will produce five lines of output. The first line begins the frame. It is 
a sequence of <code>*</code> characters as long as the person's name, plus some characters to match the 
salutation (&quot;<code>Hello</code>, &quot;), plus a space and an <code>*</code> at each end. The line after that will be an 
appropriate number of spaces with an <code>*</code> at each end. The third line is an <code>*</code>, a space, the 
message, a space, and an <code>*</code>. The last two lines will be the same as the second and first 
lines, respectively.</p>
<p>A sensible strategy is to build up the output a piece at a time. First we'll read the 
name, then we'll use it to construct the greeting, and then we'll use the greeting to build 
each line of the output. Here is a program that uses that strategy to solve our problem:</p>
<div class="prebox"><pre>
// <i>ask for a person's name, and generate a framed greeting</i>
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    std::cout &lt;&lt; &quot;Please enter your first name: &quot;;
    std::string name;
    std::cin &gt;&gt; name;

    // <i>build the message that we intend to write</i>
    const std::string greeting = &quot;Hello, &quot; + name + &quot;!&quot;;
    
    // <i>build the second and fourth lines of the output</i>
    const std::string spaces(greeting.size(), ' ');
    const std::string second = &quot;* &quot; + spaces + &quot; *&quot;;
	
    // <i>build the first and fifth lines of the output</i>
    const  std::string first(second.size(), '*');
	
    // <i>write it all</i>
    std::cout &lt;&lt; std::endl;
    std::cout &lt;&lt; first &lt;&lt; std::endl;
    std::cout &lt;&lt; second &lt;&lt; std::endl;
    std::cout &lt;&lt; &quot;* &quot; &lt;&lt; greeting &lt;&lt; &quot; *&quot; &lt;&lt; std::endl;
    std::cout &lt;&lt; second &lt;&lt; std::endl;
    std::cout &lt;&lt; first &lt;&lt; std::endl;
    
    return 0;
}
</pre></div>
<p>First, our program asks for the user's name, and reads that name into a variable named 
<code>name</code>. Then, it defines a variable named <code>greeting</code> that contains the message that it 
intends to write. Next, it defines a variable named <code>spaces</code>, which contains as many 
spaces as the number of characters in <code>greeting</code>. It uses the <code>spaces</code> variable to define 
a variable named <code>second</code>, which will contain the second line of the output, and then the 
program constructs <code>first</code> as a variable that contains as many <code>*</code> characters as the number 
of characters in <code>second</code>. Finally, it writes the output, a line at a time.</p>
<p>The <code>#include</code> directives and the first three statements in this program should be 
familiar. The definition of <code>greeting</code>, on the other hand, introduces three new ideas.</p>
<p>One idea is that we can give a variable a value as we define it. We do so by placing, 
between the variable's name and the semicolon that follows it, an <code>=</code> symbol followed by 
the value that we wish the variable to have. If the variable and value have different 
types-as &sect;10.2/176 shows that <code>strings</code> and string literals do-the implementation will 
<i><b>convert</b></i> the initial value to the type of the variable.</p>
<p>The second new idea is that we can use <code>+</code> to <i><b>concatenate</b></i> a <code>string</code> and a string 
literal-or, for that matter, two <code>string</code>s (but not two string literals). We noted in passing 
in Chapter 0 that <code>3 + 4</code> is <code>7</code>. Here we have an example in which <code>+</code> means something completely 
different. In each case, we can determine what the <code>+</code> operator does by examining 
the types of its operands. When an operator has different meanings for operands of different 
types, we say that the operator is <i><b>overloaded</b></i>.</p>
<p>The third idea is that of saying <i><b>const</b></i> as part of a variable's definition. Doing so 
promises that we are not going to change the value of the variable for the rest of its lifetime. 
Strictly speaking, this program gains nothing by using <code>const</code>. However, pointing 
out which variables will not change can make a program much easier to understand.</p>
<p>Note that if we say that a variable is <code>const</code>, we must initialize it then and there, 
because we won't have the opportunity later. Note also that the value that we use to initialize 
the <code>const</code> variable need not itself be a constant. In this example, we won't know 
the value of <code>greeting</code> until after we have read a value into name, which obviously can't 
happen until we run the program. For this reason, we cannot say that <code>name</code> is <code>const</code>, 
because we change its value by reading into it.</p>
<p>One property of an operator that never changes is its associativity. We learned in 
Chapter 0 that <code>&lt;&lt;</code> is left-associative, so that <code>std::cout &lt;&lt; s &lt;&lt; t</code> means the same as 
<code>(std::cout &lt;&lt; s) &lt;&lt; t</code>. Similarly, the <code>+</code> operator (and, for that matter, the <code>&gt;&gt;</code> operator) 
is also left-associative. Accordingly, the value of <code>&quot;Hello, &quot; + name + &quot;!&quot;</code> is the result of 
concatenating <code>&quot;Hello, &quot;</code> with <code>name</code>, and concatenating the result of that concatenation 
with <code>&quot;!&quot;</code>. So, for example, if the variable <code>name</code> contains <code>Estragon</code>, then the value of 
<code>&quot;Hello,  &quot; + name + &quot;!&quot;</code> is <code>Hello, Estragon!</code></p>
<p>At this point, we have figured out what we are going to say, and saved that information 
in the variable named <code>greeting</code>. Our next job is to build the frame that will enclose 
our greeting. In order to do so, we introduce three more ideas in a single statement:</p>
<div class="prebox"><pre>
std::string spaces(greeting.size(), ' ');
</pre></div>
<p>When we defined <code>greeting</code>, we used an <code>=</code> symbol to initialize it. Here, we are following 
spaces by two expressions, which are separated by a comma and enclosed in parentheses. 
When we use the <code>=</code> symbol, we are saying explicitly what value we would like the 
variable to have. By using parentheses in a definition, as we do here, we tell the implementation 
to <i><b>construct</b></i> the variable-in this case, <code>spaces</code>-from the expressions, in a way 
that depends on the type of the variable. In other words, in order to understand this definition, 
we must understand what it means to construct a <code>string</code> from two expressions.</p>
<p>How a variable is constructed depends entirely on its type. In this particular case, we 
are constructing a <code>string</code> from-well, from what? Both expressions are of forms that we 
haven't seen before. What do they mean?</p>
<p>The first expression, <code>greeting.size()</code>, is an example of calling a <i><b>member function</b></i>. 
In effect, the object named <code>greeting</code> has a component named <code>size</code>, which turns out to 
be a function, and which we can therefore call to obtain a value. The variable <code>greeting</code> 
has type <code>std::string</code>, which is defined so that evaluating <code>greeting.size()</code> yields 
an integer that represents the number of characters in <code>greeting</code>.</p>
<p>The second expression, <code>' '</code>, is a <i><b>character literal</b></i>. Character literals are completely distinct 
from string literals. A character literal is always enclosed in single quotes; a string 
literal is always enclosed in double quotes. The type of a character literal is the built-in 
type <i><b>char</b></i>; the type of a string literal is much more complicated, and we shall not explain 
it until &sect;10.2/176. A character literal represents a single character. The characters that 
have special meaning inside a string literal have the same special meaning in a character 
literal. Thus, if we want <code>'</code> or <code>\</code>, we must precede it by <code>\</code>. For that matter, <code>'\n', '\t', '\&quot;'</code>, 
and related forms work analogously to the way we saw in Chapter 0 that they 
work for string literals.</p>
<p>To complete our understanding of <code>spaces</code>, we need to know that when we construct 
a <code>string</code> from an integer value and a <code>char</code> value, the result has as many copies of the 
char value as the value of the integer. So, for example, if we were to define</p>
<div class="prebox"><pre>
std::string stars(10, '*');
</pre></div>
<p>then <code>stars.size()</code> would be 10, and stars itself would contain <code>**********</code>.</p>
<p>Thus, <code>spaces</code> contains the same number of characters as <code>greeting</code>, but all of those 
characters are blanks.</p>
<p>Understanding the definition of <code>second</code> requires no new knowledge: We concatenate 
<code>&quot; * &quot;</code>, our string of spaces, and <code>&quot; *&quot;</code> to obtain the second line of our framed message. 
The definition of <code>first</code> requires no new knowledge either; it gives <code>first</code> a value that 
contains as many <code>*</code> characters as the number of characters in <code>second</code>.</p>
<p>The rest of the program should be familiar; all it does is write strings in the same way 
we did in &sect;1.1/9.</p>
<div class="prevnext">
<a href="6.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="8.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>