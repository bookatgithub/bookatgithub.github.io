<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>12.1 A simple string class</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="72.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="74.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>12.1 A simple string class</h3>
<p>Let's start by defining a <code>Str</code> class that lets us create objects that behave approximately as we would like:</p>
<div class="prebox"><pre>
class Str {
public:
    typedef Vec&lt;char&gt;::size_type size_type;

    // <i>default constructor; create an empty</i> Str 
    Str() { }

    // <i>create a Str containing n copies of c</i>
    Str(size_type n, char c): data(n, c) { }

    // <i>create a Str from a null-terminated array of</i> char
    Str(const char* cp) {
        std::copy(cp, cp + std::strlen(cp), std::back_inserter(data));
    }

    // <i>create a Str from the range denoted by iterators b and e</i>
    template&lt;class In&gt; Str(In b, In e) {
        std::copy(b, e, std::back_inserter(data));
    }

private:
    Vec&lt;char&gt; data;
};
</pre></div>
<p>Our class delegates the work of managing its data to the <code>Vec</code> class that we wrote in Chapter 
11. That class is almost good enough to support our <code>Str</code>; it lacks only the <code>clear</code> function 
that Chapter 11 had left as an exercise.</p>
<p>The <code>Str</code> class has four constructors, each of which arranges to create <code>data</code> as an 
appropriately initialized <code>Vec</code> object.</p>
<p>The default constructor for <code>Str</code> implicitly invokes the <code>Vec</code> default constructor to 
create an empty <code>Str</code>. Note that because our class has other constructors, we must explicitly 
define the default constructor, even though it does exactly what the synthesized default 
constructor would have done. The other three constructors take values, which we use to 
construct or initialize <code>data</code>.</p>
<p>The constructor that takes a size and a character uses the corresponding <code>Vec</code> constructor 
to construct <code>data</code>. It has no further work to do, so the constructor body is empty.</p>
<p>The last two constructors are similar to each other. Their constructor initializers are 
empty, which means that <code>data</code> is implicitly initialized as an empty <code>Vec</code>. Each constructor 
asks copy to append the supplied characters to the initially empty <code>data</code>. For example, 
the constructor that takes a <code>const char*</code> uses <code>strlen</code> to determine the length of the 
string. From this length, it computes two iterators that denote the input characters, and 
asks copy and <code>back_inserter</code> to append those characters to <code>data</code>. Thus, the constructor 
will cause <code>data</code> to contain copies of the characters in the array denoted by <code>cp</code>.</p>
<p>The most interesting constructor is the final one, which takes two iterators and creates 
a new <code>Str</code> that contains a copy of the characters in the given sequence. Like the previous 
constructor, it relies on <code>copy</code> and <code>back_inserter</code> to append the values in the range of 
<code>[b, e)</code> to <code>data</code>. What's interesting about this constructor is that it is itself a template 
function. Because it is a template, it effectively defines a family of constructors that can be 
instantiated for different types of iterators. For example, this constructor could be used to 
create a <code>Str</code> from an array of characters, or from a <code>Vec&lt;char&gt;</code>.</p>
<p>It is important to note that the class does not define a copy constructor, assignment 
operator, or destructor. Why not?</p>
<p>The answer is that the defaults work. The <code>Str</code> class itself does no memory allocation. 
It can leave the details of memory management to the synthesized operations, which call 
the corresponding <code>Vec</code> operations. One way to see that the defaults work is to note that 
the <code>Str</code> class does not need a destructor. Indeed, if it had one, there would be no work 
for it to do. In general, a class that needs no destructor doesn't need an explicit copy constructor 
or assignment operator either (&sect;11.3.6/201).</p>
<div class="prevnext">
<a href="72.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="74.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>