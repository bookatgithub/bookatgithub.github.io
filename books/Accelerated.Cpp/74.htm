<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>12.2 Automatic conversions</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="73.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="75.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>12.2 Automatic conversions</h3>
<p>So far, we have defined a set of constructors and implicitly defined copying, assignment, 
and destruction. These operations give <code>Str</code> valuelike behavior: When we copy a <code>Str</code> 
object the original and the copy will be independent of each other. Our next problem is to 
think about conversions. Values of built-in type can often be converted automatically 
from one type to another. For example, we can initialize a <code>double</code> from an <code>int</code>, and we 
can also assign an <code>int</code> to a <code>double</code>:</p>
<div class="prebox"><pre>
double d = 10;  // <i>convert 10 to double and use the converted value to initialize</i> d
double d2;
d2 = 10;        // <i>convert </i>10 <i>to </i>double <i>and assign the converted value to </i>d
</pre></div>
<p>In the case of our <code>Str</code> class, we have defined how to construct a <code>Str</code> from a 
<code>const char*</code>, so we can write</p>
<div class="prebox"><pre>
Str s(&quot;hello&quot;);     // <i>construct s</i>
</pre></div>
<p>This definition constructs s by explicitly asking for the constructor that takes a 
<code>const char*</code> argument. We would also like to be able to write</p>
<div class="prebox"><pre>
Str t = &quot;hello&quot;;       //  <i>initialize </i>t
s = &quot;hello&quot;;           // <i>assign a new value to</i> s
</pre></div>
<p>Remember from &sect;11.3.3/199 that the <code>=</code> symbol has two different meanings in this last 
example. The first statement defines <code>t</code>, so the <code>=</code> indicates initialization. This form of initialization 
always requires the copy constructor, which takes a <code>const Str&amp;</code> as its argument. 
The second statement is an expression statement, not a declaration, so the <code>=</code> is an 
assignment operator. The only assignment operator that is relevant for <code>Str</code> objects is the 
one that the compiler defined for us, which also expects a <code>const Str&amp;</code> as its argument. In 
other words, each statement in this second example uses a string literal, which has type 
<code>const char*</code>, where a <code>const Str&amp;</code> is expected.</p>
<p>We might think, therefore, that we need to give class <code>Str</code> an additional assignment 
operator with a parameter of type <code>const char*</code>, and figure out how to overload the 
copy constructor. Fortunately, it turns out that we do not need to do so, because there is 
already a constructor that takes a <code>const char*</code>, and that constructor also acts as a 
<i><b>user-defined conversion</b>. </i>User-defined conversions say how to transform to and from objects of 
class type. As with built-in conversions, the compiler will apply user-defined conversions 
to convert a value into the type that is needed.</p>
<p>A class can define conversions in two ways: It can convert from other types to its type, 
or from its type to other types. We'll discuss this second form of conversion in &sect;12.5/222. 
The more common conversion defines how to convert other types to the type that we are 
defining. We do so by defining a constructor with a single argument.</p>
<p>Our <code>Str</code> class already has such a constructor, namely the one that takes a 
<code>const char*</code>. Therefore, the compiler will use this constructor when an object of type <code>Str</code> is 
needed and an object of type <code>const char*</code> is available. The assignment of a <code>const char*</code> to a 
<code>Str</code> is exactly such a situation. When we write <code>s = &quot;hello&quot;</code>; what really 
happens is that the compiler uses the <code>Str(const char*)</code> constructor to create an 
unnamed local temporary of type <code>Str</code> from the string literal. It then calls the (synthesized) 
assignment operator of class <code>Str</code> to assign this temporary to s.</p>
<div class="prevnext">
<a href="73.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="75.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>