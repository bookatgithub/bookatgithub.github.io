<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>12.4 Some conversions are hazardous</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="75.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="77.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>12.4 Some conversions are hazardous</h3>
<p>Recall that in &sect;11.2.2/190, we defined as <code>explicit</code> the constructor that took a size. Now t
hat we know that constructors that take a single argument define conversions, we can 
understand what happens when we make a constructor <code>explicit</code>: Doing so tells the 
compiler to use that constructor only to construct objects explicitly. The compiler will not 
use an <code>explicit</code> constructor to create objects implicitly by converting operands in 
expressions or function calls.</p>
<p>To understand why <code>explicit</code> constructors might be useful, let's assume that we did 
not declare the <code>Vec</code> constructor as <code>explicit</code>. Then we could implicitly build a <code>Vec</code> of a 
given size. We could use this implicit conversion when calling a function, such as our 
<code>frame</code> function from &sect;5.8.1/93. Recall that that function takes a single parameter of type 
<code>const <code>vector</code>&lt;string&gt;&amp;</code>, and produces a character picture that puts a frame around 
the input <code>vector</code>. Suppose that <code>frame</code> used <code>Vec</code> instead of <code>vector</code>, that we had not 
given <code>Vec</code> an <code>explicit</code> constructor, and that we were to execute</p>
<div class="prebox"><pre>
Vec&lt;string&gt; p = frame(42);
</pre></div>
<p>What would happen? What should happen? More important, how could a user figure 
out what will happen?</p>
<p>In this case, what would happen is that the user would get a framed picture with 42 
empty rows. Was this behavior what the user intended? Isn't it more likely that the user 
thought that the program would put a frame around the value 42? This kind of call is, 
more likely than not, a mistake, and so our <code>Vec</code> class—and, for that matter, the standard 
<code>vector</code> class—makes the constructor that takes an integer value <code>explicit</code>.</p>
<p>In general, it is useful to make <code>explicit</code> the constructors that define the structure of 
the object being constructed, rather than its contents. Those constructors whose arguments 
become part of the object usually should not be <code>explicit</code>.</p>
<p>As an example, the <code>string</code> and <code>Str</code> classes have constructors that take a single 
<code>const char*</code> and are not <code>explicit</code>. Each constructor uses its <code>const char*</code> argument 
to initialize the value of its object. Because the argument determines the value of the 
resulting object, it is sensible to allow automatic conversions from a <code>const char*</code> in 
expressions or function calls.</p>
<p>On the other hand, the <code>vector</code> and <code>Vec</code> constructors that take a single argument of 
type <code>Vec::size_type</code> are <code>explicit</code>. These constructors use their argument value to 
determine how many elements to allocate. The constructor argument determines the 
structure of the object, but not its value.</p>
<div class="prevnext">
<a href="75.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="77.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>