<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>12.5 Conversion operators</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="76.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="78.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>12.5 Conversion operators</h3>
<p>In &sect;12.2/213, we saw that some constructors also define conversions. Class authors can 
also define explicit <i><b>conversion operators</b>, </i>which say how to convert an object from its type 
to a target type. Conversion operators must be defined as members of a class. The name 
of a conversion operator is <code>operator</code> followed by the target type name. Thus, if a class 
has a member called <code>operator double</code>, that member says how to create a value of type 
<code>double</code> from a value of the class type. For example,</p>
<div class="prebox"><pre>
class Student_info {
public:
    operator double();
    // ...
};
</pre></div>
<p>would say how to create a <code>double</code> from a <code>Student_info</code> object. The meaning of this 
conversion would depend on the definition of the operator, which might be to convert the 
object to its corresponding final grade. The compiler would use this conversion operator 
any time we had an object of type <code>Student_info</code> but needed an object of type <code>double</code>. 
So, for example, if <code>vs</code> were a <code>vector&lt;Student_info&gt;</code>, we could calculate the average 
grade of all students as follows:</p>
<div class="prebox"><pre>
vector&lt;Student_info&gt; vs;
// <i>fill up</i> vs

double d = 0;
for (int i = 0; i != vs.size(); ++i)
    d += vs[i];   // vs[i] <i>is automatically converted to</i> double

cout &lt;&lt; &quot;Average grade: &quot; &lt;&lt; d / vs.size() &lt;&lt; endl;
</pre></div>
<p>Conversion operators are most often useful when converting from a class type to a 
built-in type, but they can also be useful when converting to another class type for which 
we do not own the code. In either case, we cannot add a constructor to the target type, so 
we can define the conversion operator only as part of the class that we own.</p>
<p>In fact, we use this kind of conversion operator every time we write a loop that implicitly 
tests the value of an <code>istream</code>. As we discussed in &sect;3.1.1/39, we can use an <code>istream</code> 
object where a condition is expected:</p>
<div class="prebox"><pre>
if (cin &gt;&gt; x) { /*...*/ } 
</pre></div>
<p>which we saw was equivalent to</p>
<div class="prebox"><pre>
cin &gt;&gt; x;
if (cin) { /*...*/ }
</pre></div>
<p>We can now understand what happens in this expression.</p>
<p>As we know, the <code>if</code> tests a condition, which is an expression that yields a truth value. 
The precise type of such a truth value is <code>bool</code>. Using a value of any arithmetic or pointer 
type automatically converts the value to type <code>bool</code>, so we can use values of these types as 
the expression in a condition. Of course, <code>iostream</code> is neither a pointer nor an arithmetic 
type. However, the standard library defines a conversion from type <code>istream</code> to <b>void*, </b>
which is a pointer to <code>void</code>. It does so by defining <code>istream::operator void*</code>, which 
tests various status flags to determine whether the <code>istream</code> is valid, and returns either 0 
or an implementation-defined nonzero <code>void*</code> value to indicate the state of the stream.</p>
<p>We have not previously used the <code>void*</code> type. We said in &sect;6.2.2/114 that the <code>void</code> 
type could be used only in a few ways—the basis for a pointer being one of them. A 
pointer to <code>void</code> is sometimes called a universal pointer, because it is a pointer that can 
point to any type of object. Of course, you cannot dereference the pointer, because the 
type of the object to yield isn't known. But one thing that can be done with a <code>void*</code> is to 
convert it to <code>bool</code>, which is exactly how it is used in this context.</p>
<p>The reason that class <code>istream</code> defines <code>operator void*</code> rather than <code>operator bool</code> 
is to allow the compiler to detect the following erroneous usage:</p>
<div class="prebox"><pre>
int x;
cin &lt;&lt; x;      // <i>we should have written </i>cin &gt;&gt; x;
</pre></div>
<p>If class <code>istream</code> were to define <code>operator bool</code>, this expression would use 
<code>istream::operator bool</code> to convert <code>cin</code> to <code>bool</code>, and then convert the resulting 
<code>bool</code> value to <code>int</code>, shift that value left by a number of bits equal to the value of <code>x</code>, and 
throw the result away! By defining a conversion to <code>void*</code>, rather than to an arithmetic 
type, the standard library still allows an <code>istream</code> to be used as a condition, but prevents 
it from being used as an arithmetic value.</p>
<div class="prevnext">
<a href="76.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="78.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>