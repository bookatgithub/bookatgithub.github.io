<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>12.7 Details</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="78.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="80.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>12.7 Details</h3>
<p><b>Conversions </b>are defined by non<code>explicit</code> constructors that take a single argument, or by 
defining a conversion operator of the form <code>operator <i>type-name</i>()</code>, where <i><code>type-name</code> </i>
names the type to which the class type can be converted. Conversion operators must be 
members. If two classes define conversions to each other's types, ambiguities can result.</p>
<p><b>friend </b>declarations can occur anywhere within the class definition, and allow the 
<code>friend</code> to access <code>private</code> members of the class granting <code>friend</code>ship.</p>
<div class="prebox"><pre>
template&lt;class T&gt;
class Thing {
    friend std::istream&amp; operator&gt;&gt;(std::istream&amp;, Thing&amp;);
    // ...
};
</pre></div>
<p>As we will see in &sect;13.4.2/246, classes can also be named as <code>friend</code>s.</p>
<p><b>Template functions as members: </b>A class may have template functions as members. The 
class itself might or might not be a template. A class that has a template member function 
effectively has an unbounded family of member functions with the same name. Template 
member functions are declared and defined as are any other template functions.</p>
<p><b>string operations</b></p>
<p><code>s.c_str()</code></p>
<div class="details">
Yields a <code>const char*</code> that points to a null-terminated array. The data 
in the array are valid only until the next <code>string</code> operation that might 
modify <code>s</code>. The user may not <code>delete</code> the pointer and should not hold a 
copy of it because the contents pointed to have a limited lifetime.
</div>    
<p><code>s.data()</code></p>
<div class="details">
Similar to <code>s.c_str()</code>, but the array is not null terminated.
</div>
<p><code>s.copy(p, n)</code></p>
<div class="details">
Copies up to an integral number <code>n</code> of characters from <code>s</code> into space 
pointed to by the character pointer <code>p</code>. The user is responsible for ensuring 
that <code>p</code> points at space that is sufficient to hold n characters.
</div>
<h4>Exercises</h4>
<p><b>12-0.</b> Compile, execute, and test the programs in this chapter.</p>
<p><b>12-1.</b> Reimplement the <code>Str</code> class, but choose an implementation strategy that requires that the 
class manage the storage itself. For example, you might store an array of <code>char</code> and a 
length. Consider what implications this change in design has for copy control. Also consider the 
cost of using <code>Vec</code>, (e.g., in storage overhead).</p>
<p><b>12-2.</b> Implement the <code>c_str</code>, <code>data</code>, and copy functions.</p>
<p><b>12-3.</b> Define the relational operators for <code>Str</code>. In doing so, you will want to know that the 
<code>&lt;cstring&gt;</code> header defines a function called <code>strcmp</code>, which compares two character 
pointers. The function returns a negative integer if the null-terminated character array 
denoted by the first pointer is less than the second, zero if the two strings are equal, or a 
positive value if the first string is greater than the second.</p>
<p><b>12-4.</b> Define the equality and inequality operators for <code>Str</code>.</p>
<p><b>12-5.</b> Implement concatenation for <code>Str</code> so as not to rely on conversions from <code>const char*</code>.</p>
<p><b>12-6.</b> Give <code>Str</code> an operation that will let us implicitly use a <code>Str</code> object as a condition. The test 
should fail if the <code>Str</code> is empty, and should succeed otherwise.</p>
<p><b>12-7.</b> The standard <code>string</code> class provides random-access iterators to manipulate the <code>string</code>'s 
characters. Add iterators and the iterator operations begin and end to your <code>Str</code> class.</p>
<p><b>12-8.</b> Add the <code>getline</code> function to the <code>Str</code> class.</p>
<p><b>12-9.</b> Use class <code>ostream_iterator</code> to reimplement the <code>Str</code> output operator. Why didn't we 
ask you to reimplement the input operator using class <code>istream_iterator</code>?</p>
<p><b>12-10.</b> Having seen in &sect;12.1/212 how <code>Str</code> defined a constructor that takes a pair of iterators, we 
can imagine that such a constructor would be useful in class <code>Vec</code>. Add this constructor to 
<code>Vec</code>, and reimplement <code>Str</code> to use the <code>Vec</code> constructor instead of calling <code>copy</code>.</p>
<p><b>12-11.</b> If you add the operations listed in these exercises, then you can use this <code>Str</code> class in all the 
examples in this book. Reimplement the operations on character pictures from Chapter 5 
and the <code>split</code> functions from &sect;5.6/87 and &sect;6.1.1/103.</p>
<p><b>12-12.</b> Define the <code>insert</code> function that takes two iterators for the <code>Vec</code> and <code>Str</code> classes. 
<p><b>12-13.</b> Provide an <code>assign</code> function that could be used to assign the values in an array to a <code>Vec</code>. </p>
<p><b>12-14.</b> Write a program to initialize a <code>Vec</code> from a <code>string</code>.</p>
<p><b>12-15.</b> The <code>read_hw</code> function from &sect;4.1.3/57 checked the stream from which it read to determine 
whether the function had hit end-of-file, or had encountered an invalid input. Our <code>Str</code> 
input operator does no such check. Why? Will it leave the stream in an invalid state?</p>
<div class="prevnext">
<a href="78.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="80.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>