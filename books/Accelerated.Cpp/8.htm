<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>1.3 Details</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="7.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="9.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>1.3 Details</h3>
<p><b>Types:</b></p>
<p><code>char</code></p>
<div class="details">
Built-in type that holds ordinary characters as defined by the implementation.
</div>
<p><code>wchar_t</code></p>
<div class="details">
Built-in type intended to hold &quot;wide characters,&quot; which are big enough to<br />
hold characters for languages such as Japanese.</p>
</div>
<p><b>The string type</b> is defined in the standard header <code>&lt;string&gt</code>;. An object of type 
<code>string</code> contains a sequence of zero or more characters. If <code>n</code> is an integer, <code>c</code> is a <code>char, is</code> 
is an input stream, and <code>os</code> is an output stream, then the <code>string</code> operations include</p>
<p><code>std::string  s;</code></p>
<div class="details">
Defines s as a variable of type <code>std::string</code> that is initially empty.
</div>
<p><code>std::string t = s;</code></p>
<div class="details">
Defines <code>t</code> as a variable of type <code>std::string</code> that initially contains a copy <br />
of the characters in <code>s</code>, where s can be either a <code>string</code> or a string literal.
</div>
<p><code>std::string  z(n, c);</code></p>
<div class="details">
Defines <code>z</code> as a variable of type <code>std::string</code> that initially contains <code>n</code> copies <br />
of the character <code>c</code>. Here, <code>c</code> must be a <code>char</code>, not a <code>string</code> or a string literal.
</div>
<p><code>os &lt;&lt; s</code></p>
<div class="details">
Writes the characters contained in <code>s</code>, without any formatting changes, on the <br />
output stream denoted by <code>os</code>. The result of the expression is <code>os</code>.
</div>
<p><code>is &gt;&gt; s</code></p>
<div class="details">
Reads and discards characters from the stream denoted by <code>is</code> until encountering <br />
a character that is not whitespace. Then reads successive characters <br />
from <code>is</code> into <code>s</code>, overwriting whatever value <code>s</code> might have had, until the next <br />
character read would be whitespace. The result is <code>is</code>.
</div>
<p><code>s + t</code></p>
<div class="details">
The result of this expression is an <code>std::string</code> that contains a copy of the <br />
characters in <code>s</code> followed by a copy of the characters in <code>t</code>. Either <code>s</code> or <code>t</code>, but <br />
not both, may be a string literal or a value of type <code>char</code>.
</div>
<p><code>s.size()</code></p>
<div class="details">
The number of characters in <code>s</code>.
</div>
<p><b>Variables</b> can be defined in one of three ways:</p>
<div class="prebox"><pre>
std::string hello = &quot;Hello&quot;;      //<i> define the variable with an explicit initial value</i>

std::string stars(100, '*');      // <i>construct the variable</i>
                                  // <i>according to its type and the given expressions</i>

std::string name;                 // <i>define the variable with an implicit initialization,</i>
                                  // <i>which depends on its type</i>
</pre></div>
<p>Variables defined inside a pair of curly braces are local variables/which exist only while 
executing the part of the program within the braces. When the implementation reaches 
the <code>}</code>, it destroys the variables, and returns any memory that they occupied to the system. 
Defining a variable as <code>const</code> promises that the variable's value, will not change during 
its lifetime. Such a variable must be initialized as part of its definition, because there is no 
way to do so later.</p>
<p><b>Input:</b> Executing <code>std::cin &gt;&gt; v</code> discards any whitespace characters in the standard 
input stream, then reads from the standard input into variable <code>v</code>. It returns <code>std::cin</code>, 
which has type <code>istream</code>, in order to allow chained input operations.</p>
<h4>Exercises</h4>
<p><b>1-0.</b> Compile, execute, and test the programs in this chapter.</p>
<p><b>1-1.</b> Are the following definitions valid? Why or why not?</p>
<div class="prebox"><pre>
const std::string hello = &quot;Hello&quot;;
const std::string message = hello + &quot;, world&quot; + &quot;!&quot;;
</pre></div>
<p><b>1-2.</b> Are the following definitions valid? Why or why not?</p>
<div class="prebox"><pre>
const std::string exclam = &quot;!&quot;;
const std::string message = &quot;Hello&quot; + &quot;, world&quot; + exclam;
</pre></div>
<p><b>1-3.</b> Is the following program valid? If so, what does it do? If not, why not?</p>
<div class="prebox"><pre>
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    { const std::string s = &quot;a string&quot;;
      std::cout &lt;&lt; s &lt;&lt; std::endl; }
   
    { const std::string s = &quot;another string&quot;;
      std::cout &lt;&lt; s &lt;&lt; std::endl; }
    return 0;
}
</pre></div>
<p><b>1-4.</b> What about this one? What if we change <code>}}</code> to <code>};}</code> in the third line from the end?</p>
<div class="prebox"><pre>
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    { const std::string s = &quot;a string&quot;;
      std::cout &lt;&lt; s &lt;&lt; std::endl;
    { const std::string s = &quot;another string&quot;;
      std::cout &lt;&lt; s &lt;&lt; std::endl; }}
    return 0;
}
</pre></div>
<p><b>1-5.</b> Is this program valid? If so, what does it do? If not, say why not, and rewrite it to be valid.</p>
<div class="prebox"><pre>
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    { std::string s = &quot;a string&quot;;
    { std::string x = s + &quot;, really&quot;;
    std::cout &lt;&lt; s &lt;&lt; std::endl; }
    std::cout &lt;&lt; x &lt;&lt; std::endl;
    }
    return 0;
}
</pre></div>
<p><b>1-6.</b> What does the following program do if, when it asks you for input, you type two names (for 
example, Samuel Beckett)? Predict the behavior before running the program, then try it.</p>
<div class="prebox"><pre>
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    std::cout &lt;&lt; &quot;What is your name? &quot;;
    std::string name;
    std::cin &gt;&gt; name;
    std::cout &lt;&lt; &quot;Hello, &quot; &lt;&lt; name
              &lt;&lt; std::endl &lt;&lt; &quot;And what is yours? &quot;;
    std::cin &gt;&gt; name;
    std::cout &lt;&lt; &quot;Hello, &quot; &lt;&lt; name
              &lt;&lt; &quot;; nice to meet you too!&quot; &lt;&lt; std::endl;
    return 0;
}
</pre></div>
<div class="prevnext">
<a href="7.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="9.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>