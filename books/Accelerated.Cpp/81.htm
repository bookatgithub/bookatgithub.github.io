<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>13.1 Inheritance</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="80.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="82.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>13.1 Inheritance</h3>
<p>In our grading problem we know that a record for graduate credit is the same as for 
undergraduate credit, except that it has additional properties related to the thesis. Such 
contexts are natural places for <i><b>inheritance</b>. </i>Inheritance is one of the cornerstones of OOP. 
The basic idea is that we can often think of one class as being just like another, except for 
some extensions. In this problem, all students must complete the homework and exams, 
but some must also do a <code>thesis</code>. What we'd like is to define two classes: one to represent 
the core requirements and the other to represent the requirements for graduate credit.</p>
<p>We mostly know how to write the first of these classes: It is similar to our previous 
<code>Student_info</code> class, which we'll rename <code>Core</code> for reasons that will become fully apparent 
in &sect;13.4/243. For now, what's useful to know is that <code>Core</code> no longer represents all 
kinds of students, but only those students who meet the core requirements for the course.</p>
<p>We'd like to reserve <code>Student_info</code> as a <code>name</code> that denotes any kind of student. In addition 
to its name change, we'll add a private utility function to our <code>Core</code> class to read the 
portion of a student's record that all students have in common:</p>
<div class="prebox"><pre>
class Core {
public:
    Core();
    Core(std::istream&amp;);
    std::string name() const;
    std::istream&amp; read(std::istream&amp;);
    double grade() const;
private:
    std::istream&amp; read_common(std::istream&amp;);
    std::string n;
    double midterm, final;
    std::vector&lt;double&gt; homework;
};
</pre></div>
<p>Class <code>Grad</code> will capture the extra requirements for obtaining graduate credit:</p>
<div class="prebox"><pre>
class Grad: public Core {
public:
    Grad();
    Grad(std::istream&amp;);
    double grade() const;
    std::istream&amp; read(std::istream&amp;);
private:
    double thesis;
};
</pre></div>
<p>This definition says that we're defining a new type named <code>Grad</code>, which <i><b>is derived from </b></i>or 
<b><i>inherits from </i></b><code>Core</code>, or, equivalently, that <code>Core</code> <i><b>is a base class of </b></i><code>Grad</code>. Because <code>Grad</code> 
inherits from <code>Core</code>, every member of <code>Core</code> is also a member of <code>Grad</code>—except for the constructors, 
the assignment operator, and destructor. The <code>Grad</code> class can add members of 
its own, as we do here with the data member <code>thesis</code> and the constructors for <code>Grad</code>. It 
can redefine members from the base class, as we do with the <code>grade</code> and <code>read</code> functions. 
However, a derived class cannot delete any of the base class' members.</p>
<p>The use of <code>public</code> in <code>public Core</code> says that the fact that <code>Grad</code> inherits from <code>Core</code> is 
part of its interface, rather than part of its implementation. That is, <code>Grad</code> inherits the 
<code>public</code> interface to <code>Core</code>, which becomes part of the <code>public</code> interface to <code>Grad</code>. The 
<code>public</code> members of <code>Core</code> are effectively <code>public</code> members of <code>Grad</code>. For example, if we 
have a <code>Grad</code> object, we can call its <code>name</code> member function to obtain the student's name, 
even though <code>Grad</code> does not define its own <code>name</code> function.</p>
<p>The <code>Grad</code> class differs from the <code>Core</code> class in that it keeps track of a grade for the thesis, 
and uses a different algorithm for calculating the final grade. Thus, <code>Grad</code> objects will 
have five data elements. Four of them are inherited from <code>Core</code>; the fifth is a <code>double</code> 
value named <code>thesis</code>. It will have two constructors and four member functions, two of 
which redefine the corresponding members of <code>Core</code>, and the <code>name</code> and <code>read_common</code> 
functions, which it inherits from <code>Core</code>.</p>
<h4>13.1.1 Protection revisited</h4>
<p>As it stands, all four data elements and the <code>read_common</code> function in <code>Core</code> are inaccessible 
to member functions in <code>Grad</code>. We said that the members of <code>Core</code> were <code>private</code>. 
Only the class and its friends may access <code>private</code> members. Unfortunately, in order to 
write the <code>Grad</code> versions of the <code>grade</code> and <code>read</code> functions, we need access to some of 
these <code>private</code> members. We can fix this problem by rewriting the <code>Core</code> class using a 
protection label that we have not seen before:</p>
<div class="prebox"><pre>
class Core {
public:
    Core() ;
    Core(std::istream&amp;);
    std::string name() const;
    double grade() const;
    std::istream&amp; read(std::istream&amp;);
protected:
    std::istream&amp; read_common(std::istream&amp;);
    double midterm, final;
    std::vector&lt;double&gt; homework;
private:
    std::string n;
};
</pre></div>
<p>We still say that <code>n</code> is <code>private</code>, but now the <code>read_common</code> function and the <code>midterm, final</code>, 
and <code>homework</code> data members are <b>protected. </b>The <code>protected</code> label gives 
derived classes, such as <code>Grad</code>, access to the <code>protected</code> members of their constituent 
base-class objects, but keeps these elements inaccessible to users of the classes.</p>
<p>Because <code>n</code> is a private member of <code>Core</code>, only the members and <code>friend</code>s of class 
<code>Core</code> may access <code>n</code>. <code>Grad</code> has no special access to <code>n</code>; it can access <code>n</code> only through <code>public</code> 
member functions of <code>Core</code>.</p>
<p>The <code>read, name</code>, and <code>grade</code> functions are <code>public</code> members of <code>Core</code>, and as such they 
are available to all users of class <code>Core</code>—including classes derived from <code>Core</code>.</p>
<h4>13.1.2 Operations</h4>
<p>To complete our classes, we need to implement four constructors: the default constructor 
and the constructor that takes an <code>istream</code>, once for each class. We must also implement 
six operations: the <code>name</code> and <code>read_common</code> operations in class <code>Core</code>, and the <code>read</code> and 
<code>grade</code> functions for both classes. We'll see how to write the constructors in &sect;13.1.3/231.</p>
<p>Before writing our code, we need to think a bit about how student records will be 
structured. As before, we'll want to accommodate a variable number of homework 
assignments, so those grades must come at the end of each record. Therefore, we'll 
assume that our records will consist of a student's name followed by the midterm and 
final exam grades. If the record is for undergraduate credit, then the homework grades 
will follow immediately. If the record is for graduate credit, then the thesis grade will follow 
the final exam, but precede the homework grades.</p>
<p>With this information, we know how to write the operations on <code>Core</code>:</p>
<div class="prebox"><pre>
string Core::name() const { return n; }

double Core::grade() const
{
    return ::grade(midterm, final, homework);
}

istream&amp; Core::read_common(istream&amp; in)
{
    // <i>read and store the student's name and exam grades</i>
    in &gt;&gt; n &gt;&gt; midterm &gt;&gt; final;
return in;
}

istream&amp; Core::read(istream&amp; in)
{
    read_common(in);
    read_hw(in, homework);
    return in;
}
</pre></div>
<p>The <code>Grad::read</code> function is similar, but reads the <code>thesis</code> before calling <code>read_hw</code>:</p>
<div class="prebox"><pre>
istream&amp; Grad::read(istream&amp; in)
{
    read_common(in);
    in &gt;&gt; thesis;
    read_hw(in, homework);
    return in;
}
</pre></div>
<p>Note that in the definition of <code>Grad::read</code>, we can refer to elements from the base class 
without any special notation, because these elements are also members of <code>Grad</code>. If we 
wanted to be explicit about the fact that the members were inherited from <code>Core</code>, we could 
use the scope operator to do so:</p>
<div class="prebox"><pre>
istream&amp; Grad::read(istream&amp; in)
{
    Core::read_common(in);
    in &gt;&gt; thesis;
    read_hw(in, Core::homework);
    return in;
}
</pre></div>
<p>Of course, the <code>thesis</code> member is unqualified because that member is a part of <code>Grad</code> and 
not a part of <code>Core</code>. We could have written <code>Grad::thesis</code>, but not <code>Core::thesis</code>.</p>
<p>The <code>grade</code> function changes to account for the effect of <code>thesis</code>. Our policy is that the 
student receives the lesser of the grade obtained on the <code>thesis</code> and the grade that would 
have been obtained if we just counted the exams and homework scores:</p>
<div class="prebox"><pre>
double Grad::grade() const
{
    return min(Core::grade(), thesis);
}
</pre></div>
<p>Here we want to call the <code>grade</code> function in the base class in order to calculate the score 
independently from the <code>thesis</code> grade. In this case, the use of the scope operator is essential. 
Had we written</p>
<div class="prebox"><pre>
return min(grade(), thesis);
</pre></div>
<p>we would have (recursively) called the <code>Grad</code> version of <code>grade</code>, leading to disaster.</p>
<p>We use the <code>min</code> function from <code>&lt;algorithm&gt;</code> to determine which grade to return. The 
<code>min</code> function operates like <code>max</code> except that it returns the smaller of its two operands. As 
with <code>max</code>, those operands must be of exactly the same type.</p>
<h4>13.1.3 Inheritance and constructors</h4>
<p>Before we write the constructors for <code>Core</code> and <code>Grad</code>, we need to understand how the 
implementation creates objects of a derived type. As with any class type, the implementation 
begins by allocating space for the object. Next, it runs the appropriate constructor to 
initialize the object. The fact that the object is of a derived type adds an extra step to the 
construction process in order to construct the base-class part of the object. Derived objects 
are constructed by</p>
<ul>
<li>Allocating space for the entire object (base-class members as well as derived members)</li>
<li>Calling the base-class constructor to initialize the base-class part(s) of the object</li>
<li>Initializing the members of the derived class as directed by the constructor initializer</li>
<li>Executing the body of the derived-class constructor, if any</li>
</ul>
<p>The only new part is how we select which base-class constructor to run. Not surprisingly, 
we use the constructor initializer to specify the base-class constructor that we want. The 
derived-class constructor initializer names its base class followed by a (possibly empty) 
list of arguments. These arguments are the initial values to use in constructing the base-
class part; they serve to select the base-class constructor to run in order to initialize the base. 
If the initializer does not specify which base-class constructor to run, then the base-
class default constructor is used to build the base-part of the object.</p>
<div class="prebox"><pre>
class Core {
public:
    // <i>default constructor for</i> Core
    Core(): midterm(O), final(0) { }

    // <i>build a Core from an istream</i>
    Core(std::istream&amp; is) { read(is); }
    // ...
};

class Grad: public Core {
public:
    // <i>both constructors implicitly use</i> Core::Core() <i>to initialize the base part</i>
    Grad(): thesis(0) { }

    Grad(std::istream&amp; is) { read(is); }
    //  ...
};
</pre></div>
<p>The constructors for <code>Core</code> are identical to the ones in &sect;9.5.1/165 and &sect;9.5.2/166: They 
specify how to make a <code>Core</code> from nothing or from an <code>istream</code>. The constructors for 
<code>Grad</code> say how to create a <code>Grad</code> from these same values, that is, either from no argument 
or from an <code>istream&amp;</code>. It is worth noting that there is no requirement that the derived-
class constructors take the same argument(s) as the constructors for the base class.</p>
<p>The default constructor for <code>Grad</code> says that to make a <code>Grad</code> from nothing, the implementation 
should construct its <code>Core</code> part and set the <code>thesis</code> member to 0. As it stands, 
most of this work is implicit: First, because the constructor initializer is empty, we implicitly 
invoke the default constructor for <code>Core</code> to initialize the <code>midterm, final, homework</code>, 
and <code>name</code> members. In the same fashion, the <code>Core</code> default constructor implicitly initializes 
<code>name</code> and <code>homework</code> through their default constructors, and explicitly initializes only 
<code>midterm</code> and <code>final</code>. The only explicit action that the default <code>Grad</code> constructor takes is 
to initialize the <code>thesis</code> member. Once this is done, there is no other work for the constructor 
to do, so the function body is empty.</p>
<p>We make a <code>Grad</code> from an <code>istream</code> in much the same way that we make a <code>Core</code> from 
an <code>istream</code>—namely, by calling the <code>read</code> member. Before doing so, though, we first 
(implicitly) invoke the base-class default constructor to initialize the base part of the 
object. Then, because this constructor is a member of class <code>Grad</code>, the <code>read</code> that is called is 
<code>Grad::read</code>. We don't bother to initialize <code>thesis</code> because the <code>read</code> function reads a 
value into <code>thesis</code> from is.</p>
<p>It is important to understand how derived-class objects are constructed. Executing</p>
<div class="prebox"><pre>
Grad g;
</pre></div>
<p>causes the system to allocate enough space to hold <code>Grad</code>'s five data elements, run the 
<code>Core</code> default constructor to initialize the data members in the <code>Core</code> part of <code>g</code>, and then 
run the default constructor for <code>Grad</code>. Similarly, if we execute</p>
<div class="prebox"><pre>
Grad g(cin);
</pre></div>
<p>then after allocating an appropriate amount of space, the implementation will run the 
<code>Core</code> default constructor, followed by the <code>Grad::Grad(istream&amp;)</code> constructor to read 
values into the <code>name, midterm, final, thesis</code>, and <code>homework</code> members.</p>
<div class="prevnext">
<a href="80.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="82.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>