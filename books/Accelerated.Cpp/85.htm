<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>13.5 Using the handle class</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="84.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="86.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>13.5 Using the handle class</h3>
<p>Having finished the handle class, we can now use it to allow our initial program from 
&sect;9.6/166 to work with but one change:</p>
<div class="prebox"><pre>
int main()
{
    vector&lt;Student_info&gt; students;
    Student_info record;
    string::size_type maxlen = 0;

    // <i>read and store the data</i>
    while (record.read(cin)) {
        maxlen = max(maxlen, record.name().size());
        students.push_back(record);
    }

    // <i>alphabetize the student records</i>
    sort(students.begin(), students.end(), Student_info::compare);

    // <i>write the names and grades</i>
    for (vector&lt;Student_info&gt;::size_type i = 0;
         i != students.size(); ++i) {
        cout &lt;&lt; students[i].name()
             &lt;&lt; string(maxlen + 1 - students[i].name.size(), ' ');
        try {
            double final_grade = students[i].grade();
            streamsize prec = cout.precision();
            cout &lt;&lt; setprecision(3) &lt;&lt; final_grade
                 &lt;&lt; setprecision(prec) &lt;&lt; endl;
        } catch (domain_error e) {
            cout &lt;&lt; e.what() &lt;&lt; endl;
        }
    }
    return 0;
}
</pre></div>
<p>The input loop now reads and processes two kinds of records. One kind of record represents a 
student who is completing only the core requirements for the course; the other 
kind represents a student who wants graduate credit. The loop works because the <code>read</code> 
function for <code>Student_info</code> reads either kind of record. That function first reads the 
character that says what kind of record we're about to read, and then allocates an object of 
the appropriate type, initializing the object from the input stream. It constructs the underlying 
<code>Core</code> or <code>Grad</code> object by <code>read</code>ing the data, and stores a pointer to the newly created 
object in <code>record</code>. We copy the <code>Student_info</code> object into the <code>vector</code>, which copies the 
object as a side effect of running the <code>Student_info</code> copy constructor.</p>
<p>The next step is to sort the data, which we do by invoking <code>sort</code>, passing it the 
<code>Student_info::compare</code> function. That function calls the base-class <code>name</code> function to 
compare the names in the objects.</p>
<p>The output loop remains unchanged. On each trip through the loop, <code>students[i]</code> 
denotes a <code>Student_info</code> object. That object contains a pointer to an object that is either 
a <code>Core</code> or a <code>Grad</code>. When we call the <code>grade</code> function for <code>Student_info</code>, that function 
will use the pointer to call the <code>(virtual) grade</code> function on the underlying object. The 
type of object to which the handle points will determine which version to call at runtime.</p>
<p>Finally, the objects that were allocated inside the <code>read</code> for the <code>Student_info</code> function 
will be automatically freed when we exit <code>main</code>. On exiting <code>main</code>, the <code>vector</code> will be 
destroyed. The destructor for <code>vector</code> will destroy each element in <code>students</code>, which 
will cause the destructor for <code>Student_info</code> to be run. When that destructor runs, it will 
<code>delete</code> each of the objects allocated in <code>read</code>.</p>
<div class="prevnext">
<a href="84.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="86.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>