<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>13.6 Subtleties</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="85.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="87.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>13.6 Subtleties</h3>
<p>Although the ideas behind inheritance and dynamic binding are powerful, they can 
appear mysterious, at least at first. Now that we've seen examples that use these ideas, 
let's look at some of the associated subtleties that often cause trouble.</p>
<h4>13.6.1 Inheritance and containers</h4>
<p>In section &sect;13.3.1/239, we noted that when we say that we want to store <code>Core</code> objects in a 
container, we're saying that the container will hold <code>Core</code> objects and nothing but <code>Core</code> 
objects. This assertion might have been surprising: It might seem that we should be able 
to store <code>Core</code> objects or objects <code>derived</code> from <code>Core</code> in the container. However, if we think 
about our own implementation of <code>Vec</code> from Chapter 11, we know that at some point, the 
<code>Vec</code> has to allocate storage for the objects that it contains. When we allocate that storage, 
we say which exact type to allocate. There is no <code>virtual</code>-like mechanism that determines 
what kind of object is needed and allocates enough space to hold that object.</p>
<p>What may be more surprising is what would happen if we persisted in defining a 
<code>vector&lt;Core&gt;</code> into which we intended to place either <code>Core</code> objects or <code>Grad</code> objects. The 
answer is that we could do so, but the results would probably be a surprise; for example</p>
<div class="prebox"><pre>
vector&lt;Core&gt; students;
Grad g(cin);              // <i>read a </i>Grad
students.push_back(g);    // <i>store the </i>Core <i>part(!) of </i>g <i>in </i>students
</pre></div>
<p>We are allowed to store the <code>Grad</code> object in <code>students</code>, because we can use a <code>Grad</code> object 
wherever a reference to a <code>Core</code> object is required. The <code>push_back</code> function takes a reference 
to the <code>vector</code>'s element type, so we can pass <code>g</code> to <code>push_back</code>. However, when we 
put the object into <code>students</code>, only the <code>Core</code> portion of <code>g</code> is copied! As in &sect;13.2.2/235, 
this behavior is actually what we asked for, although it can be surprising—especially 
when encountered for the first time. What will happen is that <code>push_back</code> will expect 
that it was given a <code>Core</code> object, and will construct a <code>Core</code> element, copying only the <code>Core</code> 
parts of the object, ignoring whatever is specific to the <code>Grad</code> class .</p>
<h4>13.6.2 Which function do you want?</h4>
<p>It is important to realize that when a base- and <code>derived</code>-class function have the same 
name, but they don't match exactly in number and types of parameters, they behave as if 
they were completely unrelated functions. For example, we might add to our hierarchy 
an accessor function that we could use to change a student's final exam-grade. For <code>Core</code> 
students, this function should set only the <code>final</code> grade; for <code>Grad</code> students, the function 
should take two parameters, the second one being used to set the thesis:</p>
<div class="prebox"><pre>
void Core::regrade(double d) { final = d; }
void Grad::regrade(double d1, double d2) { final = d1; thesis = d2; }
</pre></div>
<p>If <code>r</code> is a reference to a <code>Core</code>, then</p>
<div class="prebox"><pre>
r.regrade(100);         //<i> ok, call </i>Core::regrade
r.regrade(100, 100);   // <i>compile error, </i>Core::regrade <i>takes a single argument</i>
</pre></div>
<p>This second call is an error even if <code>r</code> refers to an object of type <code>Grad</code>. The type of <code>r</code> is a 
reference to <code>Core</code>, and the version of <code>regrade</code> in <code>Core</code> takes one value of type <code>double</code>. 
What may be more surprising is what happens if <code>r</code> is a reference to a <code>Grad</code>:</p>
<div class="prebox"><pre>
r.regrade(100);        //  <i>compile error, </i>Grad::regrade <i>takes two arguments</i>
r.regrade(100, 100);   //  <i>ok, call </i>Grad::regrade
</pre></div>
<p>Now when we look for a function to call, <code>r</code> is a <code>Grad</code>. The <code>regrade</code> function that applies 
to <code>Grad</code> objects takes two arguments. Even though there is a base-class version that takes 
a single argument, that version is effectively hidden by the existence of <code>regrade</code> in the 
<code>derived</code> class. If we want to run the version from the base class, we must call it explicitly:</p>
<div class="prebox"><pre>
r.Core::regrade(100);    // <i>ok, call </i>Core::regrade
</pre></div>
<p>If we want to use <code>regrade</code> as a <code>virtual</code> function, we must give it the same interface in 
the base and <code>derived</code> classes, which we can do by giving the <code>Core</code> version an extra, 
unused parameter with a default argument:</p>
<div class="prebox"><pre>
virtual void Core::regrade(double d, double = 0) { final = d; }
</pre></div>
<div class="prevnext">
<a href="85.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="87.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>
