<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>13.7 Details</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="86.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="88.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>13.7 Details</h3>
<p><b>Inheritance </b>allows us to model classes that are similar to one another with exceptions:</p>
<div class="prebox"><pre>
class base {
public:
    // <i>common interface </i>
protected:
    // <i>implementation members accessible to derived classes </i>
private:
    // <i>implementation accessible to only the base class</i>
};

// public <i>interface </i>of base <i>is part of the interface for </i>derived
class derived: public base { ... };
</pre></div>
<p>Classes that derive from the base class may redefine operations from the base class and 
may add members of their own. Classes can also inherit <code>private</code>ly:</p>
<div class="prebox"><pre>
class priv_derived: private base { ... };
</pre></div>
<p>which is rare and normally is used for implementation convenience only.</p>
<p>An object of a (<code>public</code>ly) <code>derived</code> type can be used where an object, reference, or 
pointer to a base class object is expected.</p>
<p>Derivation chains can be several layers deep:</p>
<div class="prebox"><pre>
class derived2: public derived { ... };
</pre></div>
<p>Objects of type <code>derived2</code> have a <code>derived</code> part, which in turn has a <code>base</code> part. Thus, 
<code>derived2</code> objects have the properties of <code>derived</code> and <code>base</code> class objects.</p>
<p>Derived-class objects are constructed by allocating enough space for the entire object, 
constructing the base-class part(s), and then constructing the <code>derived</code> class. Which 
derived constructor is run depends, as usual, on the arguments used in creating the 
derived-class object. That constructor, through its constructor-initializer list, can pass 
arguments to be used when constructing its immediate base class. If the constructor initializer 
does not explicitly initialize its base, then the base's default constructor is run.</p>
<p><b>Dynamic binding </b>refers to the ability to select at run time which function to run based on 
the actual type of the object on which the function is called. Dynamic binding is in effect 
for calls to <code>virtual</code> functions made through a pointer or a reference. The fact that a 
function is <code>virtual</code> is inherited, and need not be repeated in the derived classes.</p>
<p>Derived classes are not required to redefine their <code>virtual</code> functions. If a class does 
not redefine a <code>virtual</code>, then it inherits the nearest definition for that function. However, 
any <code>virtual</code> functions that the class does contain must be defined. It is often a source of 
mysterious error messages from compilers to declare but not define a <code>virtual</code> function.</p>
<p>Overriding: A derived-class member function overrides a function with the same name in 
the base class if the two functions have the same number and types of parameters and 
both (or neither) are <code>const</code>. In that case, the return types must also match, except that as 
in &sect;13.4.2/246, if the base-class function returns a pointer (or reference) to a class, the 
derived-class function can return a pointer (or reference) to a derived class. If the argument 
lists don't match, the base- and derived-class functions are effectively unrelated.</p>
<p><b><code>virtual</code> destructors: </b>If a pointer to the base class is used to <code>delete</code> an object that might 
actually be a derived-class object, then the base class needs a <code>virtual</code> destructor. If the 
class has no other need for a destructor, then the <code>virtual</code> destructor still must be defined 
and should be empty:</p>
<div class="prebox"><pre>
class base {
public:
    virtual ~base(){ }
};
</pre></div>
<p>As with any other function, the <code>virtual</code> nature of the destructor is inherited by the 
derived classes, and there is no need to redefine the destructor in the derived classes.</p>
<p><b>Constructors and <code>virtual</code> functions: </b>While an object is under construction, its type is 
the type of the class that is being constructed—even if the object is part of a derived-class 
object. Thus, calls to <code>virtual</code> functions from inside a constructor are statically bound to 
the version for the type being constructed.</p>
<p><b>Class friendship: </b>A class can designate another as its <code>friend</code>; doing so grants friendship 
to all the member functions of the other class. Friendship is neither inherited nor 
transitive; friends of friends and classes derived from friends have no special privileges.</p>
<p><b>Static members </b>exist as members of the class, rather than as an instance in each object of 
the class. Therefore, the <code>this</code> keyword is not available in a <code>static</code> member function. 
Such functions may access only <code>static</code> data members. There is a single instance of each 
<code>static</code> data member for the entire class, which must be initialized, usually in the source 
file that implements the class member functions. Because the member is initialized outside 
the class definition, you must fully qualify the name when you initialize it:</p>
<div class="prebox"><pre>
<i>value-type class-name::static-member-name = value</i>;
</pre></div>
<p>says that the <code>static</code> member named <i><code>static-member-name</code> </i>from the class <i><code>class-name</code> </i>has 
type <i><code>value-type</code> </i>and is given the initial value <i><code>value</code>.</i></p>
<h4>Exercises</h4>
<p><b>13-0.</b> Compile, execute, and test the programs in this chapter.</p>
<p><b>13-1.</b> Annotate the <code>Core</code> and <code>Grad</code> constructors to write the constructor's name and argument 
list when the constructor is executed. For example, you should add a statement such as</p>
<div class="prebox"><pre>
cerr &lt;&lt; &quot;Grad::Grad(istream&amp;)&quot; &lt;&lt; endl;
</pre></div>
<p>to the <code>Grad</code> constructor taking an <code>istream&amp;</code> parameter. Then write a small program that 
exercises each constructor. Predict beforehand what the output will be. Revise your program 
and predictions until your predictions match what is actually written.</p>
<p><b>13-2.</b> Given the <code>Core</code> and <code>Grad</code> classes defined in this chapter, indicate which function is called 
for each of these invocations:</p>
<div class="prebox"><pre>
Core* p1 = new Core;
Core* p2 = new Grad;
Core s1;
Grad s2;

p1-&gt;grade();
p1-&gt;name();

p2-&gt;grade();
p2-&gt;name();

s1.grade();
s1.name();

s2.name();
s2.grade();
</pre></div>
<p>Check whether you are correct by adding output statements to the <code>name</code> and <code>grade</code> functions 
that indicate which function is being executed.</p>
<p><b>13-3.</b> The class that we built in Chapter 9 included a <code>valid</code> member that allowed users to check 
whether the object held values for a student record or not. Add that functionality to the 
inheritance-based system of classes.</p>
<p><b>13-4.</b> Add to these classes a function that will map a numeric grade to a letter grade according to 
the grading policy outlined in &sect;10.3/177.</p>
<p><b>13-5</b>. Write a predicate to check whether a particular student met all the relevant requirements. 
That is, check whether a student did all the homework, and if a graduate student, whether 
the student wrote a thesis.</p>
<p><b>13-6.</b> Add a class to the system to represent students taking the course for pass/fail credit. 
Assume that such students need not do the homework, but might do so. If they do, the 
homework should participate in determining whether they passed or failed, according to 
the normal formula. If they did no homework, then the grade is the average of their midterm 
and final grades. A passing grade is 60 or higher.</p>
<p><b>13-7.</b> Add a class to the system to represent students auditing the course.</p>
<p><b>13-8.</b> Write a program to generate a grade report that can handle all four kinds of students.</p>
<p><b>13-9.</b> Describe what would happen if the assignment operator in &sect;13.4.2/247 failed to check for 
self-assignment.</p>
<div class="prevnext">
<a href="86.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="88.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>