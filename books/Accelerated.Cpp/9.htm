<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Looping and counting</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="8.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="10.htm"><img src="images/Next1.gif" /></a>
</div>
<div class="chapname">
<h1>2</h1>
</div>
<div id="chapter">
<h2>Looping and counting</h2>
</div>
<p>In &sect;1.2/11, we developed a program that writes a formatted frame around a greeting. In 
this chapter, we're going to make the program more flexible so that we can change the 
size of the frame without rewriting the program.</p>
<p>Along the way, we'll start learning about arithmetic in C++, and how C++ 
supports loops and conditions, and we'll explore the related idea of loop invariants.</p>
<a name="problem">
<h4>2.1 The problem</h4>
</a>
<p>The program in &sect;1.2/12 wrote a greeting with a frame around it. For example, if our user 
gave us the name <code>Estragon</code>, our program would write</p>
<div class="prebox"><pre>

********************
*                  *
* Hello, Estragon! *
*                  *
********************
</pre></div>
<p>The program built up the output a line at a time. It defined variables named <code>first</code> and 
<code>second</code> to contain the first and second lines of the output, and wrote the greeting itself, 
surrounded by some characters, as the third line. We didn't need separate variables for 
the fourth or fifth output lines, because those were the same as the second and first lines 
respectively.</p>
<p>This approach has a major shortcoming: Each line of the output has a part of the 
program-and a variable-that corresponds to it. Therefore, even a simple change to the 
output format, such as removing the spaces between the greeting and the frame, would 
require rewriting the program. We would like to produce a more flexible form of output 
without having to store each line in a local variable.</p>
<p>We will approach this problem by generating each character of the output separately, 
except for the greeting itself, which we already have available as a <code>string</code>. What we 
shall discover is that there is no need to store the output characters in variables, because 
once we have written a character, we don't need it any more.</p>
<a name="overall">
<h3>2.2 Overall structure</h3>
</a>
<p>We'll begin by reviewing the part of the program that we don't have to rewrite:</p>
<div class="prebox"><pre>
#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    // <i>ask for the person's name</i>
    std::cout &lt;&lt; &quot;Please enter your first name: &quot;;

    // <i>read the name</i>
    std::string name;
    std::cin &gt;&gt; name;

    // <i>build the message that we intend to write</i>
    const std::string greeting = &quot;Hello, &quot; + name + &quot;!&quot;;

    // <i>we have to rewrite this part...</i>
    
    return 0;
}
</pre></div>
<p>As we rewrite the part of the program that the <i>we have to rewrite this part... </i>comment represents, 
we shall already be in a context that defines <code>name</code>, <code>greeting</code>, and the relevant 
names from the standard library. We will build up the new version of the program a 
piece at a time, and then, in &sect;2.5.4/29, we'll put all the pieces together.</p>
<div class="prevnext">
<a href="8.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="10.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>