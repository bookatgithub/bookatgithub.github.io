<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Revisiting character pictures</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="93.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="95.htm"><img src="images/Next1.gif" /></a>
</div>
<div class="chapname">
<h1>15</h1>
</div>
<div id="chapter">
<h2>Revisiting character pictures</h2>
</div>
<p>Inheritance is most useful in modeling large, complex systems, which are well beyond the 
scope of any introductory book. One of the reasons that we are so fond of the character-
picture example that we introduced in &sect;5.8/91 is that such pictures lend themselves to an 
object-oriented solution, yet we can implement them in only a few hundred lines of code. 
We have used this example for many years, refining our code and simplifying the presentation. 
In reviewing the example for this book, we were able to remove nearly half the 
code by using the standard library and our generic handle class from Chapter 14.</p>
<p>In &sect;5.8/91, we wrote several functions that represented a character picture as a 
<code>vector&lt;string&gt;</code>, a strategy that entailed copying characters whenever we constructed 
a new picture. Copying all those characters wastes time and space. For example, if we 
were to concatenate two copies of a picture, we would then store three copies of each 
character: one for the original, and one for each side of the newly concatenated picture.</p>
<p>Even more important, the solution in &sect;5.8/91 discards all structural information about 
the pictures. We have no idea how a given picture was formed. It might have been the 
initial input from our user, or it might have been created by applying one or more operations 
to simpler pictures. Some potentially useful operations require preserving a 
picture's structure. For example, if we want to be able to change the frame characters in a 
picture, we can do so only if we know which components of a picture were framed and 
which ones were not. We cannot look only for instances of the frame characters, because 
these characters might, coincidentally, have been part of an initial input picture.</p>
<p>As we'll see in this chapter, by using inheritance and our generic handle class, we will 
be able to preserve the structural information inherent in a picture, while at the same time 
reducing the space consumption of our system dramatically.</p>
<div class="prevnext">
<a href="93.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="95.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>