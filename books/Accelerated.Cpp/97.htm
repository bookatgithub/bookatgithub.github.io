<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>15.3 Details</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="96.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="98.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>15.3 Details</h3>
<p><b>Abstract base classes </b>have one or more pure <code>virtual</code> functions:</p>
<div class="prebox"><pre>
class Node {
    virtual Node* clone() const = 0;
};
</pre></div>
<p>says that <code>clone</code> is a pure <code>virtual</code> function, and, by implication, that <code>Node</code> is an abstract 
base class. It is not possible to create objects of an abstract class. A class can be made 
abstract through inheritance: If the class fails to redefine even a single inherited pure 
<code>virtual</code>, then the derived class is also abstract.</p>
<p><b>Forward declarations: </b>The requirement to define names before using them (&sect;0.8/6) causes 
trouble in writing families of classes that refer to one another. To avoid this trouble, you 
can declare just the name of the class by writing</p>
<div class="prebox"><pre>
class <i>class-name</i>;
</pre></div>
<p>thereby saying that <i><code>class-name</code> </i>names a class, but not describing the class itself.</p>
<p>We used such a forward declaration for class <code>Picture</code> in &sect;15.2.7/286. The <code>Picture</code> 
class contains a member of type <code>Ptr&lt;Pic_base&gt;</code>, and the <code>Pic_base</code> class has a <code>friend</code> 
declaration for <code>operator&lt;&lt;</code> that uses the type <code>const Picture&amp;</code>. Therefore, these two 
classes refer to each other.</p>
<p>Such mutual type dependencies can yield programs that are impossible to implement. 
For example:</p>
<div class="prebox"><pre>
class Yang;         // <i>forward declaration</i>

class Yin { Yang y; };

class Yang {
    Yin y; 
};
</pre></div>
<p>Here, we have said that every <code>Yin</code> object contains a <code>Yang</code> object, which contains a <code>Yin</code> 
object, and so on. Implementing such types would require infinite memory.</p>
<p>The mutual dependency in our picture classes does not cause such problems, because 
class <code>Picture</code> does not contain a member of type <code>Pic_base</code> directly. Instead, it has a 
member of type <code>Ptr&lt;Pic_base&gt;</code>, which contains a <code>Pic_base*</code>. Using pointers in this 
way avoids infinitely nested objects.</p>
<p>Moreover, in the case of a pointer (or reference), the compiler does not actually need to 
know the details of the type until operations are invoked through the pointer (or reference). 
Because the declaration of <code>operator&lt;&lt;</code> uses the <code>const Picture&amp;</code> type only to 
declare a parameter type, the compiler needs to know only that the name <code>Picture</code> names 
a type. The details of that type aren't needed until we define <code>operator&lt;&lt;</code>.</p>
<h4>Exercises</h4>
<p><b>15-0.</b> Compile, execute, and test the programs in this chapter.
<p><b>15-1.</b> Test your system by writing a program that executes</p>
<div class="prebox"><pre>
Picture p = // <i>some initial starting picture</i>
Picture q = frame(p);
Picture r = hcat(p, q) ;
Picture s = vcat(q, r);
cout  &lt;&lt;  frame(hcat(s, vcat(r, q))) &lt;&lt; endl;
</pre></div>
<p><b>15-2.</b> Reimplement the <code>Frame_Pic</code> class so that the frame uses three different characters: one for 
the corners, another for the top and bottom borders, and a third for the side borders.</p>
<p><b>15-3.</b> Give users the option to specify what characters to use for these border characters.</p>
<p><b>15-4.</b> Add an operation to <code>reframe</code> a <code>Picture</code>, which changes the frame characters. The operation 
should change all of the frames in the interior picture.</p>
<p><b>15-5.</b> Reimplement <code>HCat_Pic</code> so that when pictures of a different size are concatenated, the 
shorter one is centered in the space consumed by the longer one. That is, if we horizontally 
concatenate two pictures, one of which is four lines long and the other is two lines long, the 
first and last rows of the output picture will be blank on the side of the shorter picture. 
What can we now conclude about the necessity of the tests between <code>row</code> and 0.</p>
<p><b>15-6.</b> The <code>Vec</code> and <code>str</code> classes that we developed in Chapters 11 and 12 are powerful enough to 
be used to implement <code>Picture</code>s. Reimplement the material in this chapter to use 
<code>Vec&lt;str&gt;</code> instead of <code>vector&lt;string&gt;</code>, and test your implementation.</p>
<div class="prevnext">
<a href="96.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="98.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>