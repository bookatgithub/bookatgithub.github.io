<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>16.1 Use the abstractions you have</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
</head>

<body>
<div class="prevnext">
<a href="98.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="100.htm"><img src="images/Next1.gif" /></a>
</div>
<h3>16.1 Use the abstractions you have</h3>
<p>There is an old story about a visitor who has become lost in New York, with tickets in 
hand to a piano recital. Stopping a passerby, the visitor asks, &quot;Excuse me. Can you tell 
me how to get to Carnegie Hall?&quot; The answer: &quot;Practice!&quot;</p>
<p>It is important to understand—thoroughly—how to use the abstractions that you have 
available before you try to learn about new ones. The abstractions that you have include 
the ones from the standard library, and others that you may have had to create as you 
solve programming problems. By combining ideas from the standard library, which we 
can apply to a wide variety of problems, with ideas that solve problems in a particular 
application domain, we can write useful programs with surprisingly little effort. In particular, 
if we design our own abstractions well, we should be able to use them to solve 
problems that we had not considered when we designed them.</p>
<p>We can find an example of this ideal in the classes that we wrote in Chapter 13 to store 
student grades and in Chapter 15 to generate character pictures. We have used the 
character-picture classes in a variety of forms for years. In contrast, we wrote the 
student-record classes from scratch for this book. Only when we were thinking about 
what to say in this chapter did we realize that we could combine these two abstractions in 
a particularly nice way.</p>
<p>The combination uses character pictures to write a histogram of students' grades. The 
point, of course, is that such a visual display lets us see anomalies much more quickly 
than does a mere table of numbers. The basic idea is to convert each final grade into a 
<code>string</code> of <code>=</code> symbols whose length is proportional to the grade. For example, with 
appropriate input, we might generate the following output:</p>
<div class="prebox"><pre>
********************************
*                              *
* James    ===============     *
* Kevin    ================    *
* Lynn     =================   *
* MaryKate ================    *
* Pat      ============        *
* Paul     ==================  *
* Rhia     ================    *
* Sarah    =================== *
*                              *
********************************
</pre></div>
<p>From this histogram, it is immediately obvious that Pat is having trouble keeping up with 
the course.</p>
<p>What is nice about this example is how small it is, and how directly the solution mirrors 
the problem:</p>
<div class="prebox"><pre>
    Picture histogram(const vector&lt;Student_info&gt;&amp; students) {
    Picture names;
    Picture grades;

    // <i>for each student</i>
    for (vector&lt;Student_info&gt;::const_iterator it = students.begin();
         it != students.end(); ++it) {

         // <i>create vertically concatenated pictures of the names and grades </i>
         names = vcat(names, vector&lt;string&gt;(1, it-&gt;name()));
         grades = vcat(grades,             
             vector&lt;string&gt;(1, &quot; &quot; + string(it-&gt;grade() / 5, '=')));
    }

    // <i>horizontally concatenate the name and grade pictures to combine them </i>
    return hcat(names, grades);
}
</pre></div>
<p>Our <code>histogram</code> function takes a (<code>const</code> reference to a) <code>vector</code> of <code>Student_info</code> 
objects, each of which represents a student. From these records, we will create two 
<code>Picture</code>s, one of which, <code>names</code>, contains all the students' names; the other, <code>grades</code>, 
contains a row that corresponds to each student's final grade. When we've processed 
every student, we horizontally concatenate the two pictures, lining up each student with 
the corresponding grade. Because each picture is conceptually a rectangle, this horizontal 
concatenation automatically accounts for the different lengths of the students' names.</p>
<p>The main program builds up the <code>vector</code>, in familiar fashion, by reading a file of student 
records. When it's done, it calls <code>histogram</code> to generate the <code>Picture</code>, frames it, and 
then uses the output operator to write it:</p>
<div class="prebox"><pre>
int main()
{
    vector&lt;Student_info&gt; students;
    Student_info s;

    // <i>read the names and grades </i>
    while (s.read(cin))
        students.push_back(s);

    // <i>put the students in alphabetical order</i>
    sort(students.begin(), students.end(), Student_info::compare);

    // <i>write the names and histograms</i>
    cout &lt;&lt; frame(histogram(students)) &lt;&lt; endl;
    return 0;
}
</pre></div>
<p>The most important new idea in this example is that it contains no new ideas! What made 
it easy was being so familiar with the ideas that we have already covered that we can 
combine them in ways that we had not anticipated. This kind of familiarity comes only 
with practice.</p>
<div class="prevnext">
<a href="98.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="100.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>