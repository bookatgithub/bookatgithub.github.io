<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>TOC</title>
<link rel="stylesheet" type="text/css" href="./acc.css" />
<style>
a:link, a:visited {
color:#0033CC;
}
</style>

</head>

<body>
<div class="prevnext">
<a href="cover.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="Copyright.htm"><img src="images/Next1.gif" /></a>
</div>

<div class="tc">

<p><b><font size="+2">Contents</font></b></p>
<a href="1.htm">Chapter 0 Getting started</a>
    <div class="toc">
<a href="1.htm#comments">0.1 Comments<br /></a>
<a href="2.htm">0.2 #include<br /></a>
<a href="2.htm#main">0.3 The main function<br /></a>
<a href="2.htm#curly">0.4 Curly braces<br /></a>
<a href="3.htm">0.5 Using the standard library for output<br /></a>
<a href="3.htm#return">0.6 The return statement<br /></a>
<a href="4.htm">0.7 A slightly deeper look<br /></a>
<a href="5.htm">0.8 Details<br /></a>
    </div>
<a href="6.htm">Chapter 1 Working with strings<br /></a>
    <div class="toc">
<a href="6.htm#input">1.1 Input<br /></a>
<a href="7.htm">1.2 Framing a name<br /></a>
<a href="8.htm">1.3 Details<br /></a>
    </div>
<a href="9.htm">Chapter 2 Looping and counting</a>
    <div class="toc">
<a href="9.htm#problem">2.1 The problem<br /></a>
<a href="9.htm#overall">2.2 Overall structure<br /></a>
<a href="10.htm">2.3 Writing an unknown number of rows<br /></a>
<a href="11.htm">2.4 Writing a row<br /></a>
<a href="12.htm">2.5 The complete framing program<br /></a>
<a href="13.htm">2.6 Counting<br /></a>
<a href="14.htm">2.7 Details<br /></a>
	</div>
<a href="15.htm">Chapter 3 Working with batches of data<br /></a>
    <div class="toc">
<a href="15.htm#grades">3.1 Computing student grades<br /></a>
<a href="16.htm">3.2 Using medians instead of averages<br /></a>
<a href="17.htm">3.3 Details<br /></a>
	</div>
<a href="18.htm">Chapter 4  Organizing programs and data</a>
    <div class="toc">
<a href="18.htm#comp">4.1 Organizing computations<br /></a>
<a href="19.htm">4.2 Organizing data<br /></a>
<a href="20.htm">4.3 Putting it all together<br /></a>
<a href="21.htm">4.4 Partitioning the grading program<br /></a>
<a href="22.htm">4.5 The revised grading program<br /></a>
<a href="23.htm">4.6 Details<br /></a>
	</div>
<a href="24.htm">Chapter 5 Using sequential containers and analyzing strings</a>
    <div class="toc">
<a href="24.htm#separating">5.1 Separating students into categories<br /></a>
<a href="25.htm">5.2 Iterators<br /></a>
<a href="26.htm">5.3 Using iterators instead of indices <br /></a>
<a href="27.htm">5.4 Rethinking our data structure for better performance<br /></a>
<a href="28.htm">5.5 The list type<br /></a>
<a href="29.htm">5.6 Taking strings apart<br /></a>
<a href="30.htm">5.7 Testing our split function<br /></a>
<a href="31.htm">5.8 Putting strings together<br /></a>
<a href="32.htm">5.9 Details<br /></a>
    </div>
<a href="33.htm">Chapter 6 Using library algorithms</a>
    <div class="toc">
<a href="33.htm#analyzing">6.1 Analyzing strings<br /></a>
<a href="34.htm">6.2 Comparing grading schemes<br /></a>
<a href="35.htm">6.3 Classifying students, revisited<br /></a>
<a href="36.htm">6.4 Algorithms, containers, and iterators<br /></a>
<a href="37.htm">6.5 Details<br /></a>
	</div>
<a href="38.htm">Chapter 7 Using associative containers</a>
    <div class="toc">
<a href="38.htm#container">7.1 Containers that support efficient look-up<br /></a>
<a href="39.htm">7.2 Counting words<br /></a>
<a href="40.htm">7.3 Generating a cross-reference table<br /></a>
<a href="41.htm">7.4 Generating sentences<br /></a>
<a href="42.htm">7.5 A note on performance<br /></a>
<a href="43.htm">7.6 Details<br /></a>
	</div>
<a href="44.htm">Chapter 8 Writing generic functions</a>
    <div class="toc">
<a href="44.htm#generic">8.1 What is a generic function?<br /></a>
<a href="45.htm">8.2 Data-structure independence<br /></a>
<a href="46.htm">8.3 Input and output iterators<br /></a>
<a href="47.htm">8.4 Using iterators for flexibility<br /></a>
<a href="48.htm">8.5 Details<br /></a>
	</div>
<a href="49.htm">Chapter 9 Defining new types</a>
    <div class="toc">
<a href="50.htm">9.1 Student_info revisited<br /></a>
<a href="51.htm">9.2 Class types<br /></a>
<a href="52.htm">9.3 Protection<br /></a>
<a href="53.htm">9.4 The Student_info class<br /></a>
<a href="54.htm">9.5 Constructors<br /></a>
<a href="55.htm">9.6 Using the Student_info class<br /></a>
<a href="56.htm">9.7 Details<br /></a>
	</div>
<a href="57.htm">Chapter 10 Managing memory and low-level data structures</a>
    <div class="toc">
<a href="58.htm">10.1 Pointers and arrays<br /></a>
<a href="59.htm">10.2 String literals revisited<br /></a>
<a href="60.htm">10.3 Initializing arrays of character pointers<br /></a>
<a href="61.htm">10.4 Arguments to main<br /></a>
<a href="62.htm">10.5 Reading and writing files<br /></a>
<a href="63.htm">10.6 Three kinds of memory management<br /></a>
<a href="64.htm">10.7 Details<br /></a>
	</div>
<a href="65.htm">Chapter 11 Defining abstract data types</a>
    <div class="toc">
<a href="66.htm">11.1 The Vec class<br /></a>
<a href="67.htm">11.2 Implementing the Vec class<br /></a>
<a href="68.htm">11.3 Copy control<br /></a>
<a href="69.htm">11.4 Dynamic Vecs<br /></a>
<a href="70.htm">11.5 Flexible memory management<br /></a>
<a href="71.htm">11.6 Details<br /></a>
	</div>
<a href="72.htm">Chapter 12 Making class objects act like values</a>
    <div class="toc">
<a href="73.htm">12.1 A simple string class<br /></a>
<a href="74.htm">12.2 Automatic conversions<br /></a>
<a href="75.htm">12.3 Str operations<br /></a>
<a href="76.htm">12.4 Some conversions are hazardous<br /></a>
<a href="77.htm">12.5 Conversion operators<br /></a>
<a href="78.htm">12.6 Conversions and memory management<br /></a>
<a href="79.htm">12.7 Details<br /></a>
	</div>
<a href="80.htm">Chapter 13 Using inheritance and dynamic binding</a>
    <div class="toc">
<a href="81.htm">13.1 Inheritance<br /></a>
<a href="82.htm">13.2 Polymorphism and virtual functions<br /></a>
<a href="83.htm">13.3 Using inheritance to solve our problem<br /></a>
<a href="84.htm">13.4 A simple handle class<br /></a>
<a href="85.htm">13.5 Using the handle class<br /></a>
<a href="86.htm">13.6 Subtleties<br /></a>
<a href="87.htm">13.7 Details<br /></a>
    </div>
<a href="88.htm">Chapter 14 Managing memory (almost) automatically</a>
    <div class="toc">
<a href="89.htm">14.1 Handles that copy their objects<br /></a>
<a href="90.htm">14.2 Reference-counted handles<br /></a>
<a href="91.htm">14.3 Handles that let you decide when to share data<br /></a>
<a href="92.htm">14.4 An improvement on controllable handles<br /></a>
<a href="93.htm">14.5 Details<br /></a>
	</div>
<a href="94.htm">Chapter 15 Revisiting character pictures</a>
    <div class="toc">
<a href="95.htm">15.1 Design<br /></a>
<a href="96.htm">15.2 Implementation<br /></a>
<a href="97.htm">15.3 Details<br /></a>
	</div>
<a href="98.htm">Chapter 16 Where do we go from here?</a>
    <div class="toc">
<a href="99.htm">16.1 Use the abstractions you have<br /></a>
<a href="100.htm">16.2 Learn more<br /></a>
	</div>
<a href="101.htm">Appendix A  Language details</a>
    <div class="toc">
<a href="102.htm">A.1 Declarations<br /></a>
<a href="103.htm">A.2 Types<br /></a>
<a href="104.htm">A.3 Expressions<br /></a>
<a href="105.htm">A.4 Statements<br /></a>
	</div>
<a href="106.htm">Appendix B Library summary</a>
    <div class="toc">
<a href="107.htm">B.1 Input-output<br /></a>
<a href="108.htm">B.2 Containers and iterators<br /></a>
<a href="109.htm">B.3 Algorithms</a>
	</div>
</div>

</div>
<div class="prevnext">
<a href="cover.htm"><img src="images/Prev1.gif" /></a>&nbsp;&nbsp;<a href="Copyright.htm"><img src="images/Next1.gif" /></a>
</div>
</body>
</html>