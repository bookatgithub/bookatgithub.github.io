<HTML
><HEAD
>
<TITLE>[Appendix C] Supplement for Chapter 12</TITLE>
<META
NAME="DC.title"
CONTENT="sed &amp; awk"><META
NAME="DC.creator"
CONTENT="Dale Dougherty &amp; Arnold Robbins"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1998-08-03T21:07:05Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-225-5"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="sed &amp; awk"><LINK
REL="prev"
HREF="appb_03.htm"
TITLE="B.3 Command Summary for awk"><LINK
REL="next"
HREF="appc_02.htm"
TITLE="C.2 Listing of masterindex Shell Script"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="sed &amp; awk"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/ssrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="appb_03.htm"
TITLE="B.3 Command Summary for awk"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: B.3 Command Summary for awk"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Appendix C</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="appc_02.htm"
TITLE="C.2 Listing of masterindex Shell Script"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: C.2 Listing of masterindex Shell Script"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="APPENDIX"
><H1
CLASS="appendix"
><A
CLASS="title"
NAME="SEDAWK-APP-C"
>C. Supplement for Chapter 12</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#SEDAWK-APP-C-SECT-1"
TITLE="C.1 Full Listing of spellcheck.awk"
>Full Listing of spellcheck.awk</A
><BR><A
CLASS="sect1"
HREF="appc_02.htm"
TITLE="C.2 Listing of masterindex Shell Script"
>Listing of masterindex Shell Script</A
><BR><A
CLASS="sect1"
HREF="appc_03.htm"
TITLE="C.3 Documentation for masterindex"
>Documentation for masterindex</A
></P
><P
></P
></DIV
><P
CLASS="para"
>This appendix contains supplemental programs and documentation for the
programs described in <A
CLASS="xref"
HREF="ch12_01.htm"
TITLE="Full-Featured Applications"
>Chapter 12, Full-Featured Applications</A
>.</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SEDAWK-APP-C-SECT-1"
>C.1 Full Listing of spellcheck.awk</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="C.SPELL"
></A
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
># spellcheck.awk -- interactive spell checker
#
# AUTHOR: Dale Dougherty
#
# Usage: nawk -f spellcheck.awk [+dict] file 
# (Use spellcheck as name of shell program) 
# SPELLDICT = &quot;dict&quot; 
# SPELLFILE = &quot;file&quot;

# BEGIN actions perform the following tasks: 
#      1) process command line arguments
#      2) create temporary filenames
#      3) execute spell program to create wordlist file
#      4) display list of user responses

BEGIN { 
# Process command line arguments
# Must be at least two args -- nawk and filename
      if (ARGC &gt; 1) {
      # if more than two args, second arg is dict 
            if (ARGC &gt; 2) {
            # test to see if dict is specified with &quot;+&quot;  
            # and assign ARGV[1] to SPELLDICT
                  if (ARGV[1] ~ /^\+.*/) 
                        SPELLDICT = ARGV[1]
                  else 
                        SPELLDICT = &quot;+&quot; ARGV[1]
            # assign file ARGV[2] to SPELLFILE 
                  SPELLFILE = ARGV[2]
            # delete args so awk does not open them as files
                  delete ARGV[1]
                  delete ARGV[2]
            }
      # not more than two args
            else {
            # assign file ARGV[1] to SPELLFILE 
                  SPELLFILE = ARGV[1]
            # test to see if local dict file exists
                  if (! system (&quot;test -r dict&quot;)) {
                  # if it does, ask if we should use it
                        printf (&quot;Use local dict file? (y/n)&quot;)   
                        getline reply &lt; &quot;-&quot;
                  # if reply is yes, use &quot;dict&quot; 
                        if (reply ~ /[yY](es)?/){
                              SPELLDICT = &quot;+dict&quot;
                        }
                  }
            }
      } # end of processing args &gt; 1 
      # if args not &gt; 1, then print shell-command usage 
      else {
            print &quot;Usage: spellcheck [+dict] file&quot;
            exit 1
      }
# end of processing command line arguments

# create temporary file names, each begin with sp_
      wordlist = &quot;sp_wordlist&quot;
      spellsource = &quot;sp_input&quot;
      spellout = &quot;sp_out&quot;

# copy SPELLFILE to temporary input file
      system(&quot;cp &quot; SPELLFILE &quot; &quot; spellsource)

# now run spell program; output sent to wordlist
      print &quot;Running spell checker ...&quot;
      if (SPELLDICT)
            SPELLCMD = &quot;spell &quot; SPELLDICT &quot; &quot;
      else
            SPELLCMD = &quot;spell &quot;
      system(SPELLCMD spellsource &quot; &gt; &quot; wordlist )

# test wordlist to see if misspelled words turned up
      if ( system(&quot;test -s &quot; wordlist ) ) {
      # if wordlist is empty, (or spell command failed), exit
            print &quot;No misspelled words found.&quot;
            system(&quot;rm &quot; spellsource &quot; &quot; wordlist)
            exit
      }   

# assign wordlist file to ARGV[1] so that awk will read it.   
      ARGV[1] = wordlist

# display list of user responses 
      responseList = &quot;Responses: \n\tChange each occurrence,&quot; 
      responseList = responseList &quot;\n\tGlobal change,&quot; 
      responseList = responseList &quot;\n\tAdd to Dict,&quot;  
      responseList = responseList &quot;\n\tHelp,&quot; 
      responseList = responseList &quot;\n\tQuit&quot; 
      responseList = responseList &quot;\n\tCR to ignore: &quot;
      printf(&quot;%s&quot;, responseList)

} # end of BEGIN procedure

# main procedure, executed for each line in wordlist.
#     Purpose is to show misspelled word and prompt user
#     for appropriate action.

{
# assign word to misspelling
      misspelling = $1 
      response = 1
      ++word
# print misspelling and prompt for response
      while (response !~ /(^[cCgGaAhHqQ])|^$/ ) {
            printf(&quot;\n%d - Found %s (C/G/A/H/Q/):&quot;, word, misspelling)
            getline response &lt; &quot;-&quot;
      }
# now process the user's response
# CR - carriage return ignores current word 
# Help
      if (response ~ /[Hh](elp)?/) {
      # Display list of responses and prompt again.
            printf(&quot;%s&quot;, responseList)
            printf(&quot;\n%d - Found %s (C/G/A/Q/):&quot;, word, misspelling)
            getline response &lt; &quot;-&quot;
      }
# Quit
      if (response ~ /[Qq](uit)?/) exit
# Add to dictionary
      if ( response ~ /[Aa](dd)?/) { 
            dict[++dictEntry] = misspelling
      }
# Change each occurrence
      if ( response ~ /[cC](hange)?/) {
      # read each line of the file we are correcting
            newspelling = &quot;&quot;; changes = &quot;&quot;
            while( (getline &lt; spellsource) &gt; 0){
            # call function to show line with misspelled word
            # and prompt user to make each correction 
                  make_change($0)
            # all lines go to temp output file
                  print &gt; spellout
            }   
      # all lines have been read 
      # close temp input and temp output file
            close(spellout)
            close(spellsource)
      # if change was made
            if (changes){ 
            # show changed lines
                  for (j = 1; j &lt;= changes; ++j)
                        print changedLines[j]
                  printf (&quot;%d lines changed. &quot;, changes) 
            # function to confirm before saving changes
                  confirm_changes()
            }
      }
# Globally change
      if ( response ~ /[gG](lobal)?/) {
      # call function to prompt for correction
      # and display each line that is changed.
      # Ask user to approve all changes before saving.
            make_global_change()
      }   
} # end of Main procedure

# END procedure makes changes permanent.
# It overwrites the original file, and adds words
# to the dictionary.
# It also removes the temporary files.

END {
# if we got here after reading only one record, 
# no changes were made, so exit.
      if (NR &lt;= 1) exit
# user must confirm saving corrections to file
      while (saveAnswer !~ /([yY](es)?)|([nN]o?)/ ) {
            printf &quot;Save corrections in %s (y/n)? &quot;, SPELLFILE
            getline saveAnswer &lt; &quot;-&quot;
      }
# if answer is yes then mv temporary input file to SPELLFILE
# save old SPELLFILE, just in case
      if (saveAnswer ~ /^[yY]/) {
            system(&quot;cp &quot; SPELLFILE &quot; &quot; SPELLFILE &quot;.orig&quot;)
            system(&quot;mv &quot; spellsource &quot; &quot; SPELLFILE)
      }
# if answer is no then rm temporary input file
      if (saveAnswer ~ /^[nN]/)
            system(&quot;rm &quot; spellsource) 

# if words have been added to dictionary array, then prompt
# to confirm saving in current dictionary. 
      if (dictEntry) {
            printf &quot;Make changes to dictionary (y/n)? &quot;
            getline response &lt; &quot;-&quot;
            if (response ~ /^[yY]/){
            # if no dictionary defined, then use &quot;dict&quot;
                  if (! SPELLDICT) SPELLDICT = &quot;dict&quot;
      
            # loop through array and append words to dictionary
                  sub(/^\+/, &quot;&quot;, SPELLDICT)
                  for ( item in dict )
                        print dict[item] &gt;&gt; SPELLDICT
                  close(SPELLDICT)
            # sort dictionary file 
                  system(&quot;sort &quot; SPELLDICT &quot;&gt; tmp_dict&quot;)
                  system(&quot;mv &quot; &quot;tmp_dict &quot; SPELLDICT)
            }
      }
# remove word list
      system(&quot;rm sp_wordlist&quot;)
} # end of END procedure

# function definitions

# make_change -- prompt user to correct misspelling 
#                for current input line.  Calls itself
#                to find other occurrences in string.
#     stringToChange -- initially $0; then unmatched substring of $0
#     len -- length from beginning of $0 to end of matched string 
# Assumes that misspelling is defined. 

function make_change (stringToChange, len,   # parameters
      line, OKmakechange, printstring, carets)   # locals
{
# match misspelling in stringToChange; otherwise do nothing 
   if ( match(stringToChange, misspelling) ) {
   # Display matched line 
         printstring = $0
         gsub(/\t/, &quot; &quot;, printstring)
         print printstring
         carets = &quot;^&quot;
         for (i = 1; i &lt; RLENGTH; ++i)
               carets = carets &quot;^&quot;
         if (len)
               FMT = &quot;%&quot; len+RSTART+RLENGTH-2 &quot;s\n&quot;
         else
               FMT = &quot;%&quot; RSTART+RLENGTH-1 &quot;s\n&quot;
         printf(FMT, carets)
   # Prompt user for correction, if not already defined
         if (! newspelling) {
               printf &quot;Change to:&quot;
               getline newspelling &lt; &quot;-&quot;
         }
   # A carriage return falls through
   # If user enters correction, confirm  
         while (newspelling &amp;&amp; ! OKmakechange) {
               printf (&quot;Change %s to %s? (y/n):&quot;, misspelling, newspelling)
               getline OKmakechange &lt; &quot;-&quot;
               madechg = &quot;&quot;
         # test response
               if (OKmakechange ~ /[yY](es)?/ ) {
               # make change (first occurrence only)
                     madechg = sub(misspelling, newspelling, stringToChange)
               }
               else if ( OKmakechange ~ /[nN]o?/ ) {
                     # offer chance to re-enter correction 
                     printf &quot;Change to:&quot;
                     getline newspelling &lt; &quot;-&quot;
                     OKmakechange = &quot;&quot;
               }
         } # end of while loop

   # if len, we are working with substring of $0
         if (len) {
         # assemble it
               line = substr($0,1,len-1)
               $0 = line stringToChange
         }
         else {
               $0 = stringToChange
               if (madechg) ++changes
         }

   # put changed line in array for display
         if (madechg) 
               changedLines[changes] = &quot;&gt;&quot; $0

   # create substring so we can try to match other occurrences
         len += RSTART + RLENGTH
         part1 = substr($0, 1, len-1)
         part2 = substr($0, len)
   # calls itself to see if misspelling is found in remaining part 
         make_change(part2, len) 

   } # end of if

} # end of make_change()

# make_global_change --
#        prompt user to correct misspelling 
#        for all lines globally.  
#        Has no arguments
# Assumes that misspelling is defined. 

function make_global_change(    newspelling, OKmakechange, changes)
{
# prompt user to correct misspelled word
   printf &quot;Globally change to:&quot;
   getline newspelling &lt; &quot;-&quot;

# carriage return falls through
# if there is an answer, confirm 
   while (newspelling &amp;&amp; ! OKmakechange) {
               printf (&quot;Globally change %s to %s? (y/n):&quot;, misspelling,
                     newspelling)
               getline OKmakechange &lt; &quot;-&quot;
         # test response and make change
               if (OKmakechange ~ /[yY](es)?/ ) {
               # open file, read all lines 
                     while( (getline &lt; spellsource) &gt; 0){
                     # if match is found, make change using gsub
                     # and print each changed line.
                           if ($0 ~ misspelling) {
                                    madechg = gsub(misspelling, newspelling)
                                    print &quot;&gt;&quot;, $0
                                    changes += 1  # counter for line changes
                           }
                     # write all lines to temp output file
                           print &gt; spellout
                     } # end of while loop for reading file

               # close temporary files
                     close(spellout)
                     close(spellsource)
               # report the number of changes   
                     printf (&quot;%d lines changed. &quot;, changes) 
               # function to confirm before saving changes
                     confirm_changes()
               } # end of if (OKmakechange ~ y) 

   # if correction not confirmed,  prompt for new word
               else if ( OKmakechange ~ /[nN]o?/ ){
                     printf &quot;Globally change to:&quot;
                     getline newspelling &lt; &quot;-&quot;
                     OKmakechange = &quot;&quot;
               }

   } # end of while loop for prompting user for correction

} # end of make_global_change()

# confirm_changes --  
#        confirm before saving changes

function confirm_changes(  savechanges) {
# prompt to confirm saving changes
      while (! savechanges ) {
            printf (&quot;Save changes? (y/n)&quot;)
            getline savechanges &lt; &quot;-&quot;
      }
# if confirmed, mv output to input
      if (savechanges ~ /[yY](es)?/)
            system(&quot;mv &quot; spellout &quot; &quot; spellsource) 
      }</PRE
></BLOCKQUOTE
></P
><A
CLASS="indexterm"
NAME="AUTOID-13378"
></A
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="appb_03.htm"
TITLE="B.3 Command Summary for awk"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: B.3 Command Summary for awk"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="sed &amp; awk"
><IMG
SRC="../gifs/txthome.gif"
ALT="sed &amp; awk"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="appc_02.htm"
TITLE="C.2 Listing of masterindex Shell Script"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: C.2 Listing of masterindex Shell Script"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>B.3 Command Summary for awk</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>C.2 Listing of masterindex Shell Script</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The UNIX CD Bookshelf Navigation"><MAP
NAME="map"
><AREA
SHAPE="RECT"
COORDS="0,0,73,21"
HREF="../index.htm"
ALT="The UNIX CD Bookshelf"><AREA
SHAPE="RECT"
COORDS="74,0,163,21"
HREF="../upt/index.htm"
ALT="UNIX Power Tools"><AREA
SHAPE="RECT"
COORDS="164,0,257,21"
HREF="../unixnut/index.htm"
ALT="UNIX in a Nutshell"><AREA
SHAPE="RECT"
COORDS="258,0,321,21"
HREF="../vi/index.htm"
ALT="Learning the vi Editor"><AREA
SHAPE="RECT"
COORDS="322,0,378,21"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="379,0,438,21"
HREF="../ksh/index.htm"
ALT="Learning the Korn Shell"><AREA
SHAPE="RECT"
COORDS="439,0,514,21"
HREF="../lrnunix/index.htm"
ALT="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
