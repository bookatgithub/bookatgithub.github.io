<HTML
><HEAD
>
<TITLE>[Chapter 2] 2.4 Using awk</TITLE>
<META
NAME="DC.title"
CONTENT="sed &amp; awk"><META
NAME="DC.creator"
CONTENT="Dale Dougherty &amp; Arnold Robbins"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1998-08-03T20:50:07Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-225-5"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch02_01.htm"
TITLE="2. Understanding Basic Operations"><LINK
REL="prev"
HREF="ch02_03.htm"
TITLE="2.3 Using sed"><LINK
REL="next"
HREF="ch02_05.htm"
TITLE="2.5 Using sed and awk Together"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="sed &amp; awk"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/ssrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch02_03.htm"
TITLE="2.3 Using sed"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.3 Using sed"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 2<BR>Understanding Basic Operations</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch02_05.htm"
TITLE="2.5 Using sed and awk Together"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.5 Using sed and awk Together"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SEDAWK-CH-2-SECT-4"
>2.4 Using awk</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH02.AWK"
></A
>Like sed, awk executes a set of instructions for each line of input.
You can specify instructions on the command line or create a script
file.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-2-SECT-4.1"
>2.4.1 Running awk</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1135"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1138"
></A
>For command lines, the syntax is: </P
><BLOCKQUOTE
CLASS="literallayout"
><P
CLASS="literallayout"
><CODE
CLASS="userinput"
><B
>awk '</B
></CODE
><CODE
CLASS="replaceable"
><I
>instructions</I
></CODE
><CODE
CLASS="userinput"
><B
>' </B
></CODE
><CODE
CLASS="replaceable"
><I
>files</I
></CODE
> </P
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1147"
></A
>Input is read a line at a time from one or more
<EM
CLASS="emphasis"
>files</EM
> or from standard input.  The
<EM
CLASS="emphasis"
>instructions</EM
> must be enclosed in single
quotes to protect them from the shell.  (Instructions almost always
contain curly braces and/or dollar signs, which are interpreted as
special characters by the shell.)  Multiple command lines can be
entered in the same way as shown for sed: separating commands with
semicolons or using the multiline input capability of the Bourne
shell.</P
><P
CLASS="para"
>Awk programs are usually placed in a file where they can be tested and
modified.  The syntax for invoking awk with a script file is:</P
><BLOCKQUOTE
CLASS="literallayout"
><P
CLASS="literallayout"
><CODE
CLASS="userinput"
><B
>awk -f </B
></CODE
><CODE
CLASS="replaceable"
><I
>script</I
></CODE
> <CODE
CLASS="replaceable"
><I
>files</I
></CODE
> </P
></BLOCKQUOTE
><P
CLASS="para"
>The <I
CLASS="option"
>-f</I
> option works the same way as it does with sed.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1159"
></A
>While awk instructions have the same structure as sed, consisting of
<EM
CLASS="emphasis"
>pattern</EM
> and
<EM
CLASS="emphasis"
>procedure</EM
> sections, the procedures
themselves are quite different.  Here is where awk looks less like an
editor and more like a programming language.  There are statements and
functions instead of one- or two-character command sequences.  For
instance, you use the <KBD
CLASS="command"
>print</KBD
> statement to print the
value of an expression or to print the contents of the current input
line.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1165"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1167"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1169"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1172"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1174"
></A
>Awk, in the usual case, interprets each input line as a record and
each word on that line, delimited by spaces or tabs, as a field.
(These defaults can be changed.)  One or more consecutive spaces
or tabs count as a single delimiter.  Awk allows you to reference these
fields, in either patterns or procedures.  $0 represents the entire
input line.  $1, $2, ... refer to the individual fields on the input
line.  Awk splits the input record before the script is applied.
Let's look at a few examples, using the sample input file
<I
CLASS="filename"
>list</I
>.</P
><P
CLASS="para"
>The first example contains a single instruction that prints the first
field of each line in the input file.</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>awk '{ print $1 }' list</B
></CODE
>
John
Alice
Orville
Terry
Eric
Hubert
Amy
Sal</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>&quot;$1&quot; refers to the value of the first field on each input line.
Because there is no pattern specified, the print statement is applied
to all lines.  In the next example, a pattern &quot;/MA/&quot; is
specified but there is no procedure.  The default action is to print
each line that matches the pattern.</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>awk '/MA/' list</B
></CODE
>
John Daggett, 341 King Road, Plymouth MA
Eric Adams, 20 Post Road, Sudbury MA
Sal Carpenter, 73 6th Street, Boston MA</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>Three lines are printed.  As mentioned in the first chapter, an awk
program can be used more like a query language, extracting useful
information from a file.  We might say that the pattern placed a
condition on the selection of records to be included in a report,
namely that they must contain the string &quot;MA&quot;.  Now we can also
specify what portion of a record to include in the report.  The
next example uses a <KBD
CLASS="command"
>print</KBD
> statement to limit the
output to the first field of each record.</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>awk '/MA/ { print $1 }' list</B
></CODE
>
John
Eric
Sal</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1191"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1194"
></A
>It helps to understand the above instruction if we try to read it
aloud: <EM
CLASS="emphasis"
>Print the first word of each line containing the
string &quot;MA&quot;.</EM
> We can say &quot;word&quot; because by default
awk separates the input into fields using either spaces or tabs as the field
separator.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1199"
></A
>In the next example, we use the <I
CLASS="option"
>-F</I
> option to change
the field separator to a comma.  This allows us to retrieve 
any of three fields:  the full name, the street address, 
or the city and state.</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>awk -F, '/MA/ { print $1 }' list</B
></CODE
>
John Daggett
Eric Adams
Sal Carpenter</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>Do not confuse the <I
CLASS="option"
>-F</I
> option to change the field
separator with the <I
CLASS="option"
>-f</I
> option to specify the name of
a script file.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1209"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1211"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1213"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1216"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1219"
></A
>In the next example, we print each field on its own line.  Multiple
commands are separated by semicolons.</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>awk -F, '{ print $1; print $2; print $3 }' list</B
></CODE
>
John Daggett
 341 King Road
 Plymouth MA
Alice Ford
 22 East Broadway
 Richmond VA
Orville Thomas
 11345 Oak Bridge Road
 Tulsa OK
Terry Kalkas
 402 Lans Road
 Beaver Falls PA
Eric Adams
 20 Post Road
 Sudbury MA
Hubert Sims
 328A Brook Road
 Roanoke VA
Amy Wilde
 334 Bayshore Pkwy
 Mountain View CA
Sal Carpenter
 73 6th Street
 Boston MA</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>Our examples using sed changed the content of incoming data.  Our examples
using awk rearrange the data.  In the preceding awk example, note how
the leading blank is now considered part of the second and third
fields.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-2-SECT-4.2"
>2.4.2 Error Messages</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1229"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1232"
></A
>Each implementation of awk gives you
different error messages when it encounters problems in your program.
Thus, we won't quote a particular version's messages here; it'll be
obvious when there's a problem.  Messages can be caused by any of the
following:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Not enclosing a procedure within braces ({})</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Not surrounding the instructions within single quotes (`')</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Not enclosing regular expressions within slashes (//)</P
></LI
></UL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-2-SECT-4.3"
>2.4.3 Summary of Options</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1245"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1248"
></A
><A
CLASS="xref"
HREF="ch02_04.htm#SEDAWK-CH-2-TAB-2"
TITLE="Command-Line Options for awk"
>Table 2.2</A
> summarizes the awk command-line options.</P
><TABLE
CLASS="table"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="SEDAWK-CH-2-TAB-2"
>Table 2.2: Command-Line Options for awk</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Option</TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Description</TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><I
CLASS="option"
>-f</I
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Filename of script follows.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><I
CLASS="option"
>-F</I
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Change field separator.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><I
CLASS="option"
>-v</I
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><EM
CLASS="emphasis"
>var=value</EM
> follows.</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The <I
CLASS="option"
>-v</I
> option for specifying parameters
on the command line is discussed in <A
CLASS="xref"
HREF="ch07_01.htm"
TITLE="Writing Scripts for awk"
>Chapter 7, Writing Scripts for awk</A
>.</P
></DIV
><A
CLASS="indexterm"
NAME="AUTOID-1279"
></A
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch02_03.htm"
TITLE="2.3 Using sed"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.3 Using sed"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="sed &amp; awk"
><IMG
SRC="../gifs/txthome.gif"
ALT="sed &amp; awk"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch02_05.htm"
TITLE="2.5 Using sed and awk Together"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.5 Using sed and awk Together"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.3 Using sed</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>2.5 Using sed and awk Together</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The UNIX CD Bookshelf Navigation"><MAP
NAME="map"
><AREA
SHAPE="RECT"
COORDS="0,0,73,21"
HREF="../index.htm"
ALT="The UNIX CD Bookshelf"><AREA
SHAPE="RECT"
COORDS="74,0,163,21"
HREF="../upt/index.htm"
ALT="UNIX Power Tools"><AREA
SHAPE="RECT"
COORDS="164,0,257,21"
HREF="../unixnut/index.htm"
ALT="UNIX in a Nutshell"><AREA
SHAPE="RECT"
COORDS="258,0,321,21"
HREF="../vi/index.htm"
ALT="Learning the vi Editor"><AREA
SHAPE="RECT"
COORDS="322,0,378,21"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="379,0,438,21"
HREF="../ksh/index.htm"
ALT="Learning the Korn Shell"><AREA
SHAPE="RECT"
COORDS="439,0,514,21"
HREF="../lrnunix/index.htm"
ALT="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
