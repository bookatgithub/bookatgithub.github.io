<HTML
><HEAD
>
<TITLE>[Chapter 2] 2.5 Using sed and awk Together</TITLE>
<META
NAME="DC.title"
CONTENT="sed &amp; awk"><META
NAME="DC.creator"
CONTENT="Dale Dougherty &amp; Arnold Robbins"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1998-08-03T20:50:22Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-225-5"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch02_01.htm"
TITLE="2. Understanding Basic Operations"><LINK
REL="prev"
HREF="ch02_04.htm"
TITLE="2.4 Using awk"><LINK
REL="next"
HREF="ch03_01.htm"
TITLE="3. Understanding Regular Expression Syntax"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="sed &amp; awk"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/ssrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch02_04.htm"
TITLE="2.4 Using awk"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.4 Using awk"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 2<BR>Understanding Basic Operations</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="CHAPTER"
HREF="ch03_01.htm"
TITLE="3. Understanding Regular Expression Syntax"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3. Understanding Regular Expression Syntax"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SEDAWK-CH-2-SECT-5"
>2.5 Using sed and awk Together</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH02.TOGET1"
></A
><A
CLASS="indexterm"
NAME="CH02.TOGET2"
></A
>In UNIX, pipes can be used to pass the output from one program as
input to the next program.  Let's look at a few examples that combine
sed and awk to produce a report.  The sed script that replaced the
postal abbreviation of a state with its full name is general enough
that it might be used again as a script file named
<KBD
CLASS="command"
>nameState</KBD
>:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>cat nameState</B
></CODE
>
s/ CA/, California/
s/ MA/, Massachusetts/
s/ OK/, Oklahoma/
s/ PA/, Pennsylvania/
s/ VA/, Virginia/</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>Of course, you'd want to handle all states, not just five, and if you
were running it on documents other than mailing lists, you should make
sure that it does not make unwanted replacements.</P
><P
CLASS="para"
>The output for this program, using the input file
<I
CLASS="filename"
>list</I
>, is the same as we have already seen.  In
the next example, the output produced by <KBD
CLASS="command"
>nameState</KBD
>
is piped to an awk program that extracts the name of the state from
each record.</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>sed -f nameState list | awk -F, '{ print $4 }'</B
></CODE
>
 Massachusetts
 Virginia
 Oklahoma
 Pennsylvania
 Massachusetts
 Virginia
 California
 Massachusetts</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>The awk program is processing the output produced by the sed script.
Remember that the sed script replaces the abbreviation with a comma
and the full name of the state.  In effect, it splits the third field
containing the city and state into two fields.  &quot;$4&quot; references the
fourth field.</P
><P
CLASS="para"
>What we are doing here could be done completely in sed, but probably
with more difficulty and less generality.  Also, since awk allows you
to replace the string you match, you could achieve this result
entirely with an awk script.</P
><P
CLASS="para"
>While the result of this program is not very useful, it could
be passed to <KBD
CLASS="command"
>sort | uniq -c</KBD
>, which would sort the states
into an alphabetical list with a count of the number of occurrences
of each state.  </P
><P
CLASS="para"
>Now we are
going to do something more interesting.  We want to produce a report
that sorts the names by state and lists the name of the state followed
by the name of each person residing in that state.  The following
example shows the <KBD
CLASS="command"
>byState</KBD
> program.</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>#! /bin/sh
awk -F, '{ 
	print $4 &quot;, &quot; $0 
	}' $* | 
sort |
awk -F, '
$1 == LastState { 
      print &quot;\t&quot; $2
}
$1 != LastState { 
      LastState = $1
      print $1
}'</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>This shell script has three parts.  The program invokes awk to produce
input for the <KBD
CLASS="command"
>sort</KBD
> program and then invokes awk
again to test the sorted input and determine if the name of the state
in the current record is the same as in the previous record.  Let's see
the script in action:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>sed -f nameState list | byState</B
></CODE
>
 California
	 Amy Wilde
 Massachusetts
	 Eric Adams
	 John Daggett
	 Sal Carpenter
 Oklahoma
	 Orville Thomas
 Pennsylvania
	 Terry Kalkas
 Virginia
	 Alice Ford
	 Hubert Sims</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>The names are sorted by state.  This is a typical example of using
awk to generate a report from structured data.</P
><P
CLASS="para"
>To examine how the <KBD
CLASS="command"
>byState</KBD
> program works, let's
look at each part separately.  It's designed to read input
from the <KBD
CLASS="command"
>nameState</KBD
> program and expects &quot;$4&quot; to be
the name of the state.  Look at the output produced by the first
line of the program:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>sed -f nameState list | awk -F, '{ print $4 &quot;, &quot; $0 }'</B
></CODE
>
 Massachusetts, John Daggett, 341 King Road, Plymouth, Massachusetts
 Virginia, Alice Ford, 22 East Broadway, Richmond, Virginia
 Oklahoma, Orville Thomas, 11345 Oak Bridge Road, Tulsa, Oklahoma
 Pennsylvania, Terry Kalkas, 402 Lans Road, Beaver Falls, Pennsylvania
 Massachusetts, Eric Adams, 20 Post Road, Sudbury, Massachusetts
 Virginia, Hubert Sims, 328A Brook Road, Roanoke, Virginia
 California, Amy Wilde, 334 Bayshore Pkwy, Mountain View, California
 Massachusetts, Sal Carpenter, 73 6th Street, Boston, Massachusetts</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1321"
></A
>The <KBD
CLASS="command"
>sort</KBD
> program, by default, sorts lines in
alphabetical order, looking at characters from left to right.  In
order to sort records by state, and not names, we insert the state as
a sort key at the beginning of the record.  Now the
<KBD
CLASS="command"
>sort</KBD
> program can do its work for us.  (Notice that
using the <KBD
CLASS="command"
>sort</KBD
> utility saves us from having to
write sort routines inside awk.)</P
><P
CLASS="para"
>The second time awk is invoked we perform a programming task.  The
script looks at the first field of each record (the state) to
determine if it is the same as in the previous record.  If it is not
the same, the name of the state is printed followed by the person's
name.  If it is the same, then only the person's name is printed.</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$1 == LastState { 
      print &quot;\t&quot; $2
}
$1 != LastState { 
      LastState = $1
      print $1
      print &quot;\t&quot; $2 
}'</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>There are a few significant things here, including
assigning a variable, testing the first field of each
input line to see if it contains a variable string, and printing
a tab to align the output data.  Note that we don't have to assign
to a variable before using it (because awk variables are initialized
to the empty string).  This is a small script, but you'll see the same
kind of routine used to compare index entries in a much larger
indexing program in <A
CLASS="xref"
HREF="ch12_01.htm"
TITLE="Full-Featured Applications"
>Chapter 12, Full-Featured Applications</A
>.  However, for now,
don't worry too much about understanding what each statement is
doing. Our point here is to give you an overview of what sed and
awk can do.</P
><P
CLASS="para"
>In this chapter, we have covered the basic operations of sed and awk.
We have looked at important command-line options and introduced you to
scripting.  In the next chapter, we are going to look at regular
expressions, something both programs use to match patterns in the
input.</P
><A
CLASS="indexterm"
NAME="AUTOID-1332"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1333"
></A
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch02_04.htm"
TITLE="2.4 Using awk"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.4 Using awk"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="sed &amp; awk"
><IMG
SRC="../gifs/txthome.gif"
ALT="sed &amp; awk"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="CHAPTER"
HREF="ch03_01.htm"
TITLE="3. Understanding Regular Expression Syntax"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3. Understanding Regular Expression Syntax"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.4 Using awk</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3. Understanding Regular Expression Syntax</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The UNIX CD Bookshelf Navigation"><MAP
NAME="map"
><AREA
SHAPE="RECT"
COORDS="0,0,73,21"
HREF="../index.htm"
ALT="The UNIX CD Bookshelf"><AREA
SHAPE="RECT"
COORDS="74,0,163,21"
HREF="../upt/index.htm"
ALT="UNIX Power Tools"><AREA
SHAPE="RECT"
COORDS="164,0,257,21"
HREF="../unixnut/index.htm"
ALT="UNIX in a Nutshell"><AREA
SHAPE="RECT"
COORDS="258,0,321,21"
HREF="../vi/index.htm"
ALT="Learning the vi Editor"><AREA
SHAPE="RECT"
COORDS="322,0,378,21"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="379,0,438,21"
HREF="../ksh/index.htm"
ALT="Learning the Korn Shell"><AREA
SHAPE="RECT"
COORDS="439,0,514,21"
HREF="../lrnunix/index.htm"
ALT="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
