<HTML
><HEAD
>
<TITLE>[Chapter 3] Understanding Regular Expression Syntax</TITLE>
<META
NAME="DC.title"
CONTENT="sed &amp; awk"><META
NAME="DC.creator"
CONTENT="Dale Dougherty &amp; Arnold Robbins"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1998-08-03T20:50:44Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-225-5"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="sed &amp; awk"><LINK
REL="prev"
HREF="ch02_05.htm"
TITLE="2.5 Using sed and awk Together"><LINK
REL="next"
HREF="ch03_02.htm"
TITLE="3.2 A Line-Up of Characters"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="sed &amp; awk"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/ssrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch02_05.htm"
TITLE="2.5 Using sed and awk Together"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.5 Using sed and awk Together"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 3</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch03_02.htm"
TITLE="3.2 A Line-Up of Characters"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2 A Line-Up of Characters"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="CHAPTER"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="SEDAWK-CH-3"
>3. Understanding Regular Expression Syntax</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#SEDAWK-CH-3-SECT-1"
TITLE="3.1 That's an Expression"
>That's an Expression</A
><BR><A
CLASS="sect1"
HREF="ch03_02.htm"
TITLE="3.2 A Line-Up of Characters"
>A Line-Up of Characters</A
><BR><A
CLASS="sect1"
HREF="ch03_03.htm"
TITLE="3.3 I Never Metacharacter I Didn't Like"
>I Never Metacharacter I Didn't Like</A
></P
><P
></P
></DIV
><P
CLASS="para"
>When a young child is struggling to understand the meaning of an idiomatic
expression, such as &quot;Someone let the cat out of the bag,&quot; you might
help by explaining that it's an <EM
CLASS="emphasis"
>expression</EM
>, and
doesn't literally mean what it says.<A
CLASS="indexterm"
NAME="CH03.REG"
></A
></P
><P
CLASS="para"
>An expression, even in computer terminology, is not something
to be interpreted literally.  It is something that needs to be
evaluated.  An expression describes a result. </P
><P
CLASS="para"
>In this chapter, we are going to look at regular expression syntax.
A regular expression describes a pattern or a particular
sequence of characters, although
it does not necessarily specify a single exact sequence.</P
><P
CLASS="para"
>While regular expressions are a basic part of UNIX, not everyone
has a complete understanding of the syntax. 
In fact, it can be quite confusing to look
at an expression such as:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>^<IMG
SRC="../chars/squ.gif"
ALT=" "><IMG
SRC="../chars/squ.gif"
ALT=" ">*.*</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1345"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1347"
></A
>which uses <EM
CLASS="emphasis"
>metacharacters</EM
> or special symbols
to match a line with one or more leading spaces.
(A square box, <IMG
SRC="../chars/squ.gif"
ALT=" ">, is used to make spaces visible in our examples.)</P
><P
CLASS="para"
>If you use any UNIX text editor on a routine basis, you are probably
somewhat familiar with regular expression syntax.
<KBD
CLASS="command"
>grep</KBD
>, sed, and awk all use regular expressions.
However, not all of the metacharacters used in regular expression
syntax are available for all three programs.
The basic set of metacharacters was introduced with the
<KBD
CLASS="command"
>ed</KBD
> line editor, and made available in
<KBD
CLASS="command"
>grep</KBD
>.  Sed uses the same set of metacharacters.<A
CLASS="indexterm"
NAME="AUTOID-1355"
></A
>
Later a program named <KBD
CLASS="command"
>egrep</KBD
> was introduced that
offered an <EM
CLASS="emphasis"
>extended</EM
> set of metacharacters.  Awk
uses essentially the same set of metacharacters as
<KBD
CLASS="command"
>egrep</KBD
>.</P
><P
CLASS="para"
>To understand regular expression syntax, you have to learn
the functions performed by various metacharacters.  But you also
have to see many examples of them working in various combinations. 
That is our approach in this chapter, to introduce each metacharacter
and provide a lot of examples, that for the most part
use <KBD
CLASS="command"
>grep</KBD
>, and its cousin, <KBD
CLASS="command"
>egrep</KBD
>, to demonstrate practical
applications. </P
><P
CLASS="para"
>If you already understand regular expression syntax, feel free
to skip this chapter.
A complete listing of regular expression metacharacters can be found
in <A
CLASS="xref"
HREF="ch03_02.htm#SEDAWK-CH-3-TAB-1"
TITLE="Summary of Metacharacters"
>Table 3.1</A
>, as well as in <A
CLASS="xref"
HREF="appa_01.htm"
TITLE="Quick Reference for sed"
>Appendix A, Quick Reference for sed</A
>, and <A
CLASS="xref"
HREF="appb_01.htm"
TITLE="Quick Reference for awk"
>Appendix B, Quick Reference for awk</A
>. 
For those who are interested,
O'Reilly's <EM
CLASS="emphasis"
>Mastering Regular Expressions</EM
>, by
Jeffrey E. F. Friedl, provides exhaustive coverage of regular expression
construction and use.</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SEDAWK-CH-3-SECT-1"
>3.1 That's an Expression</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH03.EXP"
></A
>You are probably familiar with the kinds of expressions 
that a calculator interprets.
Look at the following arithmetic expression: </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>2 + 4</PRE
></BLOCKQUOTE
><P
CLASS="para"
>&quot;Two plus four&quot; consists of several constants or 
literal values and an operator.  A calculator program must
recognize, for instance, that &quot;2&quot; is a numeric constant and
that the plus sign represents an operator, not to 
be interpreted as the &quot;+&quot; character.</P
><P
CLASS="para"
>An expression tells the computer how to produce a result.  Although it
is the result of &quot;two plus four&quot; that we really want, 
we don't simply tell the computer to return a six. 
We instruct the computer to evaluate the expression and 
return a value. </P
><P
CLASS="para"
>An expression can be more complicated than &quot;2 + 4&quot;; in fact, it
might consist of multiple simple expressions, such as
the following:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>2 + 3 * 4</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1379"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1381"
></A
>A calculator normally evaluates an expression from left to right.
However, certain operators have precedence over others: that is, they
will be performed first.  Thus, the above expression will evaluate to
14 and not 20 because multiplication takes precedence over addition.
Precedence can be overridden by placing the simple expression in
parentheses.  Thus, &quot;(2 + 3) * 4&quot; or &quot;the sum of two plus three times
four&quot; will evaluate to 20.  The parentheses are symbols that instruct
the calculator to change the order in which the expression is
evaluated.</P
><P
CLASS="para"
>A regular expression, by contrast, describes a pattern or sequence of
characters.  <A
CLASS="indexterm"
NAME="AUTOID-1384"
></A
>
Concatenation is the basic operation implied in every regular
expression.  That is, a pattern matches adjacent characters.
Look at the following regular expression: </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>ABE</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Each literal character is a regular expression that
matches only that single character.
This expression describes an &quot;A followed by a B then followed by an E&quot;
or simply &quot;the string ABE&quot;.<A
CLASS="indexterm"
NAME="AUTOID-1388"
></A
>
The term &quot;string&quot; means each character concatenated to the one 
preceding it. 
That a regular expression describes a <EM
CLASS="emphasis"
>sequence</EM
> of characters
can't be emphasized enough.  (Novice users are inclined to think
in higher-level units such as words, and not individual characters.) <A
CLASS="indexterm"
NAME="AUTOID-1391"
></A
>
Regular expressions are case-sensitive; &quot;A&quot; does not match &quot;a&quot;.[1]</P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[1] Some other
programs that use regular expressions offer the option of having them be
case-insensitive, but sed and awk do not.</P
></BLOCKQUOTE
><P
CLASS="para"
>Programs such as <KBD
CLASS="command"
>grep</KBD
> that accept regular expressions  
must first evaluate
the syntax of the regular expression to produce a pattern. 
They then read the input line-by-line trying to match the pattern.
An input line is a string, and
to see if a string matches the pattern, a program compares the first character in
the string to the first character of the pattern.
If there is a match, it compares the second character in
the string to the second character of the pattern.
Whenever it fails to make
a match, it goes back and tries again, beginning one character later in
the string.
<A
CLASS="xref"
HREF="ch03_01.htm#SEDAWK-CH-3-FIG-1"
TITLE="Interpreting a regular expression"
>Figure 3.1</A
> illustrates this process, trying to match the pattern &quot;abe&quot;
on an input line.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1399"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1401"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1403"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1406"
></A
>A regular expression is not limited to literal characters.  There is, for
instance, a metacharacter&nbsp;- the dot (.)&nbsp;- that can be used as a 
&quot;wildcard&quot; to match any single character.
You can think of this wildcard as analogous to a blank tile
in Scrabble where it means any letter.
Thus, we can specify the regular expression &quot;A.E&quot; and it will
match &quot;ACE,&quot; &quot;ABE&quot;, and &quot;ALE&quot;.  It will match any character
in the position following &quot;A&quot;.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1410"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1413"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1416"
></A
>The metacharacter <CODE
CLASS="literal"
>*</CODE
>, the asterisk, is used to match zero or more
occurrences of the <EM
CLASS="emphasis"
>preceding</EM
> regular expression,
which typically is a single character.  You may be familiar with <CODE
CLASS="literal"
>*</CODE
> as a <EM
CLASS="emphasis"
>shell</EM
> metacharacter, where it means &quot;zero or
more characters.&quot;  But that meaning is very different from <CODE
CLASS="literal"
>*</CODE
> in a
regular expression.  By itself, the asterisk metacharacter does not
match anything; it modifies what goes before it.  The regular
expression <CODE
CLASS="literal"
>.*</CODE
> matches any number of characters, whereas in the
shell, <CODE
CLASS="literal"
>*</CODE
> has that meaning.  (For instance, in the shell, <KBD
CLASS="command"
>ls <CODE
CLASS="literal"
>*</CODE
></KBD
> will list all the files in the current directory.)  The
regular expression &quot;A.<CODE
CLASS="literal"
>*</CODE
>E&quot; matches any string that matches &quot;A.E&quot; but it
will also match any number of characters between &quot;A&quot; and &quot;E&quot;:
&quot;AIRPLANE,&quot; &quot;A FINE,&quot; &quot;AFFABLE,&quot; or &quot;A LONG WAY HOME,&quot; for example.
Note that &quot;any number of characters&quot; can even be zero!</P
><P
CLASS="para"
>If you understand the difference between &quot;.&quot; and &quot;*&quot; in regular
expressions, you already know about the two basic types of
metacharacters: those that can be evaluated to a single character, and
those that modify how preceding characters are evaluated.</P
><P
CLASS="para"
>It should also be apparent that
by use of metacharacters you can expand or limit the possible matches. 
You have more control over what's matched and what's not.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="SEDAWK-CH-3-FIG-1"
>Figure 3.1: Interpreting a regular expression</A
></H4
><IMG
CLASS="graphic"
SRC="figs/sed_0301.gif"
ALT="Figure 3.1"><A
CLASS="indexterm"
NAME="AUTOID-1434"
></A
></DIV
><A
CLASS="indexterm"
NAME="AUTOID-2576"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2577"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2581"
></A
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch02_05.htm"
TITLE="2.5 Using sed and awk Together"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.5 Using sed and awk Together"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="sed &amp; awk"
><IMG
SRC="../gifs/txthome.gif"
ALT="sed &amp; awk"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch03_02.htm"
TITLE="3.2 A Line-Up of Characters"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2 A Line-Up of Characters"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.5 Using sed and awk Together</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.2 A Line-Up of Characters</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The UNIX CD Bookshelf Navigation"><MAP
NAME="map"
><AREA
SHAPE="RECT"
COORDS="0,0,73,21"
HREF="../index.htm"
ALT="The UNIX CD Bookshelf"><AREA
SHAPE="RECT"
COORDS="74,0,163,21"
HREF="../upt/index.htm"
ALT="UNIX Power Tools"><AREA
SHAPE="RECT"
COORDS="164,0,257,21"
HREF="../unixnut/index.htm"
ALT="UNIX in a Nutshell"><AREA
SHAPE="RECT"
COORDS="258,0,321,21"
HREF="../vi/index.htm"
ALT="Learning the vi Editor"><AREA
SHAPE="RECT"
COORDS="322,0,378,21"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="379,0,438,21"
HREF="../ksh/index.htm"
ALT="Learning the Korn Shell"><AREA
SHAPE="RECT"
COORDS="439,0,514,21"
HREF="../lrnunix/index.htm"
ALT="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
