<HTML
><HEAD
>
<TITLE>[Chapter 3] 3.2 A Line-Up of Characters</TITLE>
<META
NAME="DC.title"
CONTENT="sed &amp; awk"><META
NAME="DC.creator"
CONTENT="Dale Dougherty &amp; Arnold Robbins"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1998-08-03T20:51:18Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-225-5"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_01.htm"
TITLE="3. Understanding Regular Expression Syntax"><LINK
REL="prev"
HREF="ch03_01.htm"
TITLE="3.1 That's an Expression"><LINK
REL="next"
HREF="ch03_03.htm"
TITLE="3.3 I Never Metacharacter I Didn't Like"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="sed &amp; awk"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/ssrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch03_01.htm"
TITLE="3.1 That's an Expression"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.1 That's an Expression"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 3<BR>Understanding Regular Expression Syntax</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch03_03.htm"
TITLE="3.3 I Never Metacharacter I Didn't Like"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.3 I Never Metacharacter I Didn't Like"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SEDAWK-CH-3-SECT-2"
>3.2 A Line-Up of Characters</A
></H2
><P
CLASS="para"
>We have seen two basic elements in an expression: 

<OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>A value expressed as a literal or a variable.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>An operator.</P
></LI
></OL
></P
><P
CLASS="para"
>A regular expression is made up of these same elements. 
Any character, except the metacharacters 
in <A
CLASS="xref"
HREF="ch03_02.htm#SEDAWK-CH-3-TAB-1"
TITLE="Summary of Metacharacters"
>Table 3.1</A
>, is interpreted as a literal
that matches only itself.</P
><TABLE
CLASS="table"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="SEDAWK-CH-3-TAB-1"
>Table 3.1: Summary of Metacharacters</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Special</TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
></TH
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Characters</TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Usage</TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>.</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Matches any <EM
CLASS="emphasis"
>single</EM
> character except <EM
CLASS="emphasis"
>newline</EM
>.
In awk, dot can match <EM
CLASS="emphasis"
>newline</EM
> also.<A
CLASS="indexterm"
NAME="AUTOID-1464"
></A
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>*</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Matches any number (including zero) of the single character 
(including a character specified by a regular expression) 
that immediately precedes it.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>[...]</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Matches any <EM
CLASS="emphasis"
>one</EM
> of the class of characters enclosed between 
the brackets.  A circumflex (^) as first character inside 
brackets reverses the match to all characters except newline and 
those listed in the class. In awk, newline will also match.
A hyphen (-) is used to indicate 
a range of characters.  The close bracket (]) as the first 
character in class is a member of the class.  All other metacharacters 
lose their meaning when specified as members of a class.<A
CLASS="indexterm"
NAME="AUTOID-1475"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1478"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1481"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1484"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1487"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1489"
></A
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>^</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>First character of regular expression, matches the beginning of the line.
Matches the beginning of a string in awk, even if the string contains
embedded newlines.<A
CLASS="indexterm"
NAME="AUTOID-1496"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1499"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1502"
></A
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>$</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1508"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1510"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1512"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1515"
></A
>As last character of regular expression, matches the end of the line.
Matches the end of a string in awk, even if the string contains
embedded newlines.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>\{<EM
CLASS="emphasis"
>n,m</EM
>\}</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1523"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1526"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1529"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1532"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1534"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1537"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1541"
></A
>Matches a range of occurrences of the single character (including a 
character specified by a regular expression) that immediately precedes it.
\{<EM
CLASS="emphasis"
>n</EM
>\} will match exactly <EM
CLASS="emphasis"
>n</EM
> occurrences,
\{<EM
CLASS="emphasis"
>n</EM
>,\} will match at least <EM
CLASS="emphasis"
>n</EM
> occurrences, and 
\{<EM
CLASS="emphasis"
>n</EM
>,<EM
CLASS="emphasis"
>m</EM
>\} will match any number of occurrences between 
<EM
CLASS="emphasis"
>n</EM
> and <EM
CLASS="emphasis"
>m</EM
>.  (sed and <KBD
CLASS="command"
>grep</KBD
> only, may not be in
some very old versions.)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>\</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Escapes the special character that follows. <A
CLASS="indexterm"
NAME="AUTOID-1558"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1561"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1564"
></A
></P
></TD
></TR
></TBODY
></TABLE
><TABLE
CLASS="informaltable"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="2"
>Extended Metacharacters  (<KBD
CLASS="command"
>egrep</KBD
> and <KBD
CLASS="command"
>awk</KBD
>)</TH
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Special</TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
></TH
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Characters</TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Usage</TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>+</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Matches one or more occurrences of the preceding regular expression.<A
CLASS="indexterm"
NAME="AUTOID-1588"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1591"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1594"
></A
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>?</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Matches zero or one occurrences of the preceding regular expression.<A
CLASS="indexterm"
NAME="AUTOID-1601"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1604"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1607"
></A
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>|</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Specifies that either the preceding or following regular expression 
can be matched (alternation).<A
CLASS="indexterm"
NAME="AUTOID-1614"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1617"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1620"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1623"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1625"
></A
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>()</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Groups regular expressions.<A
CLASS="indexterm"
NAME="AUTOID-1631"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1633"
></A
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>{<EM
CLASS="emphasis"
>n,m</EM
>}</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Matches a range of occurrences of the single character (including a 
character specified by a regular expression) that immediately precedes it.
{<EM
CLASS="emphasis"
>n</EM
>} will match exactly <EM
CLASS="emphasis"
>n</EM
> occurrences,
{<EM
CLASS="emphasis"
>n</EM
>,} will match at least <EM
CLASS="emphasis"
>n</EM
> occurrences, and 
{<EM
CLASS="emphasis"
>n</EM
>,<EM
CLASS="emphasis"
>m</EM
>} will match any number of occurrences between 
<EM
CLASS="emphasis"
>n</EM
> and <EM
CLASS="emphasis"
>m</EM
>.  (POSIX <KBD
CLASS="command"
>egrep</KBD
> and POSIX awk,
not in traditional <KBD
CLASS="command"
>egrep</KBD
> or awk.)[2]</P
></TD
></TR
></TBODY
></TABLE
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[2] Most awk implementations do not yet support this notation.</P
></BLOCKQUOTE
><P
CLASS="para"
>Metacharacters have a special meaning in regular expressions,
much the same way as <CODE
CLASS="literal"
>+</CODE
> and <CODE
CLASS="literal"
>*</CODE
> have special meaning in
arithmetic expressions.
Several of the metacharacters (+ ? () |) 
are available only as part of the extended
set used by programs such as <KBD
CLASS="command"
>egrep</KBD
> and awk.  
We will look at what each metacharacter does
in upcoming sections, beginning with the backslash.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-3-SECT-2.1"
>3.2.1 The Ubiquitous Backslash</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1659"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1662"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1665"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1668"
></A
>The backslash (\) metacharacter 
transforms metacharacters into ordinary characters
(and ordinary characters into metacharacters).
It forces the literal interpretation of
any metacharacter such that it will match itself.
For instance, the dot (.) is a metacharacter that needs to be 
escaped with a backslash if you want to match a period.
This regular expression matches a period followed by three spaces.</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>\.<IMG
SRC="../chars/squ.gif"
ALT=" "><IMG
SRC="../chars/squ.gif"
ALT=" "><IMG
SRC="../chars/squ.gif"
ALT=" "></PRE
></BLOCKQUOTE
><P
CLASS="para"
>The backslash is typically used to match <KBD
CLASS="command"
>troff</KBD
>
requests or macros that begin with a dot. </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>\.nf</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can also use the backslash to escape the backslash.  For instance,
the font change request in <KBD
CLASS="command"
>troff</KBD
> is &quot;\f&quot;. To search
for lines containing this request, you'd use the following regular
expression:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>\\f</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In addition, sed uses the backslash to cause a group of ordinary
characters to be interpreted as metacharacters,
as shown in <A
CLASS="xref"
HREF="ch03_02.htm#SEDAWK-CH-3-FIG-2"
TITLE="Escaped metacharacters in sed"
>Figure 3.2</A
>.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="SEDAWK-CH-3-FIG-2"
>Figure 3.2: Escaped metacharacters in sed</A
></H4
><IMG
CLASS="graphic"
SRC="figs/sed_0302.gif"
ALT="Figure 3.2"><P
CLASS="para"
>The <EM
CLASS="emphasis"
>n</EM
> in the &quot;\<EM
CLASS="emphasis"
>n</EM
>&quot; construct
represents a digit from 1 to 9; its use will be explained in <A
CLASS="xref"
HREF="ch05_01.htm"
TITLE="Basic sed Commands"
>Chapter 5, Basic sed Commands</A
>.  </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-3-SECT-2.2"
>3.2.2 A Wildcard</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1690"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1692"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1695"
></A
>The <EM
CLASS="emphasis"
>wildcard</EM
> metacharacter, or dot (.), might be considered 
equivalent to a variable.  A variable represents
any value in an arithmetic expression.  In a regular expression, a dot
(.) is a wildcard that represents any character except the newline. <A
CLASS="indexterm"
NAME="AUTOID-1698"
></A
>
(In awk, dot can even match an embedded newline character.)</P
><P
CLASS="para"
>Given that we are describing a sequence of characters, the wildcard
metacharacter allows you to specify a position that any character can
fill.</P
><P
CLASS="para"
>For instance, if we were searching a file containing
a discussion of the Intel family of microprocessors, the following
regular expression:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>80.86</PRE
></BLOCKQUOTE
><P
CLASS="para"
>would match lines containing references to &quot;80286,&quot; &quot;80386,&quot;
or &quot;80486.&quot;[3]
To match a decimal point or a period, you must escape the dot
with a backslash.</P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[3] The Pentium family of microprocessors breaks our simple pattern-matching
experiment, spoiling the fun.  Not to mention the original 8086.</P
></BLOCKQUOTE
><P
CLASS="para"
>It is seldom useful to match just any character at the beginning or end
of a pattern.  Therefore, the wildcard character 
is usually preceded and followed by a literal character 
or other metacharacter.   
For example, the following regular expression 
might be written to search for references to chapters:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>Chapter.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>It searches for &quot;the string `Chapter' followed by any character.&quot;
In a search, this expression 
would turn up virtually the same matches as the fixed string
pattern &quot;Chapter&quot;.  Look at the following example:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <KBD
CLASS="command"
>grep 'Chapter.' sample</KBD
>
you will find several examples in Chapter 9.
&quot;Quote me 'Chapter and Verse',&quot; she said. 
Chapter Ten</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Searching for the string 
&quot;Chapter&quot; as opposed to &quot;Chapter.&quot; would have matched all of the
same lines.  
However, there is one case that would be different&nbsp;- if &quot;Chapter&quot; appeared at the end of a line.  The wildcard does
not match the newline, so &quot;Chapter.&quot; would not match 
that line, while the fixed-string pattern would match the line.  </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-3-SECT-2.3"
>3.2.3 Writing Regular Expressions</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH03.WRIT1"
></A
><A
CLASS="indexterm"
NAME="CH03.WRIT2"
></A
>For all practical purposes, you can rely on a program to produce
the correct result.
However, that doesn't mean the program
always works correctly as far as you are concerned.  
Most of the time, you can bet that if a program does not produce
the output that you expected, 
the real problem (putting aside input or syntax errors)
is how you described what you wanted.</P
><P
CLASS="para"
>In other words, the place to look to correct the problem is the
expression where you described the result you wanted.  Either the
expression is incomplete or it is improperly formulated.  For
instance, if a program evaluates this expression:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>PAY = WEEKLY_SALARY * 52</PRE
></BLOCKQUOTE
><P
CLASS="para"
>and knows the values of these variables, it will calculate
the correct result.
But someone might object
that the formula did not account for salespeople, who
also receive a commission.  
To describe this instance, the expression would need to be
reformulated as:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>PAY = WEEKLY_SALARY * 52 + COMMISSION</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You could say that whoever wrote the first
expression did not fully understand the scope of
the problem and thus did not describe it well.
It is important to know just how detailed a description
must be.  If you ask someone to bring you a book, and there are
multiple books in view, you need to describe more specifically 
the book that you want (or be content
with an indeterminate selection process).  </P
><P
CLASS="para"
>The same is true with regular expressions.  A program such as
<KBD
CLASS="command"
>grep</KBD
> is simple and easy to use.  Understanding the
elements of regular expressions is not so hard, either.  Regular
expressions allow you to write simple or complex descriptions of
patterns.  However, what makes writing regular expressions difficult
(and interesting) is the complexity of the application: the variety of
occurrences or contexts in which a pattern appears.  This complexity
is inherent in language itself, just as you can't always understand an
expression by looking up each word in the dictionary.</P
><P
CLASS="para"
>The process of writing a regular expression involves
three steps:

<OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Knowing what it is you want to match and how it might appear in the text. </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Writing a pattern to describe what you want to match.  </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Testing the pattern to see what it matches.</P
></LI
></OL
></P
><P
CLASS="para"
>This process is virtually the same kind of process that a programmer
follows to develop a program.  Step 1 might be considered the specification,
which should reflect an understanding of the problem to be solved as well
as how to solve it.  Step 2 is analogous to the actual coding of the program,
and Step 3 involves running the program and testing it against the 
specification.
Steps 2 and 3 form a loop that is repeated until the program
works satisfactorily.</P
><P
CLASS="para"
>Testing your description of what you want to match 
ensures that the description
works as expected.  It usually uncovers a few surprises.
Carefully examining the results of a test, comparing the output
against the input, will greatly improve your
understanding of regular expressions.
You might consider evaluating the
results of a pattern matching-operation as follows: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Hits</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The lines that I wanted to match.</P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Misses</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The lines that I didn't want to match.</P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>Omissions</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The lines that I didn't match but wanted to match.</P
></DD
><DT
CLASS="term"
><EM
CLASS="emphasis"
>False alarms</EM
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The lines that I matched but didn't want to match.</P
></DD
></DL
><P
CLASS="para"
>Trying to perfect your description of a pattern is something that you
work at from opposite ends: you try to eliminate the false alarms by
limiting the possible matches and you try to capture the omissions by
expanding the possible matches.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1762"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1764"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1768"
></A
>The difficulty is especially apparent when you must 
describe patterns using fixed strings. 
Each character you 
remove from the fixed-string pattern increases the number of possible matches.  
For instance, while searching for the string &quot;what,&quot;
you determine that you'd like to match &quot;What&quot; as well.
The only fixed-string pattern that will 
match &quot;What&quot; and &quot;what&quot; is &quot;hat,&quot; 
the longest string common to both. 
It is obvious, though, that searching for &quot;hat&quot; will
produce unwanted matches.
Each character you add to a fixed-string pattern decreases
the number of possible matches.  
The string &quot;them&quot; will usually produce fewer matches than the string &quot;the.&quot;</P
><P
CLASS="para"
>Using metacharacters in patterns provides 
greater flexibility in extending or narrowing the range of matches.
Metacharacters, used in combination with literals
or other metacharacters, 
can be used to expand the range of matches
while still eliminating the matches that you do not want.</P
><A
CLASS="indexterm"
NAME="AUTOID-1772"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1773"
></A
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-3-SECT-2.4"
>3.2.4 Character Classes</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH03.CHAR1"
></A
><A
CLASS="indexterm"
NAME="CH03.CHAR2"
></A
><A
CLASS="indexterm"
NAME="CH03.CHAR3"
></A
><A
CLASS="indexterm"
NAME="CH03.CHAR4"
></A
><A
CLASS="indexterm"
NAME="CH03.CHAR5"
></A
>A character class is a refinement of the wildcard concept. 
Instead of matching <EM
CLASS="emphasis"
>any</EM
> character at a specific position, we can list
the characters to be matched.
The square bracket metacharacters ([]) enclose the list of
characters, any of which can occupy a single position.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1791"
></A
>Character classes are useful for dealing with uppercase and lowercase
letters, for instance.
If &quot;what&quot; might appear with either an initial
capital letter or a lowercase letter, you can specify:  </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>[Ww]hat</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This regular expression can match &quot;what&quot; or &quot;What.&quot;
It will match any line
that contains this four-character string, the first character of which
is either &quot;W&quot; or &quot;w.&quot;  Therefore, it
could match &quot;Whatever&quot; or &quot;somewhat.&quot; </P
><P
CLASS="para"
>If a file contained structured heading macros, such
as .H1, .H2, .H3, etc.,
you could extract any of these lines with the regular expression:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>\.H[12345]</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This pattern matches a three-character string, where the last character
is any number from 1 to 5.</P
><P
CLASS="para"
>The same syntax is used by the UNIX shell. 
Thus, you can use character classes to
specify filenames in UNIX commands.  For example, to extract headings from
a group of chapter files, you might enter:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <KBD
CLASS="command"
>grep '\.H[123]' ch0[12]</KBD
>
ch01:.H1 &quot;Contents of Distribution Tape&quot;
ch01:.H1 &quot;Installing the Software&quot;
ch01:.H1 &quot;Configuring the System&quot;
ch01:.H2 &quot;Specifying Input Devices&quot;
ch01:.H3 &quot;Using the Touch Screen&quot;
ch01:.H3 &quot;Using the Mouse&quot;
ch01:.H2 &quot;Specifying Printers&quot;
ch02:.H1 &quot;Getting Started&quot;
ch02:.H2 &quot;A Quick Tour&quot;
.
.
.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Note that you have to quote the pattern so that it is passed on to 
<KBD
CLASS="command"
>grep</KBD
>
rather than interpreted by the shell.  The output produced by
<KBD
CLASS="command"
>grep</KBD
> identifies the name of the file 
for each line printed. As another example of a character class, assume you want to specify the 
different punctuation marks that end a sentence: </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>.[!?;:,&quot;.]<IMG
SRC="../chars/squ.gif"
ALT=" "><IMG
SRC="../chars/squ.gif"
ALT=" ">.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This expression matches &quot;any character followed by an exclamation mark
or question mark or semicolon or colon or comma
or quotation mark or period and then followed by two spaces and
any character.&quot;  It could be used to find places where two spaces had
been left between the end of a sentence and the beginning of the next
sentence, when this occurs on one line.  Notice that there are three
dots in this expression.  The first and last dots are wildcard
metacharacters, but the second dot is interpreted literally.<A
CLASS="indexterm"
NAME="AUTOID-1807"
></A
>
Inside square brackets, the standard metacharacters lose their
meaning.  Thus, the dot inside the square brackets indicates a period.
<A
CLASS="xref"
HREF="ch03_02.htm#SEDAWK-CH-3-TAB-2"
TITLE="Special Characters in Character Classes"
>Table 3.2</A
> lists the characters that have a
special meaning inside square brackets.</P
><TABLE
CLASS="table"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="SEDAWK-CH-3-TAB-2"
>Table 3.2: Special Characters in Character Classes</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Character</TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Function</TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>\</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Escapes any special character (<KBD
CLASS="command"
>awk</KBD
> only)</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>-</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Indicates a range when not in the first or last position.</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>^</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Indicates a reverse match only when in the first position.</TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1830"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1833"
></A
>The backslash is special only in awk, making it possible to write
&quot;[a\]1]&quot; for a character class that will match an <B
CLASS="emphasis.bold"
>a</B
>, a right bracket,
or a <B
CLASS="emphasis.bold"
>1</B
>.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SEDAWK-CH-3-SECT-2.4.1"
>3.2.4.1 A range of characters</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1841"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1844"
></A
><A
CLASS="indexterm"
NAME="CH03.HYP1"
></A
><A
CLASS="indexterm"
NAME="CH03.HYP2"
></A
>The hyphen character (-) allows you to specify
a range of characters.
For instance, the range of all uppercase English letters[4]
can be specified as: </P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[4] This can actually be very messy when working in non-ASCII character
sets and/or languages other than English. The POSIX standard addresses
this issue; the new POSIX features are presented below.</P
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>[A-Z]</PRE
></BLOCKQUOTE
><P
CLASS="para"
>A range of single-digit numbers can be specified as:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>[0-9]</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This character class helps solve an earlier problem of matching 
chapter references.  Look at the following regular expression: </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>[cC]hapter [1-9]</PRE
></BLOCKQUOTE
><P
CLASS="para"
>It matches the string &quot;chapter&quot; or &quot;Chapter&quot; followed by a space
and then followed by any single-digit number from 1 to 9.
Each of the following lines match the pattern:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>you will find the information in chapter 9
and chapter 12.
Chapter 4 contains a summary at the end.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Depending upon the task, the second line in this example might be
considered a false alarm.  You might add a space
following &quot;[1-9]&quot; to avoid matching two-digit numbers.  You could also
specify a class of characters not to be matched at that position, as
we'll see in the next section.<A
CLASS="indexterm"
NAME="AUTOID-1864"
></A
>
Multiple ranges can be specified as well as intermixed with literal
characters:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>[0-9a-z?,.;:'&quot;]</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This expression will match &quot;any single character that is numeric, lowercase
alphabetic, or a question mark, comma, period, semicolon, colon, single quote, 
or quotation mark.&quot;
Remember that each character class matches a single character.
If you specify multiple classes, you are describing multiple consecutive
characters such as:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>[a-zA-Z][.?!]</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This expression will match &quot;any lowercase or uppercase letter followed by
either a period, a question mark, or an exclamation mark.&quot;</P
><P
CLASS="para"
>The close bracket (]) is interpreted as a member of the
class if it occurs as the first character in the class
(or as the first character after a circumflex; see the next section).
The hyphen loses its special meaning within a class 
if it is the first or last character.
Therefore, to match arithmetic operators, we put the hyphen (-)
first in the following example:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>[-+*/]</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In awk, you could also use the backslash to escape the hyphen or
close bracket wherever either one
occurs in the range, but the syntax is messier.</P
><P
CLASS="para"
>Trying to match dates with a regular expression is 
an interesting problem.
Here are two possible formats:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>MM-DD-YY
MM/DD/YY</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The following regular expression indicates the possible range of values
for each character position: </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>[0-1][0-9][-/][0-3][0-9][-/][0-9][0-9]</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Either &quot;-&quot; or &quot;/&quot; could be the delimiter.
Putting the hyphen in the first position ensures that it will be interpreted
in a character class literally, as a hyphen, and not as indicating a range.[5]</P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[5] Note that the expression matches dates that mix their delimiters,
as well as impossible dates like &quot;15/32/78.&quot;</P
></BLOCKQUOTE
><A
CLASS="indexterm"
NAME="AUTOID-1881"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1882"
></A
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SEDAWK-CH-3-SECT-2.4.2"
>3.2.4.2 Excluding a class of characters</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1886"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1889"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1892"
></A
>Normally, a character class includes all the characters that
you want to match at that position.
The circumflex (^) as the first character in the class excludes 
all of the characters in the class
from being matched.  Instead any character
except newline[6]
that is not listed in the square brackets will be matched.
The following pattern will match any non-numeric character:</P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[6] In awk, newline can also be matched.</P
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>[^0-9]</PRE
></BLOCKQUOTE
><P
CLASS="para"
>It matches all uppercase and lowercase letters of the alphabet
and all special characters such as punctuation marks.</P
><P
CLASS="para"
>Excluding specific characters is sometimes more convenient
than explicitly listing all the characters you want to match.
For instance, if you wanted to match any consonant,
you could simply exclude vowels:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>[^aeiou]</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This expression would match any consonant,
any vowel in uppercase, and any punctuation mark or special
character. </P
><P
CLASS="para"
>Look at the following regular expression:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>\.DS &quot;[^1]&quot;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This expression matches the string &quot;.DS&quot; followed by a space, a quote
followed by any character other than the number &quot;1,&quot; followed by
a quote.[7]
It is designed to avoid matching the following line:</P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[7] When typing this pattern at the command line, be sure to enclose it in
single quotes. The <B
CLASS="emphasis.bold"
>^</B
> is special to the
original Bourne shell.</P
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>.DS &quot;1&quot;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>while matching lines such as:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>.DS &quot;I&quot; 
.DS &quot;2&quot;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This syntax can also be used to limit the extent of a match, as we'll
see up ahead.<A
CLASS="indexterm"
NAME="AUTOID-1912"
></A
></P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SEDAWK-CH-3-SECT-2.4.3"
>3.2.4.3 POSIX character class additions</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH03.POSIX1"
></A
><A
CLASS="indexterm"
NAME="CH03.POSIX2"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1924"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1926"
></A
>The POSIX standard formalizes the meaning of regular expression
characters and operators.  The standard defines two classes of regular
expressions: Basic Regular Expressions (BREs), which are the kind used
by <B
CLASS="emphasis.bold"
>grep</B
> and sed, and Extended Regular Expressions, which are the kind used
by <KBD
CLASS="command"
>egrep</KBD
> and awk.<A
CLASS="indexterm"
NAME="AUTOID-1930"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1932"
></A
></P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1935"
></A
>In order to accommodate non-English environments, the POSIX standard
enhanced the ability of character classes to match characters not
in the English alphabet.  For example, the French &egrave; is an alphabetic
character, but the typical character class <B
CLASS="emphasis.bold"
>[a-z]</B
> would not
match it.
Additionally,
the standard provides for sequences of characters that should be
treated as a single unit when matching and collating (sorting) string data.</P
><P
CLASS="para"
>POSIX also changed what had been common terminology. What we've been
calling a &quot;character class&quot; is called a &quot;bracket expression&quot; in the POSIX
standard. Within bracket expressions, beside literal characters such as
<B
CLASS="emphasis.bold"
>a</B
>, <B
CLASS="emphasis.bold"
>!</B
>, 
and so on, you can have additional components. These are:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
> <EM
CLASS="emphasis"
>Character classes</EM
>.<A
CLASS="indexterm"
NAME="CH03.POSCHAR2"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1948"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1951"
></A
>
A POSIX character class consists of keywords bracketed by <B
CLASS="emphasis.bold"
>[:</B
> and <B
CLASS="emphasis.bold"
>:]</B
>. The
keywords describe different classes of characters such as alphabetic
characters, control characters, and so on (see <A
CLASS="xref"
HREF="ch03_02.htm#SEDAWK-CH-3-TAB-3"
TITLE="POSIX Character Classes"
>Table 3.3</A
>).</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Collating symbols</EM
>.<A
CLASS="indexterm"
NAME="AUTOID-1959"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1961"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1964"
></A
>
A collating symbol is a multicharacter sequence that should be treated
as a unit. It consists of the characters bracketed by <B
CLASS="emphasis.bold"
>[.</B
> and <B
CLASS="emphasis.bold"
>.]</B
>.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><EM
CLASS="emphasis"
>Equivalence classes</EM
>.<A
CLASS="indexterm"
NAME="AUTOID-1971"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1973"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1976"
></A
>
An equivalence class lists a set of characters that should be considered
equivalent, such as <B
CLASS="emphasis.bold"
>e</B
> and
<B
CLASS="emphasis.bold"
>&egrave;</B
>.
It consists of a named element from the locale,
bracketed by <B
CLASS="emphasis.bold"
>[=</B
>
and <B
CLASS="emphasis.bold"
>=]</B
>. </P
></LI
></UL
><P
CLASS="para"
>All three of these constructs must appear inside the square
brackets of a bracket expression.  For example <B
CLASS="emphasis.bold"
>[[:alpha:]!]</B
> matches
any single alphabetic character or the exclamation point, <B
CLASS="emphasis.bold"
>[[.ch.]]</B
>
matches the collating element <B
CLASS="emphasis.bold"
>ch</B
>, but does not match just the letter
<B
CLASS="emphasis.bold"
>c</B
> or the letter <B
CLASS="emphasis.bold"
>h</B
>. In a French locale,
<B
CLASS="emphasis.bold"
>[[=e=]]</B
> might match any of
<B
CLASS="emphasis.bold"
>e</B
>, <B
CLASS="emphasis.bold"
>&egrave;</B
>, 
or <B
CLASS="emphasis.bold"
>&eacute;</B
>. Classes and matching
characters are shown in <A
CLASS="xref"
HREF="ch03_02.htm#SEDAWK-CH-3-TAB-3"
TITLE="POSIX Character Classes"
>Table 3.3</A
>.</P
><TABLE
CLASS="table"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="SEDAWK-CH-3-TAB-3"
>Table 3.3: POSIX Character Classes</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Class</TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Matching Characters</TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>[:alnum:]</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Printable characters (includes whitespace)</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>[:alpha:]</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Alphabetic characters</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>[:blank:]</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Space and tab characters</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>[:cntrl:]</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Control characters</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>[:digit:]</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Numeric characters</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>[:graph:]</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Printable and visible (non-space) characters</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>[:lower:]</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Lowercase characters</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>[:print:]</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Alphanumeric characters</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>[:punct:]</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Punctuation characters</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>[:space:]</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Whitespace characters</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>[:upper:]</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Uppercase characters</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>[:xdigit:]</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Hexadecimal digits</TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>These features are slowly making their way into commercial versions of
sed and awk, as vendors fully implement the POSIX standard.  GNU awk
and GNU sed support the character class notation, but not the other
two bracket notations.  Check your local system documentation to see
if they are available to you.<A
CLASS="indexterm"
NAME="AUTOID-2038"
></A
></P
><P
CLASS="para"
>Because these features are not widely available yet, the scripts in this
book will not rely on them, and we will continue to use the term
&quot;character class&quot; to refer to  lists of characters in square brackets.</P
><A
CLASS="indexterm"
NAME="AUTOID-2040"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2041"
></A
></DIV
><A
CLASS="indexterm"
NAME="AUTOID-2042"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2043"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2044"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2045"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2046"
></A
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-3-SECT-2.5"
>3.2.5 Repeated Occurrences of a Character</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH03.AST1"
></A
><A
CLASS="indexterm"
NAME="CH03.AST2"
></A
><A
CLASS="indexterm"
NAME="CH03.AST3"
></A
>The asterisk (*) metacharacter indicates that the preceding regular
expression may occur zero or more times.  That is, if it modifies a
single character, the character may be there or not, and if it is,
there may be more than one of them.
You could use the asterisk metacharacter to match a word that might appear
in quotes. </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
><IMG
SRC="../chars/squ.gif"
ALT=" ">&quot;*hypertext&quot;*<IMG
SRC="../chars/squ.gif"
ALT=" "></PRE
></BLOCKQUOTE
><P
CLASS="para"
>The word &quot;hypertext&quot; will be matched regardless of whether it appears
in quotes or not.</P
><P
CLASS="para"
>Also, if the literal character modified by the asterisk does exist, there could be more than one occurrence.  
For instance, let's examine a series of numbers:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>1
5
10
50
100
500
1000
5000</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The regular expression  </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>[15]0*</PRE
></BLOCKQUOTE
><P
CLASS="para"
>would match all lines, whereas the regular expression</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>[15]00*</PRE
></BLOCKQUOTE
><P
CLASS="para"
>would match all but the first two lines.  The first zero is a literal,
but the second is modified by the asterisk, meaning it might or might
not be present.  A similar technique
is used to match consecutive spaces because you usually want
to match one or more, not zero or more, spaces.  You can use the following
to do that:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
><IMG
SRC="../chars/squ.gif"
ALT=" "><IMG
SRC="../chars/squ.gif"
ALT=" ">*</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2070"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2072"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2075"
></A
>When preceded by a dot metacharacter, the asterisk metacharacter
matches any number of characters.  It can be used to identify a span
of characters between two fixed strings.  
If you wanted to match any string inside of quotation marks, you
could specify:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>&quot;.*&quot;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This would match all characters between the first and last quotation
marks on the line plus the quotation marks. The span matched by &quot;.*&quot;
is always the longest possible. This may not seem important now but
it will be once you learn about replacing the string that was matched.</P
><P
CLASS="para"
>As another example, a pair
of angle brackets is a common notation for enclosing
formatting instructions used
in markup languages, such as SGML, HTML, and Ventura Publisher. </P
><P
CLASS="para"
>You could print all lines with these marks by specifying:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>grep '&lt;.*&gt;' sample</B
></CODE
></PRE
></BLOCKQUOTE
><P
CLASS="para"
>When used to modify a character class, the asterisk can match any number of
a character in that class.
For instance, look at the following five-line sample file:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>I can do it
I cannot do it
I can not do it
I can't do it
I cant do it</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If we wanted to match each form of the negative statement, but not the positive
statement, the following regular expression would do it:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>can[<IMG
SRC="../chars/squ.gif"
ALT=" ">no']*t</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The asterisk causes 
any of the characters in the class to be matched in any order
and for any number of occurrences.  Here it is: </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>grep &quot;can[<IMG
SRC="../chars/squ.gif"
ALT=" ">no']*t&quot; sample</B
></CODE
>
I cannot do it
I can not do it
I can't do it
I cant do it</PRE
></BLOCKQUOTE
><P
CLASS="para"
>There are four hits and one miss, the positive statement.
Notice that had the regular expression tried to match any number
of characters between the string &quot;can&quot; and &quot;t,&quot; as in the following
example:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>can.*t</PRE
></BLOCKQUOTE
><P
CLASS="para"
>it would have matched all lines.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2094"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2097"
></A
>The ability to match &quot;zero or more&quot; of something is known by the
technical term &quot;closure.&quot;
The extended set of metacharacters used by <B
CLASS="emphasis.bold"
>egrep</B
>
and awk provides
several variations of closure that<A
CLASS="indexterm"
NAME="AUTOID-2100"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2103"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2106"
></A
>
can be quite useful.  The plus sign (+) matches one or more occurrences
of the preceding regular expression.  Our earlier example
of matching one or more spaces can be simplified as such:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
><IMG
SRC="../chars/squ.gif"
ALT=" ">+</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The plus sign metacharacter can be thought of as &quot;at least one&quot; of the
preceding character.  In fact, it better corresponds to how many people
think <CODE
CLASS="literal"
>*</CODE
> works.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2113"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2116"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2119"
></A
>The question mark
(<CODE
CLASS="literal"
>?</CODE
>) matches zero or one occurrences.
For instance, in a previous example, we used a regular
expression to match &quot;80286,&quot; &quot;80386,&quot; and &quot;80486.&quot;
If we wanted to also match the string &quot;8086,&quot;
we could write a regular expression that could be
used with <KBD
CLASS="command"
>egrep</KBD
> or awk:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>80[234]?86</PRE
></BLOCKQUOTE
><P
CLASS="para"
>It matches the string &quot;80&quot; followed by a &quot;2,&quot; a &quot;3,&quot; a &quot;4,&quot; or no
character followed by the string &quot;86.&quot;
Don't confuse the <CODE
CLASS="literal"
>?</CODE
> in a regular expression with the <CODE
CLASS="literal"
>?</CODE
> wildcard in the
shell.  The shell's <CODE
CLASS="literal"
>?</CODE
> represents a single character, equivalent to <CODE
CLASS="literal"
>.</CODE
> in a
regular expression.</P
><A
CLASS="indexterm"
NAME="AUTOID-2130"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2131"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2132"
></A
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-3-SECT-2.6"
>3.2.6 What's the Word? Part I</A
></H3
><P
CLASS="para"
>As you have probably figured out, it is sometimes difficult to match
a complete word.  For instance, if we wanted to match the pattern &quot;book,&quot;
our search would hit lines containing the word &quot;book&quot; and &quot;books&quot; but
also the words &quot;bookish,&quot; &quot;handbook,&quot; and &quot;booky.&quot;  
The obvious thing to do to limit the matching is to surround &quot;book&quot; with
spaces.</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
><IMG
SRC="../chars/squ.gif"
ALT=" ">book<IMG
SRC="../chars/squ.gif"
ALT=" "></PRE
></BLOCKQUOTE
><P
CLASS="para"
>However, this expression would only match the word &quot;book&quot;;
it would miss the plural &quot;books&quot;.   
To match either the singular or plural word, you could use the 
asterisk metacharacter:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
><IMG
SRC="../chars/squ.gif"
ALT=" ">books*<IMG
SRC="../chars/squ.gif"
ALT=" "></PRE
></BLOCKQUOTE
><P
CLASS="para"
>This will match &quot;book&quot; or &quot;books&quot;.
However, it will not match &quot;book&quot; if it is followed by a period,
a comma, a question mark, or a quotation mark.</P
><P
CLASS="para"
>When you combine the asterisk with the wildcard metacharacter
(.),
you can match zero or more occurrences of any character.
In the previous example, we might write a fuller regular expression 
as:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
><IMG
SRC="../chars/squ.gif"
ALT=" ">book.*<IMG
SRC="../chars/squ.gif"
ALT=" "></PRE
></BLOCKQUOTE
><P
CLASS="para"
>This expression matches the string &quot;book&quot; 
followed by &quot;any number of characters or none followed by a space.&quot;
Here are a few lines that would match:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>Here are the books that you requested
Yes, it is a good book for children
It is amazing to think that it was called a &quot;harmful book&quot; when 
once you get to the end of the book, you can't believe</PRE
></BLOCKQUOTE
><P
CLASS="para"
>(Note that only the second line would be matched by the fixed
string &quot;<IMG
SRC="../chars/squ.gif"
ALT=" ">book<IMG
SRC="../chars/squ.gif"
ALT=" ">&quot;.) 
The expression &quot;<IMG
SRC="../chars/squ.gif"
ALT=" ">book.*<IMG
SRC="../chars/squ.gif"
ALT=" ">&quot; matches lines containing
words such as &quot;booky,&quot; &quot;bookworm,&quot; and &quot;bookish.&quot;    
We could eliminate two of these matches by using a different
modifier.  The question mark (<B
CLASS="emphasis.bold"
>?</B
>), 
which is part of the extended set of metacharacters, matches 0 or 1
occurrences of the preceding character.
Thus, the expression:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
><IMG
SRC="../chars/squ.gif"
ALT=" ">book.?<IMG
SRC="../chars/squ.gif"
ALT=" "></PRE
></BLOCKQUOTE
><P
CLASS="para"
>would match &quot;book,&quot; &quot;books,&quot; and &quot;booky&quot; but not
&quot;bookish&quot; and &quot;bookworm.&quot;  To eliminate a word like &quot;booky,&quot; we would
have to use character classes to specify all the characters in that
position that we want to match.  Furthermore, since the 
question mark metacharacter
is not available with sed, we would have to resort 
to character classes anyway, as you'll see later on.  </P
><P
CLASS="para"
>Trying to be all-inclusive is not always practical with a regular
expression, especially when using <KBD
CLASS="command"
>grep</KBD
>.  Sometimes it is best to keep
the expression simple and allow for the misses.  
However, as you use regular expressions in sed for making replacements,
you will need to be more careful that your regular expression
is complete.  We will look at a more comprehensive
regular expression for searching for words in Part II of &quot;What's the Word?&quot;
later in this chapter.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-3-SECT-2.7"
>3.2.7 Positional Metacharacters</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2153"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2155"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2158"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2161"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2163"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2166"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2169"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2172"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2174"
></A
>There are two metacharacters that allow you to specify
the context in which a string appears, either at the beginning
of a line or at the end of a line.  The circumflex (<B
CLASS="emphasis.bold"
>^</B
>) metacharacter 
is a single-character regular expression indicating the beginning of a
line.
The dollar sign (<B
CLASS="emphasis.bold"
>$</B
>) metacharacter 
is a single-character regular expression indicating the end of a line.
These are often referred to as &quot;anchors,&quot; since they anchor, or restrict,
the match to a specific position. You could print lines that begin with a tab:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>^<IMG
SRC="../chars/bull.gif"
ALT="&#183;"></PRE
></BLOCKQUOTE
><P
CLASS="para"
>(The <IMG
SRC="../chars/bull.gif"
ALT="&#183;"> represents a literal tab character, which is normally
invisible.)
Without the ^ metacharacter, this expression would print any line
containing a tab.</P
><P
CLASS="para"
>Normally, using <KBD
CLASS="command"
>vi</KBD
> to input text to be processed by
<KBD
CLASS="command"
>troff</KBD
>, you do not want spaces appearing at
the end of lines. If you want to find (and remove) them, this
regular expression will match lines with one or more spaces at the end
of a line:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
><IMG
SRC="../chars/squ.gif"
ALT=" "><IMG
SRC="../chars/squ.gif"
ALT=" ">*$</PRE
></BLOCKQUOTE
><P
CLASS="para"
><KBD
CLASS="command"
>troff</KBD
> requests and macros must be 
input at the beginning of a line.
They are two-character strings, preceded by a dot.
If a request or macro has an argument, it is usually followed by a space.
The regular expression used to search for such requests is:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>^\...<IMG
SRC="../chars/squ.gif"
ALT=" "></PRE
></BLOCKQUOTE
><P
CLASS="para"
>This expression matches &quot;a dot at the beginning of a line followed by any 
two-character string, and then followed by a space.&quot;</P
><P
CLASS="para"
>You can use both positional metacharacters together to match blank lines: </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>^$</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You might use this pattern to count the number of blank lines in a file using the count option, <I
CLASS="option"
>-c</I
>, to <KBD
CLASS="command"
>grep</KBD
>: </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>grep -c '^$' ch04</B
></CODE
> 
5</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This regular expression is useful if you want to delete blank
lines using sed.  
The following regular expression can be used to match a blank
line even if it contains spaces:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>^<IMG
SRC="../chars/squ.gif"
ALT=" ">*$</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Similarly, you can match the entire line:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>^.*$</PRE
></BLOCKQUOTE
><P
CLASS="para"
>which is something you might possibly want to do with sed.</P
><P
CLASS="para"
>In sed (and <B
CLASS="emphasis.bold"
>grep</B
>), &quot;^&quot; and &quot;$&quot; are only special when they occur at
the beginning
or end of a regular expression, respectively.  Thus &quot;^abc&quot; means
&quot;match the letters a, b, and c only at the beginning of the line,&quot;
while &quot;ab^c&quot; means &quot;match a, b, a literal ^, and then c, anywhere on the line.&quot;
The same is true for the &quot;$.&quot;</P
><P
CLASS="para"
>In awk, it's different; &quot;^&quot; and &quot;$&quot; are always special, even though
it then becomes possible to write regular expressions that don't match
anything.  Suffice it to say that in awk, when you want to match either
a literal &quot;^&quot; or &quot;$,&quot; you should always escape it with a backslash,
no matter what its position in the regular expression.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SEDAWK-CH-3-SECT-2.7.1"
>3.2.7.1 Phrases</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2207"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2209"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2212"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2215"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2218"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2221"
></A
>A pattern-matching program such as <KBD
CLASS="command"
>grep</KBD
> does not match a string if it
extends over two lines.  For all practical purposes, 
it is difficult to match phrases with
assurance.  Remember that text files are basically unstructured
and line breaks are quite random.  If you are looking for any sequence
of words, it is possible that they might appear on one
line but they may be split up over two.</P
><P
CLASS="para"
>You can write a series of regular expression to capture a phrase:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>Almond Joy
Almond$
^Joy</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This is not perfect, as the second regular expression will match &quot;Almond&quot;
at the end of a line, regardless of whether or not the next line begins
with &quot;Joy&quot;.  A similar problem exists with the third regular expression.</P
><P
CLASS="para"
>Later, when we look at sed, you'll learn how
to match patterns over multiple lines and you'll see
a shell script incorporating sed that 
makes this capability available in a general way.</P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-3-SECT-2.8"
>3.2.8 A Span of Characters</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2232"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2235"
></A
>The metacharacters 
that allow you to specify repeated occurrences
of a character (<B
CLASS="emphasis.bold"
>*+?</B
>) 
indicate a span of undetermined length. 
Consider the following expression:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>11*0</PRE
></BLOCKQUOTE
><P
CLASS="para"
>It will match each of the following lines:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>10
110
111110
1111111111111111111111111110</PRE
></BLOCKQUOTE
><P
CLASS="para"
>These metacharacters give elasticity to a regular expression.</P
><P
CLASS="para"
>Now let's look at a pair of metacharacters that allow you to indicate
a span and also determine the length of the span. So, you
can specify the minimum and maximum number of occurrences of a literal
character or regular expression.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2244"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2247"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2250"
></A
>\{ and \} are available in <KBD
CLASS="command"
>grep</KBD
> and
sed.[8] POSIX <KBD
CLASS="command"
>egrep</KBD
> and POSIX
awk use { and }. In any case, the braces enclose one or two arguments.</P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[8]  Very old versions may not have them; Caveat
emptor.</P
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="blockquote"
><P
CLASS="para"
>\{<EM
CLASS="emphasis"
>n</EM
>,<EM
CLASS="emphasis"
>m</EM
>\}</P
></BLOCKQUOTE
><P
CLASS="para"
><EM
CLASS="emphasis"
>n</EM
> and <EM
CLASS="emphasis"
>m</EM
> are integers between 0 and 255.
If you specify \{<EM
CLASS="emphasis"
>n</EM
>\} by itself, then exactly <EM
CLASS="emphasis"
>n</EM
> occurrences
of the preceding character or regular expression will be matched.
If you specify \{<EM
CLASS="emphasis"
>n</EM
>,\}, then at least <EM
CLASS="emphasis"
>n</EM
> occurrences
will be matched.   
If you specify \{<EM
CLASS="emphasis"
>n</EM
>,<EM
CLASS="emphasis"
>m</EM
>\}, then any number of
occurrences between <EM
CLASS="emphasis"
>n</EM
> and <EM
CLASS="emphasis"
>m</EM
> will be matched.[9]</P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[9] Note that &quot;?&quot; is equivalent to &quot;\{0,1\}&quot;,
&quot;*&quot; is equivalent to &quot;\{0,\}&quot;,
&quot;+&quot; is equivalent to &quot;\{1,\}&quot;,
and no modifier is equivalent to &quot;\{1\}&quot;.</P
></BLOCKQUOTE
><P
CLASS="para"
>For example, the following expression will match &quot;1001,&quot; &quot;10001,&quot; and &quot;100001&quot; but not &quot;101&quot; or &quot;1000001&quot;: </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>10\{2,4\}1</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This metacharacter pair can be useful for matching data
in fixed-length fields, data that perhaps was 
extracted from a database.
It can also be used to match formatted data such as phone numbers,
U.S. social security numbers, inventory part IDs, etc.
For instance, the format of a social security number is
three digits, a hyphen, 
followed by two digits, a hyphen, and
then four digits.
That pattern could be described as follows:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>[0-9]\{3\}-[0-9]\{2\}-[0-9]\{4\}</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Similarly, a North American local phone number could be described with
the following regular expression:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>[0-9]\{3\}-[0-9]\{4\}</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If you are using pre-POSIX awk, where you do not have braces 
available,
you can simply repeat the character classes the appropriate number
of times:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>[0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-3-SECT-2.9"
>3.2.9 Alternative Operations</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2285"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2288"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2291"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2294"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2296"
></A
>The vertical bar (|) metacharacter, part of the extended set of metacharacters,
allows you to specify a union of regular expressions.  A line will match
the pattern if it matches one of the regular expressions.  For instance,
this regular expression:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>UNIX|LINUX</PRE
></BLOCKQUOTE
><P
CLASS="para"
>will match lines containing either the string &quot;UNIX&quot; or the string &quot;LINUX&quot;.
More than one alternative can be specified:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>UNIX|LINUX|NETBSD</PRE
></BLOCKQUOTE
><P
CLASS="para"
>A line matching any of these three patterns will be printed by <KBD
CLASS="command"
>egrep</KBD
>.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2305"
></A
>In sed, lacking the union metacharacter, 
you would specify each pattern
separately.  
In the next section, where we look at grouping operations,
we will see additional examples of this metacharacter.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-3-SECT-2.10"
>3.2.10 Grouping Operations</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2310"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2312"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2314"
></A
>Parentheses, (),  are used to
group regular expressions and establish precedence. 
They are part of the extended set of metacharacters.
Let's say that a company's name in a text file
is referred to as &quot;BigOne&quot; or &quot;BigOne Computer&quot;: </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>BigOne(<IMG
SRC="../chars/squ.gif"
ALT=" ">Computer)?</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This expression will match the string &quot;BigOne&quot; by
itself or followed by a single occurrence of the string
&quot;<IMG
SRC="../chars/squ.gif"
ALT=" ">Computer&quot;.
Similarly, if a term is sometime spelled out and at other
times abbreviated:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>egrep &quot;Lab(oratorie)?s&quot; mail.list</B
></CODE
>
Bell Laboratories, Lucent Technologies
Bell Labs</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can use parentheses with a vertical bar to group alternative operations.
In the following example, we use it to specify a match of the
singular or plural of the word &quot;company.&quot; </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>compan(y|ies)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>It is important to note that applying a quantifier to a parenthesized
group of characters can't be done in most versions of sed and
<KBD
CLASS="command"
>grep</KBD
>, but is available in all versions of
<KBD
CLASS="command"
>egrep</KBD
> and awk.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-3-SECT-2.11"
>3.2.11 What's the Word? Part II</A
></H3
><P
CLASS="para"
>Let's reevaluate the regular expression
for searching for a single word in light
of the new metacharacters we've discussed.  
Our first attempt at writing a regular
expression for <KBD
CLASS="command"
>grep</KBD
>
to search for a word concluded with the following expression:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
><IMG
SRC="../chars/squ.gif"
ALT=" ">book.*<IMG
SRC="../chars/squ.gif"
ALT=" "></PRE
></BLOCKQUOTE
><P
CLASS="para"
>This expression is fairly simple, matching a space followed by the string
&quot;book&quot; followed by any number of characters followed by a space.  However,
it does not match all possible occurrences and it does match a few
nuisance words. </P
><P
CLASS="para"
>The following test file contains numerous occurrences of &quot;book.&quot;
We've added a notation, which is not part of the file, 
to indicate whether the input line should be a &quot;hit&quot; (&gt;) and
included in the output or a &quot;miss&quot; (&lt;). 
We've tried to include as many different examples as possible.</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>cat bookwords</B
></CODE
>
&gt; This file tests for book in various places, such as
&gt; book at the beginning of a line or
&gt; at the end of a line book
&gt; as well as the plural books and
&lt; handbooks.  Here are some
&lt; phrases that use the word in different ways:
&gt; &quot;book of the year award&quot;
&gt; to look for a line with the word &quot;book&quot;
&gt; A GREAT book!
&gt; A great book? No.
&gt; told them about (the books) until it
&gt; Here are the books that you requested
&gt; Yes, it is a good book for children
&gt; amazing that it was called a &quot;harmful book&quot; when
&gt; once you get to the end of the book, you can't believe
&lt; A well-written regular expression should
&lt; avoid matching unrelated words,
&lt; such as booky (is that a word?)
&lt; and bookish and
&lt; bookworm and so on.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>As we search for occurrences of the word &quot;book,&quot; there are 13 lines 
that should be matched and 7 lines that should not be matched.
First, let's run the previous regular expression on
the sample file and check the results.</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>grep '<IMG
SRC="../chars/squ.gif"
ALT=" ">book.*<IMG
SRC="../chars/squ.gif"
ALT=" ">' bookwords</B
></CODE
>
This file tests for book in various places, such as
as well as the plural books and
A great book? No.
told them about (the books) until it
Here are the books that you requested
Yes, it is a good book for children
amazing that it was called a &quot;harmful book&quot; when
once you get to the end of the book, you can't believe
such as booky (is that a word?)
and bookish and</PRE
></BLOCKQUOTE
><P
CLASS="para"
>It only prints 8 of the 13 lines that we want to match
and it prints 2 of the lines that we don't want to match.
The expression matches lines containing
the words &quot;booky&quot; and &quot;bookish.&quot; It ignores &quot;book&quot; at the beginning
of a line and at the end of a line.  
It ignores &quot;book&quot; when there are certain punctuation marks involved.</P
><P
CLASS="para"
>To restrict the search even more,
we must use character classes. 
Generally, the list of characters that might end a word
are punctuation marks, such as:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>? . , ! ; : '</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In addition, quotation marks, parentheses, braces, and brackets
might surround a word or open or close with a word: </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>&quot; () {} []</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You would also have to accommodate
the plural or possessive forms of the word.</P
><P
CLASS="para"
>Thus, you would have two different character classes:  before and after
the word.  Remember that all we have to do is list the members of
the class inside square brackets.
Before the word, we now have:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>[&quot;[{(]</PRE
></BLOCKQUOTE
><P
CLASS="para"
>and after the word:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>[]})&quot;?!.,;:'s]</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Note that putting the closing square bracket as the first character in the class
makes it a member of the class rather than closing the set.
Putting the two classes together, we get the expression:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
><IMG
SRC="../chars/squ.gif"
ALT=" ">[&quot;[{(]*book[]})&quot;?!.,;:'s]*<IMG
SRC="../chars/squ.gif"
ALT=" "></PRE
></BLOCKQUOTE
><P
CLASS="para"
>Show this to the uninitiated, and they'll throw up their hands in
despair!  But now that you know the principles involved, you can not
only understand this expression, but could easily reconstruct it.
Let's see how it does on the sample file (we use double quotes to
enclose the single quote character, and then a backslash in front of
the embedded double quotes):</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>grep &quot; [\&quot;[{(]*book[]})\&quot;?!.,;:'s]* &quot; bookwords</B
></CODE
>
This file tests for book in various places, such as
as well as the plural books and
A great book? No.
told them about (the books) until it
Here are the books that you requested
Yes, it is a good book for children
amazing that it was called a &quot;harmful book&quot; when
once you get to the end of the book, you can't believe</PRE
></BLOCKQUOTE
><P
CLASS="para"
>We eliminated the lines that we don't want but there
are four lines that we're not getting. 
Let's examine the four lines:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>book at the beginning of a line or
at the end of a line book
&quot;book of the year award&quot; 
A GREAT book!</PRE
></BLOCKQUOTE
><P
CLASS="para"
>All of these are problems caused by the string appearing
at the beginning or end of a line.  
Because there is no space at the beginning
or end of a line, the pattern is not matched.  
We can use the positional metacharacters, ^ and $.  Since
we want to match either a space or beginning or end
of a line, we can use <KBD
CLASS="command"
>egrep</KBD
> and specify the &quot;or&quot; metacharacter along with
parentheses for grouping.  
For instance, to match either the beginning of a line
or a space, you could write the expression:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>(^| )</PRE
></BLOCKQUOTE
><P
CLASS="para"
>(Because | and ()
are part of the extended set of metacharacters, if
you were using sed, you'd have to write
different expressions to handle each case.)</P
><P
CLASS="para"
>Here's the revised regular expression: </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>(^| )[&quot;[{(]*book[]})&quot;?\!.,;:'s]*( |$)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now let's see how it works:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>egrep &quot;(^| )[\&quot;[{(]*book[]})\&quot;?\!.,;:'s]*( |$)&quot; bookwords</B
></CODE
>
This file tests for book in various places, such as
book at the beginning of a line or
at the end of a line book
as well as the plural books and
&quot;book of the year award&quot;
to look for a line with the word &quot;book&quot;
A GREAT book!
A great book? No.
told them about (the books) until it
Here are the books that you requested
Yes, it is a good book for children
amazing that it was called a &quot;harmful book&quot; when
once you get to the end of the book, you can't believe</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This is certainly a complex regular expression; however,
it can be broken down into parts.  
This expression may not match every single instance,
but it can be easily adapted to handle other occurrences
that you may find.</P
><P
CLASS="para"
>You could also create a simple shell script to replace &quot;book&quot; with
a command-line argument.  The only problem might be 
that the plural of some words is not simply &quot;s.&quot; 
By sleight of hand, you could handle the &quot;es&quot; plural by adding &quot;e&quot; to the character
class following the word; it would work in many cases. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2367"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2370"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2373"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2376"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2379"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2382"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2385"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2389"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2393"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2396"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2400"
></A
>As a further note, the <KBD
CLASS="command"
>ex</KBD
> and <KBD
CLASS="command"
>vi</KBD
>
text editors have a special metacharacter 
for matching a string at the beginning of a word, \&lt;,
and one for matching a string at the end of a word, \&gt;.  Used
as a pair, they can match a string only when it is a complete word. 
(For these operators, a word is a string of non-whitespace
characters with whitespace on both sides, or at the beginning
or end of a line.)
Matching a word is such a common case that these metacharacters 
would be widely used, if they were available for all 
regular expressions.[10]</P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[10] GNU programs, such as the GNU versions of awk, sed,
and <KBD
CLASS="command"
>grep</KBD
>,
also support \&lt; and \&gt;.</P
></BLOCKQUOTE
><DIV
CLASS="sidebar"
><H4
CLASS="sidebar"
><A
CLASS="title"
NAME="AUTOID-2409"
>A Program for Making Single Replacements</A
></H4
><P
CLASS="para"
>The MKS Toolkit, a set of UNIX utilities for DOS by Mortice Kern
Systems, Inc., contains a very useful program called <KBD
CLASS="command"
>gres</KBD
>
(<EM
CLASS="emphasis"
>g</EM
>lobal <EM
CLASS="emphasis"
>r</EM
>egular <EM
CLASS="emphasis"
>e</EM
>xpression <EM
CLASS="emphasis"
>s</EM
>ubstitution).<A
CLASS="indexterm"
NAME="AUTOID-2417"
></A
>
Just like <KBD
CLASS="command"
>grep</KBD
>, it searches for a pattern in a file; however,
it allows you to specify a replacement for the string that you match.
This program is in fact a simplified version of sed, and
like sed, it prints all lines
regardless of whether or not a replacement was made.
It does not make the replacement in the file itself.  You have to
redirect the output from the program into a file if you want to save
the changes. </P
><P
CLASS="para"
><KBD
CLASS="command"
>gres</KBD
> is not part of standard UNIX but it would be a nice
tool to have.  It can be created using a simple shell
script that invokes sed to do the work.</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>cat gres</B
></CODE
>
if [ $# -lt &quot;3&quot; ] 
then 
	echo Usage: gres pattern replacement file
	exit 1
fi
pattern=$1
replacement=$2
if [ -f $3 ] 
then 
	file=$3
else
	echo $3 is not a file.
	exit 1
fi
A=&quot;`echo | tr '\012' '\001' `&quot; # See footnote[11]
sed -e &quot;s$A$pattern$A$replacement$A&quot; $file</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Throughout the rest of the chapter, we will use <KBD
CLASS="command"
>gres</KBD
> to
demonstrate the use of replacement metacharacters.  Remember that
whatever applies to <KBD
CLASS="command"
>gres</KBD
> applies to sed as well.
Here we replace the string matched by the 
regular expression &quot;A.*Z&quot; with double zero (00).</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>gres &quot;A.*Z&quot; &quot;00&quot; sample</B
></CODE
>
00ippy, our dog
00iggy
00elda</PRE
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-3-SECT-2.12"
>3.2.12 Your Replacement Is Here</A
></H3
><P
CLASS="para"
>When using <KBD
CLASS="command"
>grep</KBD
>, it seldom matters how you match the line
as long as you match it.  
When you want to make a replacement, however, 
you have to consider
the extent of the match.
So, what characters on the line did you 
actually match?  </P
><P
CLASS="para"
>In this section, we're going to look at
several examples that demonstrate the extent of a match.  
Then we'll use a program that works
like <KBD
CLASS="command"
>grep</KBD
> but also allows you to specify a
replacement string.  Lastly, we will look at several
metacharacters used to describe the replacement string.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SEDAWK-CH-3-SECT-2.12.1"
>3.2.12.1 The extent of the match</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH03.PATT1"
></A
><A
CLASS="indexterm"
NAME="CH03.PATT2"
></A
><A
CLASS="indexterm"
NAME="CH03.SEARCH"
></A
><A
CLASS="indexterm"
NAME="CH03.SEARCH2"
></A
>Let's look at the following regular
expression:  </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>A*Z</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This matches &quot;zero or more occurrences of A followed by Z.&quot;  
It will produce
the same result as simply specifying &quot;Z&quot;.  The letter &quot;A&quot; could be there
or not; in fact, the letter &quot;Z&quot; is the only character matched.  
Here's a sample two-line file:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>All of us, including Zippy, our dog
Some of us, including Zippy, our dog</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If we try to match the previous regular expression, both lines
would print out.  
Interestingly enough, the actual match in both cases 
is made on the &quot;Z&quot; and only the &quot;Z&quot;.  We can use the <KBD
CLASS="command"
>gres</KBD
> command
(see the sidebar, &quot;A Program for Making Single Replacements&quot;) to demonstrate
the extent of the match.  </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
><CODE
CLASS="userinput"
><B
>$ gres &quot;A*Z&quot; &quot;00&quot; test</B
></CODE
>
All of us, including 00ippy, our dog
Some of us, including 00ippy, our dog</PRE
></BLOCKQUOTE
><P
CLASS="para"
>We would have expected the 
extent of the match on the first line to be from the &quot;A&quot; to the &quot;Z&quot;
but only the &quot;Z&quot; is actually matched.
This result may be more apparent if we change the
regular expression slightly: </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>A.*Z</PRE
></BLOCKQUOTE
><P
CLASS="para"
>&quot;.*&quot; can be interpreted as &quot;zero or more occurrences of any 
character,&quot; which means that &quot;any number of characters&quot; can be
found, including none at all.
The entire expression can be evaluated as 
&quot;an A followed by any number of characters followed by a Z.&quot;  
An &quot;A&quot; is the initial character in the 
pattern and &quot;Z&quot; is the last character; anything or nothing
might occur in between.
Running <KBD
CLASS="command"
>grep</KBD
> on the same two-line file
produces one line of output. 
We've added a line of carets (^) underneath to mark what was matched.</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>All of us, including Zippy, our dog
^^^^^^^^^^^^^^^^^^^^^^</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The extent of the match is from &quot;A&quot; to &quot;Z&quot;. 
The same regular expression would also match the following line:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>I heard it on radio station WVAZ 1060.
                              ^^</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The string &quot;A.*Z&quot; matches &quot;A followed by any number of characters (including
zero) followed by Z.&quot;
Now, let's look at a similar set of sample lines that 
contain multiple occurrences of &quot;A&quot; and &quot;Z&quot;.</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>All of us, including Zippy, our dog
All of us, including Zippy and Ziggy
All of us, including Zippy and Ziggy and Zelda</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The regular expression &quot;A.*Z&quot; will match the longest possible extent in each
case.</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>All of us, including Zippy, our dog
^^^^^^^^^^^^^^^^^^^^^^
All of us, including Zippy and Ziggy
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
All of us, including Zippy and Ziggy and Zelda 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This can cause problems if what you want is to match the shortest
extent possible.  </P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-3-SECT-2.13"
>3.2.13 Limiting the Extent</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-2473"
></A
>Earlier we said that a regular expression tries to match
the longest string possible and that can cause
unexpected problems.
For instance, look at the regular expression to match
any number of characters inside of quotation marks:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>&quot;.*&quot;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Let's look at a <KBD
CLASS="command"
>troff</KBD
> macro
that has two quoted arguments, as shown below:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>.Se &quot;Appendix&quot; &quot;Full Program Listings&quot;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>To match the first argument,
we might describe the pattern with the 
following regular expression:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>\.Se &quot;.*&quot;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>However, it ends up matching the whole line because the second
quotation mark in the pattern matches the last quotation mark on the
line.
If you know how many arguments there are, you can specify each
of them:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>\.Se &quot;.*&quot; &quot;.*&quot;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Although this works as you'd expect, each line might not have the
same number of arguments, causing omissions&nbsp;- you simply want the
first argument.
Here's a different regular expression that matches
the shortest possible extent between two quotation marks:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>&quot;[^&quot;]*&quot;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>It matches &quot;a quote followed by any number of characters that
do not match a quote followed by a quote&quot;: </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>gres '&quot;[^&quot;]*&quot;' '00' sampleLine</B
></CODE
>
.Se 00 &quot;Appendix&quot;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Now let's look at a few lines with a dot character (.)
used as a leader between two columns of numbers:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>1........5
5........10
10.......20
100......200</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The difficulty in matching the leader characters is that their number
is variable. Let's say that you wanted to replace all of the leaders
with a single tab. You might write a regular expression to match the
line as follows:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>[0-9][0-9]*\.\.*[0-9][0-9]*</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This expression might unexpectedly match the line:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>see Section 2.3</PRE
></BLOCKQUOTE
><P
CLASS="para"
>To restrict matching, 
you could specify the minimum number of dots that are common
to all lines: </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>[0-9][0-9]*\.\{5,\}[0-9][0-9]*</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This expression uses braces available in sed to match &quot;a single number followed by at least
five dots and then followed by a single number.&quot;
To see this in action, we'll show a sed command that replaces the
leader dots with a hyphen.  However, we have not covered the syntax of
sed's replacement
metacharacters&nbsp;- <B
CLASS="emphasis.bold"
>\(</B
>
and <B
CLASS="emphasis.bold"
>\)</B
> to save a part of a
regular expression and <B
CLASS="emphasis.bold"
>\1</B
> and <B
CLASS="emphasis.bold"
>\2</B
> to recall the saved portion.
This command, therefore, may look rather complex (it is!) but it does
the job.</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ sed 's/\([0-9][0-9]*\)\.\{5,\}\([0-9][0-9]*\)/\1-\2/' sample
1-5
5-10
10-20
100-200</PRE
></BLOCKQUOTE
><P
CLASS="para"
>A similar expression can be written to match one or more
leading tabs or tabs between columns of data.
You could change the order of columns as well as replacing the
tab with another delimiter.
You should experiment on your own by making simple and complex
replacements, using sed or <KBD
CLASS="command"
>gres</KBD
>.</P
><A
CLASS="indexterm"
NAME="AUTOID-2504"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2505"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2506"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2507"
></A
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch03_01.htm"
TITLE="3.1 That's an Expression"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.1 That's an Expression"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="sed &amp; awk"
><IMG
SRC="../gifs/txthome.gif"
ALT="sed &amp; awk"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch03_03.htm"
TITLE="3.3 I Never Metacharacter I Didn't Like"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.3 I Never Metacharacter I Didn't Like"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.1 That's an Expression</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.3 I Never Metacharacter I Didn't Like</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The UNIX CD Bookshelf Navigation"><MAP
NAME="map"
><AREA
SHAPE="RECT"
COORDS="0,0,73,21"
HREF="../index.htm"
ALT="The UNIX CD Bookshelf"><AREA
SHAPE="RECT"
COORDS="74,0,163,21"
HREF="../upt/index.htm"
ALT="UNIX Power Tools"><AREA
SHAPE="RECT"
COORDS="164,0,257,21"
HREF="../unixnut/index.htm"
ALT="UNIX in a Nutshell"><AREA
SHAPE="RECT"
COORDS="258,0,321,21"
HREF="../vi/index.htm"
ALT="Learning the vi Editor"><AREA
SHAPE="RECT"
COORDS="322,0,378,21"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="379,0,438,21"
HREF="../ksh/index.htm"
ALT="Learning the Korn Shell"><AREA
SHAPE="RECT"
COORDS="439,0,514,21"
HREF="../lrnunix/index.htm"
ALT="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
