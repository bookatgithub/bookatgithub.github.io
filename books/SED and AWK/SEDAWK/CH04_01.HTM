<HTML
><HEAD
>
<TITLE>[Chapter 4] Writing sed Scripts</TITLE>
<META
NAME="DC.title"
CONTENT="sed &amp; awk"><META
NAME="DC.creator"
CONTENT="Dale Dougherty &amp; Arnold Robbins"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1998-08-03T20:52:10Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-225-5"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="sed &amp; awk"><LINK
REL="prev"
HREF="ch03_03.htm"
TITLE="3.3 I Never Metacharacter I Didn't Like"><LINK
REL="next"
HREF="ch04_02.htm"
TITLE="4.2 A Global Perspective on Addressing"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="sed &amp; awk"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/ssrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch03_03.htm"
TITLE="3.3 I Never Metacharacter I Didn't Like"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.3 I Never Metacharacter I Didn't Like"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 4</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch04_02.htm"
TITLE="4.2 A Global Perspective on Addressing"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.2 A Global Perspective on Addressing"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="CHAPTER"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="SEDAWK-CH-4"
>4. Writing sed Scripts</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#SEDAWK-CH-4-SECT-1"
TITLE="4.1 Applying Commands in a Script"
>Applying Commands in a Script</A
><BR><A
CLASS="sect1"
HREF="ch04_02.htm"
TITLE="4.2 A Global Perspective on Addressing"
>A Global Perspective on Addressing</A
><BR><A
CLASS="sect1"
HREF="ch04_03.htm"
TITLE="4.3 Testing and Saving Output"
>Testing and Saving Output</A
><BR><A
CLASS="sect1"
HREF="ch04_04.htm"
TITLE="4.4 Four Types of sed Scripts"
>Four Types of sed Scripts</A
><BR><A
CLASS="sect1"
HREF="ch04_05.htm"
TITLE="4.5 Getting to the PromiSed Land"
>Getting to the PromiSed Land</A
></P
><P
></P
></DIV
><P
CLASS="para"
>To use sed, you write a script that contains a series of editing
actions and then you run the script on an input file.  Sed allows you
to take what would be a <EM
CLASS="emphasis"
>hands-on</EM
> procedure in an
editor such as <KBD
CLASS="command"
>vi</KBD
> and transform it into
a <EM
CLASS="emphasis"
>look-no-hands</EM
> procedure that is executed from a
script.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH04.WRIT"
></A
>When performing edits manually, you come to trust the cause-and-effect 
relationship of entering an editing command and seeing the immediate
result.  There is usually an &quot;undo&quot; command that allows you to reverse
the effect of a command and return the text file to its previous state. 
Once you learn an interactive text editor, you experience 
the feeling of making changes in a safe and controlled manner, one
step at a time. </P
><P
CLASS="para"
>Most people new to sed will feel there is greater risk in writing a
script to perform a series of edits than in making those changes
manually.  The fear is that by automating the task, something will
happen that cannot be reversed.  The object of learning sed is to
understand it well enough to see that your results are predictable.
In other words, you come to understand the cause-and-effect
relationship between your editing script and the output that you get.</P
><P
CLASS="para"
>This requires using sed in a controlled, methodical way. 
In writing a script, you should follow these steps:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Think through what you want to do before you do it.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Describe, unambiguously, a procedure to do it.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Test the procedure repeatedly before committing to any final changes. </P
></LI
></OL
><P
CLASS="para"
>These steps are simply a restatement of the same process we described
for writing regular expressions in <A
CLASS="xref"
HREF="ch03_01.htm"
TITLE="Understanding Regular Expression Syntax"
>Chapter 3, Understanding Regular Expression Syntax</A
>.  They
describe a methodology
for writing programs of any kind.  The best way
to see if your script works is to run tests on different input samples
and observe the results.</P
><P
CLASS="para"
>With practice, you can come to rely upon your sed scripts working just
as you want them to. (There is something analogous in the management of
one's own time, learning to trust that certain tasks can be delegated
to others.  You begin testing people on small tasks, and if they
succeed, you give them larger tasks.)</P
><P
CLASS="para"
>This chapter, then, is about making you comfortable writing scripts
that do your editing work for you.  This involves understanding 
three basic principles of how sed
works:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>All editing commands in a script are applied in order 
to each line of input.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Commands are applied to all lines (globally) unless line
addressing restricts the lines affected by editing commands.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The original input file is unchanged; the editing commands modify 
a copy of original input line and the copy is sent to standard output.</P
></LI
></UL
><P
CLASS="para"
>After covering these basic principles, we'll look at four types of
scripts that demonstrate different sed applications.  These scripts
provide the basic models for the scripts that you will write.
Although there are a number of commands available for use in sed, the
scripts in this chapter purposely use only a few commands.
Nonetheless, you may be surprised at how much you can do with so few.
(<A
CLASS="xref"
HREF="ch05_01.htm"
TITLE="Basic sed Commands"
>Chapter 5, Basic sed Commands</A
>, and <A
CLASS="xref"
HREF="ch06_01.htm"
TITLE="Advanced sed Commands"
>Chapter 6, Advanced sed Commands</A
>,
present the basic and advanced sed commands, respectively.)  The idea
is to concentrate from the outset on understanding how a script works
and how to use a script before exploring all the commands that can be
used in scripts.</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SEDAWK-CH-4-SECT-1"
>4.1 Applying Commands in a Script</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH04.COMM1"
></A
><A
CLASS="indexterm"
NAME="CH04.COMM2"
></A
>Combining a series of edits in a script can have unexpected results.
You might not think of the consequences one edit can have on another.
New users typically think that sed applies an individual editing
command to all lines of input before applying the next editing
command.  But the opposite is true.  Sed applies the entire script to
the first input line before reading the second input line and applying
the editing script to it.  Because sed is always working with the
latest version of the original line, any edit that is made changes the
line for subsequent commands.  Sed doesn't retain the original.  This
means that a pattern that might have matched the original input line
may no longer match the line after an edit has been made.</P
><P
CLASS="para"
>Let's look at an example that uses the substitute command.  Suppose
someone quickly wrote the following script to change &quot;pig&quot; to &quot;cow&quot;
and &quot;cow&quot; to &quot;horse&quot;:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>s/pig/cow/
s/cow/horse/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>What do you think happened?  Try it on a sample file.  We'll discuss
what happened later, after we look at how sed works.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-4-SECT-1.1"
>4.1.1 The Pattern Space</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH04.PATT"
></A
>Sed maintains a <EM
CLASS="emphasis"
>pattern space</EM
>, a workspace or
temporary buffer where a single line of input is held while the
editing commands are applied.[1] 
The transformation of the pattern space by a two-line script is shown
in <A
CLASS="xref"
HREF="ch04_01.htm#SEDAWK-CH-4-FIG-1"
TITLE="The commands in the script change
the contents of the pattern space."
>Figure 4.1</A
>.  It changes &quot;The Unix System&quot;
to &quot;The UNIX Operating System.&quot;</P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[1] One advantage of the one-line-at-a-time design is that sed can read
very large files without any problems.  Screen editors that have to
read the entire file into memory, or some large portion of it, can run
out of memory or be extremely slow to use in dealing with large files.</P
></BLOCKQUOTE
><P
CLASS="para"
>Initially, the pattern space contains a copy of a single input line.
In <A
CLASS="xref"
HREF="ch04_01.htm#SEDAWK-CH-4-FIG-1"
TITLE="The commands in the script change
the contents of the pattern space."
>Figure 4.1</A
>, that line is &quot;The Unix System.&quot;
The normal flow through the script is to execute each command on that
line until the end of the script is reached.  The first command in the
script is applied to that line, changing &quot;Unix&quot; to &quot;UNIX.&quot; Then the
second command is applied, changing &quot;UNIX System&quot; to &quot;UNIX Operating
System.&quot;[2] 
Note that the pattern for the second substitute command does not match
the original input line; it matches the current line as it has changed
in the pattern space.</P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[2] Yes, we could have changed &quot;Unix System&quot; to &quot;UNIX Operating System&quot; in
one step.  However, the input file might have instances of &quot;UNIX
System&quot; as well as &quot;Unix System.&quot;  So by changing &quot;Unix&quot; to &quot;UNIX&quot; we
make both instances consistent before changing them to &quot;UNIX Operating
System.&quot;  </P
></BLOCKQUOTE
><P
CLASS="para"
>When all the instructions have been applied, the current line is
output and the next line of input is read into the pattern space.
Then all the commands in the script are applied to that line.</P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="SEDAWK-CH-4-FIG-1"
>Figure 4.1: The commands in the script change
the contents of the pattern space.</A
></H4
><IMG
CLASS="graphic"
SRC="figs/sed_0401.gif"
ALT="Figure 4.1"><P
CLASS="para"
>As a consequence, any sed command might change the contents of the
pattern space for the next command.  The contents of the pattern space
are dynamic and do not always match the original input line.  That was
the problem with the sample script at the beginning of this chapter.
The first command would change &quot;pig&quot; to &quot;cow&quot; as expected.  However,
when the second command changed &quot;cow&quot; to &quot;horse&quot; on the same line, it
also changed the &quot;cow&quot; that had been a &quot;pig.&quot;  So, where the input
file contained pigs and cows, the output file has only horses!</P
><P
CLASS="para"
>This mistake is simply a problem of the order of the commands in the
script.  Reversing the order of the commands&nbsp;- changing &quot;cow&quot;
into &quot;horse&quot; before changing &quot;pig&quot; into &quot;cow&quot;&nbsp;- does the
trick.</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>s/cow/horse/
s/pig/cow/</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Some sed commands change the flow through the script, as we will see
in subsequent chapters.  For example, the <KBD
CLASS="command"
>N</KBD
> command
reads another line into the pattern space without removing the current
line, so you can test for patterns across multiple lines.  Other
commands tell sed to exit before reaching the bottom of the script or
to go to a labeled command.  Sed also maintains a second temporary
buffer called the <EM
CLASS="emphasis"
>hold space</EM
>.  You can copy the
contents of the pattern space to the hold space and retrieve them later.
The commands that make use of the hold space are discussed in Chapter 6.</P
><A
CLASS="indexterm"
NAME="AUTOID-2654"
></A
></DIV
><A
CLASS="indexterm"
NAME="AUTOID-2655"
></A
><A
CLASS="indexterm"
NAME="AUTOID-2656"
></A
></DIV
><A
CLASS="indexterm"
NAME="AUTOID-3123"
></A
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch03_03.htm"
TITLE="3.3 I Never Metacharacter I Didn't Like"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.3 I Never Metacharacter I Didn't Like"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="sed &amp; awk"
><IMG
SRC="../gifs/txthome.gif"
ALT="sed &amp; awk"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch04_02.htm"
TITLE="4.2 A Global Perspective on Addressing"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.2 A Global Perspective on Addressing"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.3 I Never Metacharacter I Didn't Like</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4.2 A Global Perspective on Addressing</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The UNIX CD Bookshelf Navigation"><MAP
NAME="map"
><AREA
SHAPE="RECT"
COORDS="0,0,73,21"
HREF="../index.htm"
ALT="The UNIX CD Bookshelf"><AREA
SHAPE="RECT"
COORDS="74,0,163,21"
HREF="../upt/index.htm"
ALT="UNIX Power Tools"><AREA
SHAPE="RECT"
COORDS="164,0,257,21"
HREF="../unixnut/index.htm"
ALT="UNIX in a Nutshell"><AREA
SHAPE="RECT"
COORDS="258,0,321,21"
HREF="../vi/index.htm"
ALT="Learning the vi Editor"><AREA
SHAPE="RECT"
COORDS="322,0,378,21"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="379,0,438,21"
HREF="../ksh/index.htm"
ALT="Learning the Korn Shell"><AREA
SHAPE="RECT"
COORDS="439,0,514,21"
HREF="../lrnunix/index.htm"
ALT="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
