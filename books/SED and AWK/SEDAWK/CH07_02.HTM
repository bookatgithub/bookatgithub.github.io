<HTML
><HEAD
>
<TITLE>[Chapter 7] 7.2 Hello, World</TITLE>
<META
NAME="DC.title"
CONTENT="sed &amp; awk"><META
NAME="DC.creator"
CONTENT="Dale Dougherty &amp; Arnold Robbins"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1998-08-03T20:56:41Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-225-5"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_01.htm"
TITLE="7. Writing Scripts for awk"><LINK
REL="prev"
HREF="ch07_01.htm"
TITLE="7.1 Playing the Game"><LINK
REL="next"
HREF="ch07_03.htm"
TITLE="7.3 Awk's Programming Model"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="sed &amp; awk"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/ssrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch07_01.htm"
TITLE="7.1 Playing the Game"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.1 Playing the Game"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 7<BR>Writing Scripts for awk</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch07_03.htm"
TITLE="7.3 Awk's Programming Model"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.3 Awk's Programming Model"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SEDAWK-CH-7-SECT-2"
>7.2 Hello, World</A
></H2
><P
CLASS="para"
>It has become a convention to introduce a programming language by
demonstrating the &quot;Hello, world&quot; program.  Showing how this program
works in awk will demonstrate just how unconventional awk is.  In
fact, it's necessary to show several different approaches to printing
&quot;Hello, world.&quot;</P
><P
CLASS="para"
>In the first example, we create a file named <I
CLASS="filename"
>test</I
>
that contains a single line.  This example shows a script that
contains the <KBD
CLASS="command"
>print</KBD
> statement:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>echo 'this line of data is ignored' &gt; test</B
></CODE
>
$ <CODE
CLASS="userinput"
><B
>awk '{ print &quot;Hello, world&quot; }' test</B
></CODE
>
Hello, world</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This script has only a single action, which is enclosed in braces.
That action is to execute the <KBD
CLASS="command"
>print</KBD
> statement for
each line of input.  In this case, the <I
CLASS="filename"
>test</I
> file
contains only a single line; thus, the action occurs once.  Note that
the input line is read but never output.</P
><P
CLASS="para"
>Now let's look at another example.  Here, we use a file that contains
the line &quot;Hello, world.&quot;</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>cat test2</B
></CODE
>
Hello, world
$ <CODE
CLASS="userinput"
><B
>awk '{ print }' test2</B
></CODE
>
Hello, world</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4755"
></A
>In this example, &quot;Hello, world&quot; appears in the input file.  The same
result is achieved because the <KBD
CLASS="command"
>print</KBD
> statement,
without arguments, simply outputs each line of input.  If there were
additional lines of input, they would be output as well.</P
><P
CLASS="para"
>Both of these examples illustrate that awk is usually input-driven.
That is, nothing happens unless there are lines of input on which to
act.  When you invoke the awk program, it reads the script that you
supply, checking the syntax of your instructions.  Then awk attempts
to execute the instructions for each line of input.  Thus, the
<KBD
CLASS="command"
>print</KBD
> statement will not be executed unless there
is input from the file.</P
><P
CLASS="para"
>To verify this for yourself, try entering the command line in the
first example but omit the filename.  You'll find that because awk
expects input to come from the keyboard, it will wait until you give
it input to process: press RETURN several times, then
type an EOF (CTRL-D on most systems) to signal the
end of input.  For each time that you pressed RETURN,
the action that prints &quot;Hello, world&quot; will be executed.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4762"
></A
>There is yet another way to write the &quot;Hello, world&quot; message and not
have awk wait for input.  This method associates the action with the
<KBD
CLASS="command"
>BEGIN</KBD
> pattern.  The <KBD
CLASS="command"
>BEGIN</KBD
>
pattern specifies actions that are performed
<EM
CLASS="emphasis"
>before</EM
> the first line of input is read.</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>awk 'BEGIN { print &quot;Hello, world&quot; }'</B
></CODE
>
Hello, world</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Awk prints the message, and then exits.  If a program has only a
<KBD
CLASS="command"
>BEGIN</KBD
> pattern, and no other statements, awk will
not process any input files.</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch07_01.htm"
TITLE="7.1 Playing the Game"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.1 Playing the Game"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="sed &amp; awk"
><IMG
SRC="../gifs/txthome.gif"
ALT="sed &amp; awk"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch07_03.htm"
TITLE="7.3 Awk's Programming Model"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.3 Awk's Programming Model"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.1 Playing the Game</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="
WIDTH="172"
>7.3 Awk's Programming Model</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The UNIX CD Bookshelf Navigation"><MAP
NAME="map"
><AREA
SHAPE="RECT"
COORDS="0,0,73,21"
HREF="../index.htm"
ALT="The UNIX CD Bookshelf"><AREA
SHAPE="RECT"
COORDS="74,0,163,21"
HREF="../upt/index.htm"
ALT="UNIX Power Tools"><AREA
SHAPE="RECT"
COORDS="164,0,257,21"
HREF="../unixnut/index.htm"
ALT="UNIX in a Nutshell"><AREA
SHAPE="RECT"
COORDS="258,0,321,21"
HREF="../vi/index.htm"
ALT="Learning the vi Editor"><AREA
SHAPE="RECT"
COORDS="322,0,378,21"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="379,0,438,21"
HREF="../ksh/index.htm"
ALT="Learning the Korn Shell"><AREA
SHAPE="RECT"
COORDS="439,0,514,21"
HREF="../lrnunix/index.htm"
ALT="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
