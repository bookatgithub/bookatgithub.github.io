<HTML
><HEAD
>
<TITLE>[Chapter 7] 7.4 Pattern Matching</TITLE>
<META
NAME="DC.title"
CONTENT="sed &amp; awk"><META
NAME="DC.creator"
CONTENT="Dale Dougherty &amp; Arnold Robbins"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1998-08-03T20:56:44Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-225-5"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_01.htm"
TITLE="7. Writing Scripts for awk"><LINK
REL="prev"
HREF="ch07_03.htm"
TITLE="7.3 Awk's Programming Model"><LINK
REL="next"
HREF="ch07_05.htm"
TITLE="7.5 Records and Fields"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="sed &amp; awk"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/ssrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch07_03.htm"
TITLE="7.3 Awk's Programming Model"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.3 Awk's Programming Model"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 7<BR>Writing Scripts for awk</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch07_05.htm"
TITLE="7.5 Records and Fields"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.5 Records and Fields"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SEDAWK-CH-7-SECT-4"
>7.4 Pattern Matching</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH07.PATT"
></A
>The &quot;Hello, world&quot; program does not demonstrate the power of
pattern-matching rules.  In this section, we look at a number of
small, even trivial examples that nonetheless demonstrate this central
feature of awk scripts.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4812"
></A
>When awk reads an input line, it attempts to match each
pattern-matching rule in a script.  Only the lines matching the
particular pattern are the object of an action.  If no action is
specified, the line that matches the pattern is printed (executing the
<KBD
CLASS="command"
>print</KBD
> statement is the default action).  Consider
the following script:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>/^$/ { print &quot;This is a blank line.&quot; }</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This script reads: <EM
CLASS="emphasis"
>if the input line is blank, then print
&quot;This is a blank line.&quot;</EM
> The pattern is written as a
regular expression that identifies a blank line.  The action, like
most of those we've seen so far, contains a single
<KBD
CLASS="command"
>print</KBD
> statement.</P
><P
CLASS="para"
>If we place this script in a file named <I
CLASS="filename"
>awkscr</I
>
and use an input file named <I
CLASS="filename"
>test</I
> that contains
three blank lines, then the following command executes the script:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>awk -f awkscr test</B
></CODE
>
This is a blank line.
This is a blank line.
This is a blank line.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>(From this point on, we'll assume that our scripts are placed in a
separate file and invoked using the <I
CLASS="option"
>-f</I
> command-line
option.)  The result tells us that there are three blank lines in
<I
CLASS="filename"
>test</I
>.  This script ignores lines that are not
blank.</P
><P
CLASS="para"
>Let's add several new rules to the script.  This script is now going
to analyze the input and classify it as an integer, a string, or a
blank line.</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
># test for integer, string or empty line.
/[0-9]+/    { print &quot;That is an integer&quot; }
/[A-Za-z]+/ { print &quot;This is a string&quot; }
/^$/        { print &quot;This is a blank line.&quot; }</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4831"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4834"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4837"
></A
>The general idea is that if a line of input matches any of these
patterns, the associated <KBD
CLASS="command"
>print</KBD
> statement will be
executed.  The + metacharacter is part of the extended set of regular
expression metacharacters and means &quot;one or more.&quot;  Therefore, a line
containing a sequence of one or more digits will be considered an
integer.  Here's a sample run, taking input from standard input:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>awk -f awkscr</B
></CODE
>
<CODE
CLASS="userinput"
><B
>4</B
></CODE
>
That is an integer
<CODE
CLASS="userinput"
><B
>t</B
></CODE
>
This is a string
<CODE
CLASS="userinput"
><B
>4T</B
></CODE
>
That is an integer
This is a string
<CODE
CLASS="userinput"
><B
>RETURN</B
></CODE
>
This is a blank line.
<CODE
CLASS="userinput"
><B
>44</B
></CODE
>
That is an integer
<CODE
CLASS="userinput"
><B
>CTRL-D</B
></CODE
>
$</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Note that input &quot;4T&quot; was identified as both an integer and a string.
A line can match more than one rule.  You can write a stricter rule
set to prevent a line from matching more than one rule.  You can also
write actions that are designed to skip other parts of the script.</P
><P
CLASS="para"
>We will be exploring the use of pattern-matching rules throughout
this chapter.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-7-SECT-4.1"
>7.4.1 Describing Your Script</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-4854"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4857"
></A
><A
CLASS="indexterm"
NAME="AUTOID-4859"
></A
>Adding comments as you write the script is a good practice.  A comment
begins with the &quot;#&quot; character and ends at a newline.  Unlike sed, awk
allows comments anywhere in the script.</P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
>  
If you are supplying your awk program on the command
line, rather than putting it in a file, do not use a single quote
anywhere in your program.  The shell would interpret it and become
confused.  </P
></BLOCKQUOTE
><P
CLASS="para"
>As we begin writing scripts, we'll use comments to describe
the action:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>#  blank.awk -- Print message for each blank line.
/^$/ { print &quot;This is a blank line.&quot; }</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This comment offers the name of the script,
<KBD
CLASS="command"
>blank.awk</KBD
>, and briefly describes what the script
does.  A particularly useful comment for longer scripts is one that
identifies the expected structure of the input file.  For instance, in
the next section, we are going to look at writing a script that reads
a file containing names and phone numbers.  The introductory comments
for this program should be:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
># blocklist.awk -- print name and address in block form.
# fields: name, company, street, city, state and zip, phone</PRE
></BLOCKQUOTE
><P
CLASS="para"
>It is useful to embed this information in the script because the
script won't work unless the structure of the input file corresponds
to that expected by the person who wrote the script.</P
></DIV
><A
CLASS="indexterm"
NAME="AUTOID-4869"
></A
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch07_03.htm"
TITLE="7.3 Awk's Programming Model"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.3 Awk's Programming Model"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="sed &amp; awk"
><IMG
SRC="../gifs/txthome.gif"
ALT="sed &amp; awk"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch07_05.htm"
TITLE="7.5 Records and Fields"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.5 Records and Fields"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.3 Awk's Programming Model</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.5 Records and Fields</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The UNIX CD Bookshelf Navigation"><MAP
NAME="map"
><AREA
SHAPE="RECT"
COORDS="0,0,73,21"
HREF="../index.htm"
ALT="The UNIX CD Bookshelf"><AREA
SHAPE="RECT"
COORDS="74,0,163,21"
HREF="../upt/index.htm"
ALT="UNIX Power Tools"><AREA
SHAPE="RECT"
COORDS="164,0,257,21"
HREF="../unixnut/index.htm"
ALT="UNIX in a Nutshell"><AREA
SHAPE="RECT"
COORDS="258,0,321,21"
HREF="../vi/index.htm"
ALT="Learning the vi Editor"><AREA
SHAPE="RECT"
COORDS="322,0,378,21"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="379,0,438,21"
HREF="../ksh/index.htm"
ALT="Learning the Korn Shell"><AREA
SHAPE="RECT"
COORDS="439,0,514,21"
HREF="../lrnunix/index.htm"
ALT="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
