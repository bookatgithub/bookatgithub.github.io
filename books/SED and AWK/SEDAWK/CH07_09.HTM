<HTML
><HEAD
>
<TITLE>[Chapter 7] 7.9 Formatted Printing</TITLE>
<META
NAME="DC.title"
CONTENT="sed &amp; awk"><META
NAME="DC.creator"
CONTENT="Dale Dougherty &amp; Arnold Robbins"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1998-08-03T20:57:42Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-225-5"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_01.htm"
TITLE="7. Writing Scripts for awk"><LINK
REL="prev"
HREF="ch07_08.htm"
TITLE="7.8 Relational and Boolean Operators"><LINK
REL="next"
HREF="ch07_10.htm"
TITLE="7.10 Passing Parameters Into a Script"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="sed &amp; awk"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/ssrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch07_08.htm"
TITLE="7.8 Relational and Boolean Operators"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.8 Relational and Boolean Operators"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 7<BR>Writing Scripts for awk</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch07_10.htm"
TITLE="7.10 Passing Parameters Into a Script"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.10 Passing Parameters Into a Script"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SEDAWK-CH-7-SECT-9"
>7.9 Formatted Printing</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH07.PRINT1"
></A
><A
CLASS="indexterm"
NAME="CH07.PRINT2"
></A
><A
CLASS="indexterm"
NAME="CH07.PRINT4"
></A
><A
CLASS="indexterm"
NAME="CH07.PRINT5"
></A
>Many of the scripts that we've written so far perform the
data processing tasks just fine, but the output has not
been formatted properly.  That is because there is only
so much you can do with the basic <KBD
CLASS="command"
>print</KBD
>
statement.  And since one of awk's most common functions
is to produce reports, it is crucial that we be able to
format our reports in an orderly fashion.
The <KBD
CLASS="command"
>filesum</KBD
> program performs the arithmetic tasks well but 
the report lacks an orderly format. </P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH07.PRINT3"
></A
>Awk offers an alternative to the <KBD
CLASS="command"
>print</KBD
> statement, <KBD
CLASS="command"
>printf</KBD
>,
which is borrowed from the C programming language.  
The <KBD
CLASS="command"
>printf</KBD
> statement can output a simple string
just like the <KBD
CLASS="command"
>print</KBD
> statement.</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>awk 'BEGIN { printf (&quot;Hello, world\n&quot;) }'</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The main difference that you will notice at the outset is
that, unlike <KBD
CLASS="command"
>print</KBD
>, <KBD
CLASS="command"
>printf</KBD
> does not
automatically supply a newline.  You must specify it 
explicitly as &quot;\n&quot;.</P
><P
CLASS="para"
>The full syntax of the <KBD
CLASS="command"
>printf</KBD
> statement has two parts: </P
><BLOCKQUOTE
CLASS="literallayout"
><P
CLASS="literallayout"
><KBD
CLASS="command"
>printf</KBD
> ( <EM
CLASS="emphasis"
>format-expression</EM
> [<B
CLASS="emphasis.bold"
>,</B
> <EM
CLASS="emphasis"
>arguments</EM
>]<B
CLASS="emphasis.bold"
> )</B
></P
></BLOCKQUOTE
><P
CLASS="para"
>The parentheses are optional. 
The first part is an expression that 
describes the format specifications; usually this is supplied
as a string constant in quotes.  The second
part is an argument list, such as a list of variable names,
that correspond to the format specifications.  <A
CLASS="indexterm"
NAME="AUTOID-6000"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6003"
></A
>
A format specification is preceded by a percent sign (%) and the
specifier is one of the characters shown in <A
CLASS="xref"
HREF="ch07_09.htm#SEDAWK-CH-7-TAB-6"
TITLE="Format Specifiers Used in printf"
>Table 7.6</A
>.
The two main format specifiers are <B
CLASS="emphasis.bold"
>s</B
> for strings and <B
CLASS="emphasis.bold"
>d</B
>
for decimal integers.[11]</P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[11] The way <KBD
CLASS="command"
>printf</KBD
> does rounding is
discussed in <A
CLASS="xref"
HREF="appb_01.htm"
TITLE="Quick Reference for awk"
>Appendix B</A
>.</P
></BLOCKQUOTE
><TABLE
CLASS="table"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="SEDAWK-CH-7-TAB-6"
>Table 7.6: Format Specifiers Used in printf</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Character</TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Description</TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>c</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>ASCII character</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>d</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Decimal integer</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>i</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Decimal integer. (Added in POSIX)</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>e</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Floating-point format ([-]<EM
CLASS="emphasis"
>d</EM
>.<EM
CLASS="emphasis"
>precision</EM
><B
CLASS="emphasis.bold"
>e</B
>[+-]<EM
CLASS="emphasis"
>dd</EM
>)</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>E</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Floating-point format ([-]<EM
CLASS="emphasis"
>d</EM
>.<EM
CLASS="emphasis"
>precision</EM
><B
CLASS="emphasis.bold"
>E</B
>[+-]<EM
CLASS="emphasis"
>dd</EM
>)</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>f</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Floating-point format ([-]<EM
CLASS="emphasis"
>ddd</EM
>.<EM
CLASS="emphasis"
>precision</EM
>)</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>g</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><B
CLASS="emphasis.bold"
>e</B
> or <B
CLASS="emphasis.bold"
>f</B
> conversion, whichever is shortest, with trailing zeros removed</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>G</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><B
CLASS="emphasis.bold"
>E</B
> or <B
CLASS="emphasis.bold"
>f</B
> conversion, whichever is shortest, with trailing zeros removed</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>o</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Unsigned octal value</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>s</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>String</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>x</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Unsigned hexadecimal number. Uses <B
CLASS="emphasis.bold"
>a</B
>-<B
CLASS="emphasis.bold"
>f</B
> for 10 to 15</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>X</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Unsigned hexadecimal number. Uses <B
CLASS="emphasis.bold"
>A</B
>-<B
CLASS="emphasis.bold"
>F</B
> for 10 to 15</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>%</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Literal %</TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>This example uses the <KBD
CLASS="command"
>printf</KBD
> statement to produce
the output for rule 2 in the <KBD
CLASS="command"
>filesum</KBD
> program.
It outputs a string and a decimal value found in two different
fields:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>printf(&quot;%d\t%s\n&quot;, $5, $9)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The value of <B
CLASS="emphasis.bold"
>$5</B
> is to be output, followed by a tab (\t) and
<B
CLASS="emphasis.bold"
>$9</B
> and then a newline (\n).[12]
For each format specification, you must supply a corresponding 
argument. </P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[12] Compare this statement with the <KBD
CLASS="command"
>print</KBD
> statement in the
<KBD
CLASS="command"
>filesum</KBD
> program that prints the header line. The <KBD
CLASS="command"
>print</KBD
>
statement automatically supplies a newline (the value of <B
CLASS="emphasis.bold"
>ORS</B
>);
when using <KBD
CLASS="command"
>printf</KBD
>, you must supply the newline, it is never
automatically provided for you.</P
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6093"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6095"
></A
>This <KBD
CLASS="command"
>printf</KBD
> statement can be used to specify the width
and alignment of output fields.  A format expression
can take three optional modifiers following &quot;%&quot; and preceding the format
specifier:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
><CODE
CLASS="userinput"
><B
>%-</B
></CODE
><CODE
CLASS="replaceable"
><I
>width</I
></CODE
><CODE
CLASS="userinput"
><B
>.</B
></CODE
><CODE
CLASS="replaceable"
><I
>precision format-specifier</I
></CODE
></PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <EM
CLASS="emphasis"
>width</EM
> of the output field is a numeric value. 
When you specify a field width, the contents of the field
will be right-justified by default.  You must specify
&quot;-&quot; to get left-justification.  Thus, &quot;%-20s&quot; outputs
a string left-justified in a field 20 characters wide.  If
the string is less than 20 characters, the field will be
padded with whitespace to fill.
In the following examples,
a &quot;|&quot; is output to indicate the actual width of the field.
The first example right-justifies the text: </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>printf(&quot;|%10s|\n&quot;, &quot;hello&quot;)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>It produces:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>|     hello|</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The next example left-justifies the text: </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>printf(&quot;|%-10s|\n&quot;, &quot;hello&quot;)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>It produces:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>|hello     |</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6113"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6115"
></A
>The <EM
CLASS="emphasis"
>precision</EM
> modifier, used for decimal
or floating-point values, controls the number of digits
that appear to the right of the decimal point.
For string values, it controls the maximum number of characters
from the string that will be printed.
Note that the default precision for the output of numeric
values is &quot;%.6g&quot;.</P
><P
CLASS="para"
>You can specify both the <EM
CLASS="emphasis"
>width</EM
> and <EM
CLASS="emphasis"
>precision</EM
> dynamically,
via values in the <KBD
CLASS="command"
>printf</KBD
> or <KBD
CLASS="command"
>sprintf</KBD
> argument list.
You do this by specifying asterisks, instead of literal values.</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>printf(&quot;%*.*g\n&quot;, 5, 3, myvar);</PRE
></BLOCKQUOTE
><P
CLASS="para"
>In this example, the width is 5, the precision is 3, and the value
to print will come from <B
CLASS="emphasis.bold"
>myvar</B
>.</P
><P
CLASS="para"
>The default precision used by the <KBD
CLASS="command"
>print</KBD
> statement when outputting
numbers
can be changed
by setting the system variable <B
CLASS="emphasis.bold"
>OFMT</B
>.<A
CLASS="indexterm"
NAME="AUTOID-6130"
></A
>
For instance, if you are using awk 
to write reports that contain dollar values, you might
prefer to change <B
CLASS="emphasis.bold"
>OFMT</B
> to &quot;%.2f&quot;.</P
><P
CLASS="para"
>Using the full syntax of the format expression
can solve the problem with <KBD
CLASS="command"
>filesum</KBD
> 
of getting fields and headings properly aligned. 
One reason we output the file size before the filename was that
the fields had a greater chance of aligning themselves
if they were output in that order.
The solution that <KBD
CLASS="command"
>printf</KBD
> offers us is the ability to
fix the width of output fields; therefore, each field begins
in the same column.  </P
><P
CLASS="para"
>Let's rearrange the output fields in the <KBD
CLASS="command"
>filesum</KBD
> report.
We want a minimum field width so that the second field begins
at the same position.  You specify 
the field width place between the <B
CLASS="emphasis.bold"
>%</B
> and the conversion
specification.  &quot;%-15s&quot; specifies a minimum field width 
of 15 characters in which 
the value is left-justified.  &quot;%10d&quot;, without the hyphen, 
is right-justified, which is what we want for a decimal value. </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>printf(&quot;%-15s\t%10d\n&quot;, $9, $5)       # print filename and size</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This will produce a report in which the data 
is aligned in columns and the numbers are right-justified.
Look at how the <KBD
CLASS="command"
>printf</KBD
> statement
is used in the <KBD
CLASS="command"
>END</KBD
> action:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>printf(&quot;Total: %d bytes  (%d files)\n&quot;, sum, filenum)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The column header in the <KBD
CLASS="command"
>BEGIN</KBD
> rule is also changed appropriately.
With the use of the <KBD
CLASS="command"
>printf</KBD
> statement, <KBD
CLASS="command"
>filesum</KBD
>
now produces the following output: </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>filesum g*</B
></CODE
>
FILE                 BYTES
g                       23
gawk                  2237
gawk.mail             1171
gawk.test               74
gawkro                 264
gfilesum               610
grades                  64
grades.awk             231
grepscript               6
Total: 4680 bytes  (9 files)</PRE
></BLOCKQUOTE
><A
CLASS="indexterm"
NAME="AUTOID-6150"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6151"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6152"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6153"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6154"
></A
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch07_08.htm"
TITLE="7.8 Relational and Boolean Operators"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.8 Relational and Boolean Operators"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="sed &amp; awk"
><IMG
SRC="../gifs/txthome.gif"
ALT="sed &amp; awk"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch07_10.htm"
TITLE="7.10 Passing Parameters Into a Script"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.10 Passing Parameters Into a Script"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.8 Relational and Boolean Operators</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.10 Passing Parameters Into a Script</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The UNIX CD Bookshelf Navigation"><MAP
NAME="map"
><AREA
SHAPE="RECT"
COORDS="0,0,73,21"
HREF="../index.htm"
ALT="The UNIX CD Bookshelf"><AREA
SHAPE="RECT"
COORDS="74,0,163,21"
HREF="../upt/index.htm"
ALT="UNIX Power Tools"><AREA
SHAPE="RECT"
COORDS="164,0,257,21"
HREF="../unixnut/index.htm"
ALT="UNIX in a Nutshell"><AREA
SHAPE="RECT"
COORDS="258,0,321,21"
HREF="../vi/index.htm"
ALT="Learning the vi Editor"><AREA
SHAPE="RECT"
COORDS="322,0,378,21"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="379,0,438,21"
HREF="../ksh/index.htm"
ALT="Learning the Korn Shell"><AREA
SHAPE="RECT"
COORDS="439,0,514,21"
HREF="../lrnunix/index.htm"
ALT="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
