<HTML
><HEAD
>
<TITLE>[Chapter 7] 7.10 Passing Parameters Into a Script</TITLE>
<META
NAME="DC.title"
CONTENT="sed &amp; awk"><META
NAME="DC.creator"
CONTENT="Dale Dougherty &amp; Arnold Robbins"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1998-08-03T20:57:58Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-225-5"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_01.htm"
TITLE="7. Writing Scripts for awk"><LINK
REL="prev"
HREF="ch07_09.htm"
TITLE="7.9 Formatted Printing"><LINK
REL="next"
HREF="ch07_11.htm"
TITLE="7.11 Information Retrieval"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="sed &amp; awk"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/ssrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch07_09.htm"
TITLE="7.9 Formatted Printing"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.9 Formatted Printing"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 7<BR>Writing Scripts for awk</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch07_11.htm"
TITLE="7.11 Information Retrieval"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.11 Information Retrieval"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SEDAWK-CH-7-SECT-10"
>7.10 Passing Parameters Into a Script</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH07.PARAM1"
></A
><A
CLASS="indexterm"
NAME="CH07.PARAM2"
></A
><A
CLASS="indexterm"
NAME="CH07.PARAM3"
></A
>One of the more confusing subtleties of programming in awk
is passing parameters into a script. 
A parameter assigns a value to a variable that can be accessed
within the awk script.
The variable can be set on
the command line, after the script and before the filename.</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>awk 'script' var=value inputfile</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Each parameter must be interpreted as a single argument.  Therefore,
spaces are not permitted on either side of the equal sign.
Multiple parameters can be passed this way.
For instance, if you wanted to define the variables 
<B
CLASS="emphasis.bold"
>high</B
> and <B
CLASS="emphasis.bold"
>low</B
>
from the command line, you could invoke awk as follows:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>awk -f scriptfile high=100 low=60 datafile</B
></CODE
></PRE
></BLOCKQUOTE
><P
CLASS="para"
>Inside the script, these two variables are available and can be
accessed as any awk variable.
If you were to put this script in a shell script wrapper, then
you could pass the shell's command-line arguments as values.  
(The shell makes available command-line arguments in the 
positional variables&nbsp;- $1 for the first parameter, $2 for
the second, and so on.)[13]
For instance, look at the shell script version of the previous command:</P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[13] Careful! Don't confuse
the shell's parameters with awk's field variables.</P
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>awk -f scriptfile &quot;high=$1&quot; &quot;low=$2&quot; datafile</PRE
></BLOCKQUOTE
><P
CLASS="para"
>If this shell script were named <KBD
CLASS="command"
>awket</KBD
>, it could be invoked
as:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>awket 100 60</B
></CODE
></PRE
></BLOCKQUOTE
><P
CLASS="para"
>&quot;100&quot; would be $1 and passed as the value assigned to the variable <B
CLASS="emphasis.bold"
>high</B
>.</P
><P
CLASS="para"
>In addition, environment variables or the output of 
a command can be passed as the value of a variable.
Here are two examples:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>awk '{ ... }' directory=$cwd file1 ...
awk '{ ... }' directory=`pwd` file1 ...</PRE
></BLOCKQUOTE
><P
CLASS="para"
>&quot;$cwd&quot; returns the value of the variable <B
CLASS="emphasis.bold"
>cwd</B
>, the current working directory
(<KBD
CLASS="command"
>csh</KBD
> only).  The second example uses backquotes to
execute the <KBD
CLASS="command"
>pwd</KBD
> command and assign its result to
the variable <B
CLASS="emphasis.bold"
>directory</B
> (this is more
portable).</P
><P
CLASS="para"
>You can also use command-line parameters to define system
variables, as in the following example:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>awk '{ print NR, $0 }' OFS='. ' names</B
></CODE
>
1. Tom 656-5789
2. Dale 653-2133
3. Mary 543-1122
4. Joe 543-2211</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The output field separator is redefined to be a period followed
by a space.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6194"
></A
>An important restriction 
on command-line parameters is that they are not available in 
the <KBD
CLASS="command"
>BEGIN</KBD
> procedure.  That is, they are not available
until <EM
CLASS="emphasis"
>after</EM
> the first line of input is read.
Why?  Well, here's the confusing part. 
A parameter passed from the command line
is treated as though it were a filename.  The assignment does not
occur until the parameter, if it were a filename, is actually
evaluated.</P
><P
CLASS="para"
>Look at the following script that sets a variable <I
CLASS="option"
>n</I
>
as a command-line parameter.</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>awk  'BEGIN { print n }
{
if (n == 1) print &quot;Reading the first file&quot;
if (n == 2) print &quot;Reading the second file&quot;
}' n=1 test n=2 test2</PRE
></BLOCKQUOTE
><P
CLASS="para"
>There are four command-line parameters:  &quot;n=1,&quot; &quot;test,&quot; &quot;n=2,&quot;
and &quot;test2&quot;.  
Now, if you remember that a <KBD
CLASS="command"
>BEGIN</KBD
> procedure is &quot;what we do
before processing input,&quot; you'll understand why the reference
to <I
CLASS="option"
>n</I
> in the <KBD
CLASS="command"
>BEGIN</KBD
> procedure returns nothing.  So the <KBD
CLASS="command"
>print</KBD
>
statement will print a blank line.  If
the first parameter were a file and not a
variable assignment, the file would not be opened until
the <KBD
CLASS="command"
>BEGIN</KBD
> procedure had been executed. </P
><P
CLASS="para"
>The variable <I
CLASS="option"
>n</I
> is given
an initial value of 1 from the first parameter.
The second parameter supplies the name of the file.
Thus, for each line in <I
CLASS="filename"
>test</I
>, the conditional &quot;n == 1&quot;
will be true.  After the input is exhausted from <I
CLASS="filename"
>test</I
>,
the third parameter is evaluated, and it
sets <B
CLASS="emphasis.bold"
>n</B
> to 2.  Finally, the fourth parameter supplies
the name of a second file.
Now the conditional &quot;n == 2&quot; in the main procedure will be
true.</P
><P
CLASS="para"
>One consequence of the way parameters are evaluated is
that you cannot use the <KBD
CLASS="command"
>BEGIN</KBD
> procedure to
test or verify parameters that are supplied on the command line.  
They are available only after a line of input has been read.
You can get around this limitation by composing the rule &quot;NR == 1&quot; and
using its procedure to verify the assignment.
Another way is to test the command-line parameters 
in the shell script before invoking awk.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6216"
></A
>POSIX awk provides a solution to the problem of defining parameters
before any input is read.  The <I
CLASS="option"
>-v</I
> option[14]
specifies variable assignments that you want to take place
before executing the <KBD
CLASS="command"
>BEGIN</KBD
> procedure (i.e., before the first line
of input is read.) 
The <I
CLASS="option"
>-v</I
> option must be specified before a command-line script.
For instance, the following command uses the <I
CLASS="option"
>-v</I
> option
to set the record separator for multiline records. </P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[14] The <I
CLASS="option"
>-v</I
> option was not part of the original (1987) version of nawk
(still used on SunOS 4.1.x systems and some System V Release 3.x
systems).
It was added in 1989 after Brian Kernighan of Bell Labs, the GNU awk
authors, and the authors of MKS awk agreed on a
way to set variables on the command line that would be available
inside the <KBD
CLASS="command"
>BEGIN</KBD
> block. It is now part of the POSIX specification
for awk.</P
></BLOCKQUOTE
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ awk -F&quot;\n&quot; -v RS=&quot;&quot; '{ print }' phones.block</PRE
></BLOCKQUOTE
><P
CLASS="para"
>A separate <I
CLASS="option"
>-v</I
> option is required for each variable assignment
that is passed to the program.</P
><P
CLASS="para"
>Awk also provides the system variables 
<B
CLASS="emphasis.bold"
>ARGC</B
> and <B
CLASS="emphasis.bold"
>ARGV</B
>, 
which will be familiar to C programmers.  Because
this requires an understanding of arrays, we will discuss this
feature in <A
CLASS="xref"
HREF="ch08_01.htm"
TITLE="Conditionals, Loops, and Arrays"
>Chapter 8, Conditionals, Loops, and Arrays</A
>.</P
><A
CLASS="indexterm"
NAME="AUTOID-6233"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6234"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6235"
></A
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch07_09.htm"
TITLE="7.9 Formatted Printing"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.9 Formatted Printing"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="sed &amp; awk"
><IMG
SRC="../gifs/txthome.gif"
ALT="sed &amp; awk"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch07_11.htm"
TITLE="7.11 Information Retrieval"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.11 Information Retrieval"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.9 Formatted Printing</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.11 Information Retrieval</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The UNIX CD Bookshelf Navigation"><MAP
NAME="map"
><AREA
SHAPE="RECT"
COORDS="0,0,73,21"
HREF="../index.htm"
ALT="The UNIX CD Bookshelf"><AREA
SHAPE="RECT"
COORDS="74,0,163,21"
HREF="../upt/index.htm"
ALT="UNIX Power Tools"><AREA
SHAPE="RECT"
COORDS="164,0,257,21"
HREF="../unixnut/index.htm"
ALT="UNIX in a Nutshell"><AREA
SHAPE="RECT"
COORDS="258,0,321,21"
HREF="../vi/index.htm"
ALT="Learning the vi Editor"><AREA
SHAPE="RECT"
COORDS="322,0,378,21"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="379,0,438,21"
HREF="../ksh/index.htm"
ALT="Learning the Korn Shell"><AREA
SHAPE="RECT"
COORDS="439,0,514,21"
HREF="../lrnunix/index.htm"
ALT="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
