<HTML
><HEAD
>
<TITLE>[Chapter 8] Conditionals, Loops, and Arrays</TITLE>
<META
NAME="DC.title"
CONTENT="sed &amp; awk"><META
NAME="DC.creator"
CONTENT="Dale Dougherty &amp; Arnold Robbins"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1998-08-03T20:58:28Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-225-5"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="sed &amp; awk"><LINK
REL="prev"
HREF="ch07_11.htm"
TITLE="7.11 Information Retrieval"><LINK
REL="next"
HREF="ch08_02.htm"
TITLE="8.2 Looping"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="sed &amp; awk"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/ssrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch07_11.htm"
TITLE="7.11 Information Retrieval"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.11 Information Retrieval"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 8</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch08_02.htm"
TITLE="8.2 Looping"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.2 Looping"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="CHAPTER"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="SEDAWK-CH-8"
>8. Conditionals, Loops, and Arrays</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#SEDAWK-CH-8-SECT-1"
TITLE="8.1 Conditional Statements"
>Conditional Statements</A
><BR><A
CLASS="sect1"
HREF="ch08_02.htm"
TITLE="8.2 Looping"
>Looping</A
><BR><A
CLASS="sect1"
HREF="ch08_03.htm"
TITLE="8.3 Other Statements That Affect Flow Control"
>Other Statements That Affect Flow Control</A
><BR><A
CLASS="sect1"
HREF="ch08_04.htm"
TITLE="8.4 Arrays"
>Arrays</A
><BR><A
CLASS="sect1"
HREF="ch08_05.htm"
TITLE="8.5 An Acronym Processor"
>An Acronym Processor</A
><BR><A
CLASS="sect1"
HREF="ch08_06.htm"
TITLE="8.6 System Variables That Are Arrays"
>System Variables That Are Arrays</A
></P
><P
></P
></DIV
><P
CLASS="para"
>This chapter covers some fundamental programming constructs.  It
covers all the control statements in the awk programming language.  It
also covers arrays, variables that allow you to store a series of
values.  If this is your first exposure to such constructs, you'll
recognize that even sed provided conditional and looping capabilities.
In awk, these capabilities are much more generalized and the syntax is
much easier to use.  In fact, the syntax of awk's conditional and
looping constructs is borrowed from the C programming language.  Thus,
by learning awk and the constructs in this chapter, you are also on
the way to learning the C language.</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SEDAWK-CH-8-SECT-1"
>8.1 Conditional Statements</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH08.COND1"
></A
>A conditional statement allows you to make a test before performing an
action.  In the previous chapter, we saw examples of pattern matching
rules that were essentially conditional expressions affecting the main
input loop.  In this section, we look at conditional statements used
primarily within actions.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH08.COND2"
></A
>A conditional statement is introduced by <KBD
CLASS="command"
>if</KBD
> and
evaluates an expression placed in parentheses.  The syntax is:</P
><BLOCKQUOTE
CLASS="literallayout"
><P
CLASS="literallayout"
><KBD
CLASS="command"
>if</KBD
> ( <CODE
CLASS="replaceable"
><I
>expression</I
></CODE
> )<BR>   <CODE
CLASS="replaceable"
><I
>action1</I
></CODE
><BR>[<KBD
CLASS="command"
>else</KBD
><BR>   <CODE
CLASS="replaceable"
><I
>action2</I
></CODE
>]</P
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6300"
></A
>If <EM
CLASS="emphasis"
>expression</EM
> evaluates as true (non-zero
or non-empty), <EM
CLASS="emphasis"
>action1</EM
> is performed.  When
an <KBD
CLASS="command"
>else</KBD
> clause is specified,
<EM
CLASS="emphasis"
>action2</EM
> is performed if
<EM
CLASS="emphasis"
>expression</EM
> evaluates to false (zero or
empty).  An expression might contain the arithmetic, relational, or
Boolean operators discussed in <A
CLASS="xref"
HREF="ch07_01.htm"
TITLE="Writing Scripts for awk"
>Chapter 7, Writing Scripts for awk</A
>.</P
><P
CLASS="para"
>Perhaps the simplest conditional expression that you could write is 
one that tests whether a variable contains a non-zero value. </P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>if ( x ) print x</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>If <KBD
CLASS="command"
>x</KBD
> is zero, the <KBD
CLASS="command"
>print</KBD
> statement 
will not be executed.  If <KBD
CLASS="command"
>x</KBD
> has a non-zero value, that value
will be printed.  You can also test whether <KBD
CLASS="command"
>x</KBD
> equals
another value:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>if ( x == y ) print x</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>Remember that &quot;==&quot; is a relational operator and &quot;=&quot; is an assignment
operator.  We can also test whether <KBD
CLASS="command"
>x</KBD
> matches a pattern using
the pattern-matching operator &quot;~&quot;:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>if ( x ~ /[yY](es)?/ ) print x</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>Here are a few additional syntactical points:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6327"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6330"
></A
>If any action consists of more than one statement, the action is 
enclosed within a pair of braces.</P
><BLOCKQUOTE
CLASS="literallayout"
><P
CLASS="literallayout"
>  <KBD
CLASS="command"
>if</KBD
> ( <CODE
CLASS="replaceable"
><I
>expression</I
></CODE
> ) { <BR>  	<CODE
CLASS="replaceable"
><I
>statement1</I
></CODE
><BR>  	<CODE
CLASS="replaceable"
><I
>statement2</I
></CODE
><BR>  }</P
></BLOCKQUOTE
><P
CLASS="para"
>Awk is not very particular about the placement of braces and
statements (unlike sed).  The opening brace is placed after the
conditional expression, either on the same line or on the next line.
The first statement can follow the opening brace or be placed on the
line following it.  The closing brace is put after the last statement,
either on the same line or after it.  Spaces or tabs are allowed
before or after the braces.  The indentation of statements is not
required but is recommended to improve readability.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A newline is optional after the close parenthesis, and after
<KBD
CLASS="command"
>else</KBD
>.</P
><BLOCKQUOTE
CLASS="literallayout"
><P
CLASS="literallayout"
><KBD
CLASS="command"
>if</KBD
> ( <CODE
CLASS="replaceable"
><I
>expression</I
></CODE
> ) <CODE
CLASS="replaceable"
><I
>action1</I
></CODE
><BR>[<KBD
CLASS="command"
>else</KBD
> <CODE
CLASS="replaceable"
><I
>action2</I
></CODE
>]</P
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A newline is also optional after <CODE
CLASS="replaceable"
><I
>action1</I
></CODE
>, providing
that a semicolon ends <EM
CLASS="emphasis"
>action1</EM
>.</P
><BLOCKQUOTE
CLASS="literallayout"
><P
CLASS="literallayout"
><KBD
CLASS="command"
>if</KBD
> ( <CODE
CLASS="replaceable"
><I
>expression</I
></CODE
> ) <CODE
CLASS="replaceable"
><I
>action1</I
></CODE
>; [<KBD
CLASS="command"
>else</KBD
> <CODE
CLASS="replaceable"
><I
>action2</I
></CODE
>]</P
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>You cannot avoid using braces by using semicolons to separate multiple
statements on a single line.</P
></LI
></UL
><P
CLASS="para"
>In the previous chapter, we saw a script that averaged student grades.
We could use a conditional statement to tell us whether the student
passed or failed.</P
><P
CLASS="para"
>Presuming that an average of 65 or above is a
passing grade, we could write the following conditional:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>if ( avg &gt;= 65 ) 
	grade = &quot;Pass&quot;
else 
	grade = &quot;Fail&quot;</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>The value assigned to <KBD
CLASS="command"
>grade</KBD
> depends upon whether
the expression &quot;avg &gt;= 65&quot; evaluates to true or false.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6367"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6369"
></A
>Multiple conditional statements can be used to test whether one of
several possible conditions is true.  For example, perhaps the
students are given a letter grade instead of a pass-fail mark.  Here's
a conditional that assigns a letter grade based on a student's
average:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>if (avg &gt;= 90)  grade = &quot;A&quot;
else if (avg &gt;= 80) grade = &quot;B&quot;
else if (avg &gt;= 70) grade = &quot;C&quot;
else if (avg &gt;= 60) grade = &quot;D&quot;
else grade = &quot;F&quot;</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>The important thing to recognize is that successive conditionals like
this are evaluated until one of them returns true; once that occurs,
the rest of the conditionals are skipped.  If none of the conditional
expressions evaluates to true, the last <KBD
CLASS="command"
>else</KBD
> is
accepted, constituting the default action; in this case, it assigns
&quot;F&quot; to <KBD
CLASS="command"
>grade</KBD
>.<A
CLASS="indexterm"
NAME="AUTOID-6377"
></A
></P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-8-SECT-1.1"
>8.1.1 Conditional Operator</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6381"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6384"
></A
>Awk provides a conditional operator that is found in the C programming
language.  Its form is:</P
><BLOCKQUOTE
CLASS="literallayout"
><P
CLASS="literallayout"
><CODE
CLASS="replaceable"
><I
>expr</I
></CODE
> <KBD
CLASS="command"
>?</KBD
> <CODE
CLASS="replaceable"
><I
>action1</I
></CODE
> <KBD
CLASS="command"
>:</KBD
> <CODE
CLASS="replaceable"
><I
>action2</I
></CODE
></P
></BLOCKQUOTE
><P
CLASS="para"
>The previous simple <KBD
CLASS="command"
>if</KBD
>/<KBD
CLASS="command"
>else</KBD
>
condition can be written using a conditional operator:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>grade = (avg &gt;= 65) ? &quot;Pass&quot; : &quot;Fail&quot;</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>This form has the advantage of brevity and is appropriate for simple
conditionals such as the one shown here.  While the
<KBD
CLASS="command"
>?:</KBD
> operator can be nested, doing so leads to
programs that quickly become unreadable.  For clarity, we recommend
parenthesizing the conditional, as shown above.</P
></DIV
><A
CLASS="indexterm"
NAME="AUTOID-6400"
></A
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch07_11.htm"
TITLE="7.11 Information Retrieval"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.11 Information Retrieval"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="sed &amp; awk"
><IMG
SRC="../gifs/txthome.gif"
ALT="sed &amp; awk"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch08_02.htm"
TITLE="8.2 Looping"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.2 Looping"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.11 Information Retrieval</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>8.2 Looping</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The UNIX CD Bookshelf Navigation"><MAP
NAME="map"
><AREA
SHAPE="RECT"
COORDS="0,0,73,21"
HREF="../index.htm"
ALT="The UNIX CD Bookshelf"><AREA
SHAPE="RECT"
COORDS="74,0,163,21"
HREF="../upt/index.htm"
ALT="UNIX Power Tools"><AREA
SHAPE="RECT"
COORDS="164,0,257,21"
HREF="../unixnut/index.htm"
ALT="UNIX in a Nutshell"><AREA
SHAPE="RECT"
COORDS="258,0,321,21"
HREF="../vi/index.htm"
ALT="Learning the vi Editor"><AREA
SHAPE="RECT"
COORDS="322,0,378,21"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="379,0,438,21"
HREF="../ksh/index.htm"
ALT="Learning the Korn Shell"><AREA
SHAPE="RECT"
COORDS="439,0,514,21"
HREF="../lrnunix/index.htm"
ALT="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
