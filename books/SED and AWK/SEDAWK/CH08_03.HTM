<HTML
><HEAD
>
<TITLE>[Chapter 8] 8.3 Other Statements That Affect Flow Control</TITLE>
<META
NAME="DC.title"
CONTENT="sed &amp; awk"><META
NAME="DC.creator"
CONTENT="Dale Dougherty &amp; Arnold Robbins"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1998-08-03T20:58:50Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-225-5"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch08_01.htm"
TITLE="8. Conditionals, Loops, and Arrays"><LINK
REL="prev"
HREF="ch08_02.htm"
TITLE="8.2 Looping"><LINK
REL="next"
HREF="ch08_04.htm"
TITLE="8.4 Arrays"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="sed &amp; awk"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/ssrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch08_02.htm"
TITLE="8.2 Looping"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.2 Looping"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 8<BR>Conditionals, Loops, and Arrays</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch08_04.htm"
TITLE="8.4 Arrays"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.4 Arrays"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SEDAWK-CH-8-SECT-3"
>8.3 Other Statements That Affect Flow Control</A
></H2
><P
CLASS="para"
>The <KBD
CLASS="command"
>if</KBD
>, <KBD
CLASS="command"
>while</KBD
>,
<KBD
CLASS="command"
>for</KBD
>, and <KBD
CLASS="command"
>do</KBD
> statements allow you
to change the normal flow through a procedure.  In this section, we
look at several other statements that also affect a change in flow
control.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6609"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6611"
></A
>There are two statements that affect the flow control of a loop,
<KBD
CLASS="command"
>break</KBD
> and <KBD
CLASS="command"
>continue</KBD
>.  The
<KBD
CLASS="command"
>break</KBD
> statement, as you'd expect, breaks out of the
loop, such that no more iterations of the loop are performed.  The
<KBD
CLASS="command"
>continue</KBD
> statement stops the current iteration
before reaching the bottom of the loop and starts a new iteration at
the top.</P
><P
CLASS="para"
>Consider what happens in the following program fragment:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>for ( x = 1; x &lt;= NF; ++x )
	if ( y == $x ) {
		print x, $x
		break
	}
print</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>A loop is set up to examine each field of the current input record.
Each time through the loop, the value of <KBD
CLASS="command"
>y</KBD
> is
compared to the value of a field referenced as <KBD
CLASS="command"
>$x</KBD
>.
If the result is true, we print the field number and its value and
then break from the loop.  The next statement to be executed is
<KBD
CLASS="command"
>print</KBD
>.  The use of <KBD
CLASS="command"
>break</KBD
> means
that we are interested only in the first match on a line and that we
don't want to loop through the rest of the fields.</P
><P
CLASS="para"
>Here's a similar example using the <KBD
CLASS="command"
>continue</KBD
> statement:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>for ( x = 1; x &lt;= NF; ++x ) {
	if ( x == 3 ) 
		continue
	print x, $x
}</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>This example loops through the fields of the current input record,
printing the field number and its value.  However (for some reason),
we want to avoid printing the third field.  The conditional statement
tests the counter variable and if it is equal to 3, the
<KBD
CLASS="command"
>continue</KBD
> statement is executed.  The
<KBD
CLASS="command"
>continue</KBD
> statement passes control back to the top
of the loop where the counter variable is incremented again.  It
avoids executing the <KBD
CLASS="command"
>print</KBD
> statement for that
iteration.  The same result could be achieved by simply re-writing the
conditional to execute <KBD
CLASS="command"
>print</KBD
> as long as
<KBD
CLASS="command"
>x</KBD
> is not equal to 3.  The point is that you can use
the <KBD
CLASS="command"
>continue</KBD
> statement to avoid hitting the bottom
of the loop on a particular iteration.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-6637"
></A
><A
CLASS="indexterm"
NAME="AUTOID-6639"
></A
>There are two statements that affect the main input loop,
<KBD
CLASS="command"
>next</KBD
> and <KBD
CLASS="command"
>exit</KBD
>.  The
<KBD
CLASS="command"
>next</KBD
> statement causes the next line of input to be
read and then resumes execution at the top of the script.[1] 
This allows you to avoid applying other procedures on the current
input line.  A typical use of the <KBD
CLASS="command"
>next</KBD
> statement is
to continue reading input from a file, ignoring the other actions in
the script until that file is exhausted.  The system variable
<KBD
CLASS="command"
>FILENAME</KBD
> provides the name of the current input
file.  Thus, a pattern can be written:</P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[1] Some awks don't allow you to use <B
CLASS="emphasis.bold"
>next</B
> from 
within a user-defined function; Caveat emptor.  </P
></BLOCKQUOTE
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>FILENAME == &quot;acronyms&quot; {
	<I
CLASS="lineannotation"
>action</I
>
	next
}
{ print }</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>This causes the action to be performed for each line in the file
<I
CLASS="filename"
>acronyms</I
>.  After the action is performed, the
next line of input is read.  Control does not pass to the
<KBD
CLASS="command"
>print</KBD
> statement until the input is taken from a
different source.</P
><P
CLASS="para"
>The <KBD
CLASS="command"
>exit</KBD
> statement exits the main input loop and
passes control to the <KBD
CLASS="command"
>END</KBD
> rule, if there is one.
If the <KBD
CLASS="command"
>END</KBD
> rule is not defined, or the
<KBD
CLASS="command"
>exit</KBD
> statement is used in the
<KBD
CLASS="command"
>END</KBD
> rule, then the script terminates.  We used the
<KBD
CLASS="command"
>exit</KBD
> statement earlier in the
<KBD
CLASS="command"
>factorial</KBD
> program to exit after reading one line of
input.</P
><P
CLASS="para"
>An <KBD
CLASS="command"
>exit</KBD
> statement can take an expression as an
argument.  The value of this expression will be returned as the exit
status of awk.  If the expression is not supplied, the exit status is
0.  If you supply a value to an initial <KBD
CLASS="command"
>exit</KBD
>
statement, and then call <KBD
CLASS="command"
>exit</KBD
> again from the
<KBD
CLASS="command"
>END</KBD
> rule without a value, the first value is
used. For example:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>awk '{
	...
	exit 5
}
END { exit }'</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>Here, the exit status from awk will be 5.</P
><P
CLASS="para"
>You will come across examples that use these flow-control statements
in upcoming sections.</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch08_02.htm"
TITLE="8.2 Looping"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.2 Looping"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="sed &amp; awk"
><IMG
SRC="../gifs/txthome.gif"
ALT="sed &amp; awk"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch08_04.htm"
TITLE="8.4 Arrays"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.4 Arrays"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>8.2 Looping</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>8.4 Arrays</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The UNIX CD Bookshelf Navigation"><MAP
NAME="map"
><AREA
SHAPE="RECT"
COORDS="0,0,73,21"
HREF="../index.htm"
ALT="The UNIX CD Bookshelf"><AREA
SHAPE="RECT"
COORDS="74,0,163,21"
HREF="../upt/index.htm"
ALT="UNIX Power Tools"><AREA
SHAPE="RECT"
COORDS="164,0,257,21"
HREF="../unixnut/index.htm"
ALT="UNIX in a Nutshell"><AREA
SHAPE="RECT"
COORDS="258,0,321,21"
HREF="../vi/index.htm"
ALT="Learning the vi Editor"><AREA
SHAPE="RECT"
COORDS="322,0,378,21"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="379,0,438,21"
HREF="../ksh/index.htm"
ALT="Learning the Korn Shell"><AREA
SHAPE="RECT"
COORDS="439,0,514,21"
HREF="../lrnunix/index.htm"
ALT="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
