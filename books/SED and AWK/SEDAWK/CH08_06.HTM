<HTML
><HEAD
>
<TITLE>[Chapter 8] 8.6 System Variables That Are Arrays</TITLE>
<META
NAME="DC.title"
CONTENT="sed &amp; awk"><META
NAME="DC.creator"
CONTENT="Dale Dougherty &amp; Arnold Robbins"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1998-08-03T20:59:43Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-225-5"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch08_01.htm"
TITLE="8. Conditionals, Loops, and Arrays"><LINK
REL="prev"
HREF="ch08_05.htm"
TITLE="8.5 An Acronym Processor"><LINK
REL="next"
HREF="ch09_01.htm"
TITLE="9. Functions"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="sed &amp; awk"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/ssrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch08_05.htm"
TITLE="8.5 An Acronym Processor"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.5 An Acronym Processor"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 8<BR>Conditionals, Loops, and Arrays</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="CHAPTER"
HREF="ch09_01.htm"
TITLE="9. Functions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9. Functions"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SEDAWK-CH-8-SECT-6"
>8.6 System Variables That Are Arrays</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH08.SYS"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7126"
></A
>Awk provides two system variables that are arrays:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><KBD
CLASS="command"
>ARGV</KBD
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7135"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7137"
></A
>An array of command-line arguments, excluding the script itself and
any options specified with the invocation of awk.  The number of
elements in this array is available in <KBD
CLASS="command"
>ARGC</KBD
>.  The
index of the first element of the array is 0 (unlike all other arrays
in awk but consistent with C) and the last is <KBD
CLASS="command"
>ARGC - 
1</KBD
>.</P
></DD
><DT
CLASS="term"
><KBD
CLASS="command"
>ENVIRON</KBD
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7146"
></A
>An array of environment variables.
Each element of the array is the value in the current
environment and the index is the name of the environment variable.</P
></DD
></DL
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-8-SECT-6.1"
>8.6.1 An Array of Command-Line Parameters</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH08.COMM"
></A
>You can write a loop to reference all the elements of the
<KBD
CLASS="command"
>ARGV</KBD
> array.</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
># argv.awk - print command-line parameters
BEGIN { for (x = 0; x &lt; ARGC; ++x)
	    print ARGV[x]
	print ARGC
}</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>This example also prints out the value of <KBD
CLASS="command"
>ARGC</KBD
>, the
number of command-line arguments.  Here's an example of how it works
on a sample command line:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>awk -f argv.awk 1234 &quot;John Wayne&quot; Westerns n=44 -</B
></CODE
>
awk
1234
John Wayne
Westerns
n=44
- 
6</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>As you can see, there are six elements in the array.  The first
element is the name of the command that invoked the script.  The last
argument, in this case, is the filename, &quot;-&quot;, for standard input.
Note the &quot;-f argv.awk&quot; does not appear in the parameter list.</P
><P
CLASS="para"
>Generally, the value of <KBD
CLASS="command"
>ARGC</KBD
> will be at least 2.
If you don't want to refer to the program name or the filename, you
can initialize the counter to 1 and then test against <KBD
CLASS="command"
>ARGC -
1</KBD
> to avoid referencing the last parameter (assuming that
there is only one filename).</P
><P
CLASS="para"
>Remember that if you invoke awk from a shell script, the command-line
parameters are passed to the shell script and not to awk.  You have to
pass the shell script's command-line parameters to the awk program
inside the shell script.  For instance, you can pass all command-line
parameters from the shell script to awk, using &quot;$*&quot;.  Look at the
following shell script:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>awk '
# argv.sh - print command-line parameters
BEGIN {
	for (x = 0; x &lt; ARGC; ++x)
		print ARGV[x]
	print ARGC
}' $*</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>This shell script works the same as the first example of invoking awk.</P
><P
CLASS="para"
>One practical use is to test the command-line parameters in the
<KBD
CLASS="command"
>BEGIN</KBD
> rule using a regular expression.  The
following example tests that all the parameters, except the first, 
are integers.</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
># number.awk - test command-line parameters
BEGIN {
	for (x = 1; x &lt; ARGC; ++x)
		if ( ARGV[x] !~ /^[0-9]+$/ ) {
			print ARGV[x], &quot;is not an integer.&quot;
			exit 1
		}
}</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>If the parameters contain any character that is not a digit, the
program will print the message and quit.</P
><P
CLASS="para"
>After testing the value, you can, of course, assign it to a variable.
For instance, we could write a <KBD
CLASS="command"
>BEGIN</KBD
> procedure of a
script that checks the command-line parameters before prompting the
user.  Let's look at the following shell script that uses the phone
and address database from the previous chapter:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>awk '# phone - find phone number for person 
# supply name of person on command line or at prompt.
BEGIN { FS = &quot;,&quot; 
	# look for parameter
	if ( ARGC &gt; 2 ){ 
		name = ARGV[1]
		delete ARGV[1]
	} else { 
		# loop until we get a name
		while (! name) { 
			printf(&quot;Enter a name? &quot;)
			getline name &lt; &quot;-&quot;
		}
	}
}
$1 ~ name {
	print $1, $NF 
}' $* phones.data</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>We test the <KBD
CLASS="command"
>ARGC</KBD
> variable to see if there are more
than two parameters.  By specifying &quot;$*&quot;, we can pass all the
parameters from the shell command line inside to the awk command line.
If this parameter has been supplied, we assume the second parameter,
<KBD
CLASS="command"
>ARGV[1]</KBD
>, is the one we want and it is assigned to
the variable <KBD
CLASS="command"
>name</KBD
>.  Then that parameter is deleted
from the array.  This is very important if the parameter that is
supplied on the command line is not of the form
&quot;<CODE
CLASS="replaceable"
><I
>var=value</I
></CODE
>&quot;; otherwise, it will later be
interpreted as a filename.  If additional parameters are supplied,
they will be interpreted as filenames of alternative phone databases.
If there are not more than two parameters, then we prompt for the
name.  The <KBD
CLASS="command"
>getline</KBD
> function is discussed in 
<A
CLASS="xref"
HREF="ch10_01.htm"
TITLE="The Bottom Drawer"
>Chapter 10</A
>; using this syntax, it reads the next line
from standard input.</P
><P
CLASS="para"
>Here are several examples of this script in action:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>phone John </B
></CODE
>
John Robinson 696-0987
$ <CODE
CLASS="userinput"
><B
>phone</B
></CODE
>
Enter a name? <CODE
CLASS="userinput"
><B
>Alice</B
></CODE
>
Alice Gold (707) 724-0000
$ <CODE
CLASS="userinput"
><B
>phone Alice /usr/central/phonebase</B
></CODE
>
Alice Watson (617) 555-0000
Alice Gold (707) 724-0000</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>The first example supplies the name on the command line, the second
prompts the user, and the third takes two command-line parameters and
uses the second as a filename.  (The script will not allow you to
supply a filename without supplying the person's name on the command
line.  You could devise a test that would permit this syntax, though.)</P
><P
CLASS="para"
>Because you can add to and delete from the <KBD
CLASS="command"
>ARGV</KBD
>
array, there is the potential for doing a lot of interesting
manipulation.  You can place a filename at the end of the
<KBD
CLASS="command"
>ARGV</KBD
> array, for instance, and it will be opened as
though it were specified on the command line.  Similarly, you can
delete a filename from the array and it will never be opened.  Note
that if you add new elements to <KBD
CLASS="command"
>ARGV</KBD
>, you should
also increment <KBD
CLASS="command"
>ARGC</KBD
>; awk uses the value of
<KBD
CLASS="command"
>ARGC</KBD
> to know how many elements in
<KBD
CLASS="command"
>ARGV</KBD
> it should process.  Thus, simply decrementing
<KBD
CLASS="command"
>ARGC</KBD
> will keep awk from examining the final element
in <KBD
CLASS="command"
>ARGV</KBD
>.</P
><P
CLASS="para"
>As a special case, if the value of an <KBD
CLASS="command"
>ARGV</KBD
> element
is the empty string (<CODE
CLASS="literal"
>&quot;&quot;</CODE
>), awk will skip
over it and continue on to the next element.</P
><A
CLASS="indexterm"
NAME="AUTOID-7206"
></A
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-8-SECT-6.2"
>8.6.2 An Array of Environment Variables</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7210"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7212"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7214"
></A
>The <KBD
CLASS="command"
>ENVIRON</KBD
> array was added independently to both
gawk and MKS awk.  It was then added to the System V Release 4 nawk,
and is now included in the POSIX standard for awk.  It allows you to
access variables in the environment.  The following script loops
through the elements of the <KBD
CLASS="command"
>ENVIRON</KBD
> array and
prints them.</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
># environ.awk - print environment variable
BEGIN {
	for (env in ENVIRON)
		print env &quot;=&quot; ENVIRON[env]
}</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The index of the array is the variable name.  The script generates the
same output produced by the <KBD
CLASS="command"
>env</KBD
> command
(<KBD
CLASS="command"
>printenv</KBD
> on some systems).</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>awk -f environ.awk</B
></CODE
>
DISPLAY=scribe:0.0
FRAME=Shell 3
LOGNAME=dale
MAIL=/usr/mail/dale
PATH=:/bin:/usr/bin:/usr/ucb:/work/bin:/mac/bin:.
TERM=mac2cs
HOME=/work/dale
SHELL=/bin/csh
TZ=PST8PDT
EDITOR=/usr/bin/vi</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can reference any element, using the variable name as the index of
the array:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>ENVIRON[&quot;LOGNAME&quot;]</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You can also change any element of the <KBD
CLASS="command"
>ENVIRON</KBD
> array. </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>ENVIRON[&quot;LOGNAME&quot;] = &quot;Tom&quot;</PRE
></BLOCKQUOTE
><P
CLASS="para"
>However, this change does not affect the user's actual environment
(i.e., when awk is done, the value of <KBD
CLASS="command"
>LOGNAME</KBD
> will
not be changed) nor does it affect the environment inherited by
programs that are invoked from awk via the <KBD
CLASS="command"
>getline</KBD
>
or <KBD
CLASS="command"
>system()</KBD
> functions, which are described
in <A
CLASS="xref"
HREF="ch10_01.htm"
TITLE="The Bottom Drawer"
>Chapter 10</A
>.  </P
><P
CLASS="para"
>This chapter has covered many
important programming constructs.  You will continue to see examples
in upcoming chapters that make use of these constructs.  If
programming is new to you, be sure you take the time to run and modify
the programs in this chapter, and write small programs of your own.
It is essential, like learning how to conjugate verbs, that these
constructs become familiar and predictable to you.</P
></DIV
><A
CLASS="indexterm"
NAME="AUTOID-7236"
></A
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch08_05.htm"
TITLE="8.5 An Acronym Processor"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.5 An Acronym Processor"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="sed &amp; awk"
><IMG
SRC="../gifs/txthome.gif"
ALT="sed &amp; awk"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="CHAPTER"
HREF="ch09_01.htm"
TITLE="9. Functions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9. Functions"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>8.5 An Acronym Processor</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>9. Functions</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The UNIX CD Bookshelf Navigation"><MAP
NAME="map"
><AREA
SHAPE="RECT"
COORDS="0,0,73,21"
HREF="../index.htm"
ALT="The UNIX CD Bookshelf"><AREA
SHAPE="RECT"
COORDS="74,0,163,21"
HREF="../upt/index.htm"
ALT="UNIX Power Tools"><AREA
SHAPE="RECT"
COORDS="164,0,257,21"
HREF="../unixnut/index.htm"
ALT="UNIX in a Nutshell"><AREA
SHAPE="RECT"
COORDS="258,0,321,21"
HREF="../vi/index.htm"
ALT="Learning the vi Editor"><AREA
SHAPE="RECT"
COORDS="322,0,378,21"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="379,0,438,21"
HREF="../ksh/index.htm"
ALT="Learning the Korn Shell"><AREA
SHAPE="RECT"
COORDS="439,0,514,21"
HREF="../lrnunix/index.htm"
ALT="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
