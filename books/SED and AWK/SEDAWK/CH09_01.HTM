<HTML
><HEAD
>
<TITLE>[Chapter 9] Functions</TITLE>
<META
NAME="DC.title"
CONTENT="sed &amp; awk"><META
NAME="DC.creator"
CONTENT="Dale Dougherty &amp; Arnold Robbins"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1998-08-03T21:00:11Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-225-5"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="sed &amp; awk"><LINK
REL="prev"
HREF="ch08_06.htm"
TITLE="8.6 System Variables That Are Arrays"><LINK
REL="next"
HREF="ch09_02.htm"
TITLE="9.2 String Functions"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="sed &amp; awk"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/ssrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch08_06.htm"
TITLE="8.6 System Variables That Are Arrays"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.6 System Variables That Are Arrays"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 9</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch09_02.htm"
TITLE="9.2 String Functions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.2 String Functions"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="CHAPTER"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="SEDAWK-CH-9"
>9. Functions</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#SEDAWK-CH-9-SECT-1"
TITLE="9.1 Arithmetic Functions"
>Arithmetic Functions</A
><BR><A
CLASS="sect1"
HREF="ch09_02.htm"
TITLE="9.2 String Functions"
>String Functions</A
><BR><A
CLASS="sect1"
HREF="ch09_03.htm"
TITLE="9.3 Writing Your Own Functions"
>Writing Your Own Functions</A
></P
><P
></P
></DIV
><P
CLASS="para"
>A function is a self-contained computation that accepts a number of
arguments as input and returns some value.
Awk has a number of built-in functions
in two groups:  arithmetic and string functions.  
Awk also provides
user-defined functions, which allow you to expand upon
the built-in functions by writing your own.</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SEDAWK-CH-9-SECT-1"
>9.1 Arithmetic Functions</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH09.FUN1"
></A
><A
CLASS="indexterm"
NAME="CH09.FUN2"
></A
><A
CLASS="indexterm"
NAME="CH09.FUN4"
></A
>Nine of the built-in functions
can be classified as arithmetic functions.
Most of them take a numeric argument and return
a numeric value.  <A
CLASS="xref"
HREF="ch09_01.htm#SEDAWK-CH-9-TAB-1"
TITLE="awk's Built-In Arithmetic Functions"
>Table 9.1</A
> summarizes
these arithmetic functions.</P
><TABLE
CLASS="table"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="SEDAWK-CH-9-TAB-1"
>Table 9.1: awk's Built-In Arithmetic Functions</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Awk Function</TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Description</TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><KBD
CLASS="command"
>cos</KBD
>(<EM
CLASS="emphasis"
>x</EM
>)</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Returns cosine of <EM
CLASS="emphasis"
>x</EM
> (<EM
CLASS="emphasis"
>x</EM
> is in radians).</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><KBD
CLASS="command"
>exp</KBD
>(<EM
CLASS="emphasis"
>x</EM
>)</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Returns <EM
CLASS="emphasis"
>e</EM
> to the power <EM
CLASS="emphasis"
>x</EM
>.</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><KBD
CLASS="command"
>int</KBD
>(<EM
CLASS="emphasis"
>x</EM
>)</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Returns truncated value of <EM
CLASS="emphasis"
>x</EM
>.</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><KBD
CLASS="command"
>log</KBD
>(<EM
CLASS="emphasis"
>x</EM
>)</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Returns natural logarithm (base-<EM
CLASS="emphasis"
>e</EM
>) of <EM
CLASS="emphasis"
>x</EM
>.</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><KBD
CLASS="command"
>sin</KBD
>(<EM
CLASS="emphasis"
>x</EM
>)</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Returns sine of <EM
CLASS="emphasis"
>x</EM
> (<EM
CLASS="emphasis"
>x</EM
> is in radians).</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><KBD
CLASS="command"
>sqrt</KBD
>(<EM
CLASS="emphasis"
>x</EM
>)</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Returns square root of <EM
CLASS="emphasis"
>x</EM
>.</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><KBD
CLASS="command"
>atan2</KBD
>(<EM
CLASS="emphasis"
>y</EM
>,<EM
CLASS="emphasis"
>x</EM
>)</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Returns arctangent of <EM
CLASS="emphasis"
>y</EM
>/<EM
CLASS="emphasis"
>x</EM
> in the range -<IMG
SRC="../chars/pi.gif"
ALT="[pi]"> to <IMG
SRC="../chars/pi.gif"
ALT="[pi]">.</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><KBD
CLASS="command"
>rand</KBD
>()</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Returns pseudo-random number <EM
CLASS="emphasis"
>r</EM
>, where 0 &lt;= <EM
CLASS="emphasis"
>r</EM
> &lt; 1.</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><KBD
CLASS="command"
>srand</KBD
>(<EM
CLASS="emphasis"
>x</EM
>)</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Establishes new seed for <KBD
CLASS="command"
>rand()</KBD
>.  If no seed is specified, 
uses time of day. Returns the old seed.</P
></TD
></TR
></TBODY
></TABLE
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-9-SECT-1.1"
>9.1.1 Trigonometric Functions</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7324"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7326"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7329"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7331"
></A
>The trigonometric functions <KBD
CLASS="command"
>cos()</KBD
>
and <KBD
CLASS="command"
>sin()</KBD
> work the same way, taking a single argument
that is the size of an angle in radians and returning
the cosine or sine for that angle.  (To convert from degrees
to radians, multiply the number by <IMG
SRC="../chars/pi.gif"
ALT="[pi]">/180.) 
The trigonometric function <KBD
CLASS="command"
>atan2()</KBD
> 
takes two arguments and returns the arctangent of their quotient.
The expression</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>atan2(0, -1)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>produces <IMG
SRC="../chars/pi.gif"
ALT="[pi]">.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7339"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7341"
></A
>The function <KBD
CLASS="command"
>exp()</KBD
> uses the natural
exponential, which is also known as base-<EM
CLASS="emphasis"
>e</EM
>
exponentiation.  The expression</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>exp(1)</PRE
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7347"
></A
>returns the natural number 2.71828, the base of the natural
logarithms, referred to as <EM
CLASS="emphasis"
>e</EM
>.  
Thus, <KBD
CLASS="command"
>exp</KBD
>(<EM
CLASS="emphasis"
>x</EM
>) is <EM
CLASS="emphasis"
>e</EM
> to the <EM
CLASS="emphasis"
>x</EM
>-th power.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7355"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7357"
></A
>The <KBD
CLASS="command"
>log()</KBD
> function gives the inverse of the <KBD
CLASS="command"
>exp()</KBD
>
function, the natural logarithm of <EM
CLASS="emphasis"
>x</EM
>.
The <KBD
CLASS="command"
>sqrt()</KBD
> function takes a single argument and returns
the (positive) square root of that argument.  </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-9-SECT-1.2"
>9.1.2 Integer Function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7366"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7368"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7370"
></A
>The <KBD
CLASS="command"
>int()</KBD
> function truncates a numeric value by removing
digits to the right of the decimal point.
Look at the following two statements:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>print 100/3
print int(100/3)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The output from these statements is shown below:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>33.3333
33</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <KBD
CLASS="command"
>int()</KBD
> function simply truncates; 
it does not round up or down.
(Use the <KBD
CLASS="command"
>printf</KBD
> format &quot;%.0f&quot; to perform 
rounding.)[1]</P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[1] The way <KBD
CLASS="command"
>printf</KBD
> does rounding is
discussed in <A
CLASS="xref"
HREF="appb_01.htm"
TITLE="Quick Reference for awk"
>Appendix B, Quick Reference for awk</A
>.</P
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-9-SECT-1.3"
>9.1.3 Random Number Generation</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH09.RAND1"
></A
><A
CLASS="indexterm"
NAME="CH09.RAND2"
></A
><A
CLASS="indexterm"
NAME="CH09.RAND3"
></A
><A
CLASS="indexterm"
NAME="CH09.RAND4"
></A
><A
CLASS="indexterm"
NAME="CH09.RAND5"
></A
>The <KBD
CLASS="command"
>rand()</KBD
> function generates a pseudo-random floating-point
number between 0 and 1.  The <KBD
CLASS="command"
>srand()</KBD
> function sets the seed
or starting point for random number generation.  If <KBD
CLASS="command"
>srand()</KBD
> is
called without an argument, it uses the time of day to generate
the seed.  With an argument <EM
CLASS="emphasis"
>x</EM
>, <KBD
CLASS="command"
>srand()</KBD
> uses <EM
CLASS="emphasis"
>x</EM
> as
the seed.</P
><P
CLASS="para"
>If you don't call <KBD
CLASS="command"
>srand()</KBD
> at all, awk acts as if <KBD
CLASS="command"
>srand()</KBD
>
had been called with a constant argument before your program
started,  causing you to get the same starting point every time
you run your program.
This is useful if you want reproducible behavior for testing, but
inappropriate if you really do want your program to behave
differently every time.
Look at the following script:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
># rand.awk -- test random number generation
BEGIN {
	print rand()
	print rand()
	srand()
	print rand()
	print rand()
}</PRE
></BLOCKQUOTE
><P
CLASS="para"
>We print the result of the <KBD
CLASS="command"
>rand()</KBD
> function twice,
and then call the <KBD
CLASS="command"
>srand()</KBD
> function before printing
the result of the <KBD
CLASS="command"
>rand()</KBD
> function two more times.
Let's run the script.</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$<CODE
CLASS="userinput"
><B
> awk -f rand.awk</B
></CODE
>
0.513871
0.175726
0.760277
0.263863</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Four random numbers are generated.
Now look what happens when we run the program again:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$<CODE
CLASS="userinput"
><B
> awk -f rand.awk</B
></CODE
>
0.513871
0.175726
0.787988
0.305033</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first two &quot;random&quot; numbers are identical to the numbers
generated in the previous run of the program while the last
two numbers are different.
The last two numbers are different because we provided
the <KBD
CLASS="command"
>rand()</KBD
> function with a new seed.</P
><P
CLASS="para"
>The return value of the <KBD
CLASS="command"
>srand()</KBD
> function is the seed it was using. 
This can be used to keep track of sequences of random numbers,
and re-run them if needed.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-9-SECT-1.4"
>9.1.4 Pick 'em</A
></H3
><P
CLASS="para"
>To show how to use <KBD
CLASS="command"
>rand()</KBD
>, 
we'll look at a script that implements a &quot;quick-pick&quot; for a lottery game.  
This script, named <KBD
CLASS="command"
>lotto</KBD
>, picks <EM
CLASS="emphasis"
>x</EM
> 
numbers from a series of numbers 1 to <EM
CLASS="emphasis"
>y</EM
>.
Two arguments can be supplied on the command line: how many numbers to pick
(the default is 6) and the highest number in the series (the default
is 30).  
Using the default values for <EM
CLASS="emphasis"
>x</EM
> and <EM
CLASS="emphasis"
>y</EM
>, the script generates 
six unique random numbers between 1 and 30.
The numbers are sorted for readability from lowest to highest
and output.
Before looking at the script itself, let's run the program:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>lotto</B
></CODE
>
Pick 6 of 30
9 13 25 28 29 30
$ <CODE
CLASS="userinput"
><B
>lotto 7 35</B
></CODE
>
Pick 7 of 35
1 6 9 16 20 22 27</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first example uses the default values to print six random numbers
from 1 to 30.  The second example prints seven random numbers out
of 35.</P
><P
CLASS="para"
>The full <KBD
CLASS="command"
>lotto</KBD
> script is fairly complicated, so before looking
at the entire script, let's look at a smaller script that
generates a single random number in a series:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>awk -v TOPNUM=$1 '
# pick1 - pick one random number out of y 
# main routine
BEGIN {
# seed random number using time of day 
	srand() 
# get a random number
	select = 1 + int(rand() * TOPNUM)
# print pick
	print select
}'</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The shell script expects a single argument from the command line
and this is passed into the program as &quot;TOPNUM=$1,&quot;
using the <I
CLASS="option"
>-v</I
> option.
All the action happens in the <KBD
CLASS="command"
>BEGIN</KBD
> procedure. Since there are
no other statements in the program, awk exits when the <KBD
CLASS="command"
>BEGIN</KBD
>
procedure is done. </P
><P
CLASS="para"
>The main routine first calls the <KBD
CLASS="command"
>srand()</KBD
> function
to seed the random number generator.  Then we get a
random number by calling the <KBD
CLASS="command"
>rand()</KBD
> function:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>select = 1 + int(rand() * TOPNUM)</PRE
></BLOCKQUOTE
><P
CLASS="para"
>It might be helpful to see this expression broken up
so each part of it is obvious. </P
><TABLE
CLASS="informaltable"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Statement</TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Result</TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>print r = rand()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>0.467315</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>print r * TOPNUM</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>14.0195</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>print int(r * TOPNUM)</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>14</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>print 1 + int(r * TOPNUM)</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>15</TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Because the <KBD
CLASS="command"
>rand()</KBD
> function returns a number between 0 and 1,
we multiply it by <B
CLASS="emphasis.bold"
>TOPNUM</B
> to get a number between 0 and
<B
CLASS="emphasis.bold"
>TOPNUM</B
>.  We then truncate the number to remove the fractional
values and then add 1 to the number.  The latter is necessary
because <KBD
CLASS="command"
>rand()</KBD
> could return 0.  In this example, the
random number that is generated is 15.
You could use this program to print any single number, such
as picking a number between 1 and 100.</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>pick1 100</B
></CODE
>
83</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <KBD
CLASS="command"
>lotto</KBD
> script must &quot;pick one&quot; multiple times.  Basically,
we need to set up a <KBD
CLASS="command"
>for</KBD
> loop to execute the <KBD
CLASS="command"
>rand()</KBD
>
function as many times as needed.  One
of the reasons this is difficult is that we have to
worry about duplicates.  In other words, it is possible
for a number to be picked again; therefore we have to
keep track of the numbers already picked.</P
><P
CLASS="para"
>Here's the <KBD
CLASS="command"
>lotto</KBD
> script:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>awk -v NUM=$1 -v TOPNUM=$2 '
# lotto - pick x random numbers out of y 
# main routine
BEGIN {
# test command line args; NUM = $1, how many numbers to pick 
# 	              TOPNUM = $2, last number in series
	if (NUM &lt;= 0) 
		NUM = 6
	if (TOPNUM &lt;= 0) 
		TOPNUM = 30
# print &quot;Pick x of y&quot;
	printf(&quot;Pick %d of %d\n&quot;, NUM, TOPNUM) 
# seed random number using time and date; do this once
	srand() 
# loop until we have NUM selections
	for (j = 1; j &lt;= NUM; ++j) {
		# loop to find a not-yet-seen selection
		do {
			select = 1 + int(rand() * TOPNUM)
		} while (select in pick)
		pick[select] = select
	}
# loop through array and print picks.
	for (j in pick) 
		printf(&quot;%s &quot;, pick[j])
	printf(&quot;\n&quot;)
}'</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Unlike the previous program, this one looks for two command-line
arguments, indicating <EM
CLASS="emphasis"
>x</EM
> numbers out of
<EM
CLASS="emphasis"
>y</EM
>.  The main routine looks to see if these
numbers were supplied and if not, assigns default values.</P
><P
CLASS="para"
>There is only one array, <B
CLASS="emphasis.bold"
>pick</B
>, for holding the random numbers that
are selected. Each number is guaranteed to be in the desired range,
because the result of <KBD
CLASS="command"
>rand()</KBD
> (a value between 0 and 1) is
multiplied by <B
CLASS="emphasis.bold"
>TOPNUM</B
> and then truncated.
The heart of the script is a loop that occurs <B
CLASS="emphasis.bold"
>NUM</B
> times
to assign <B
CLASS="emphasis.bold"
>NUM</B
> elements to the <B
CLASS="emphasis.bold"
>pick</B
> array. </P
><P
CLASS="para"
>To get a new non-duplicate random number, we
use an inner loop that generates selections
and tests to see if they are in the <B
CLASS="emphasis.bold"
>pick</B
> array.
(Using the <KBD
CLASS="command"
>in</KBD
> operator is much faster than looping through the
array comparing subscripts.)
While <KBD
CLASS="command"
>(select in pick)</KBD
>, the corresponding element
has been found already, so the
selection is a duplicate and we reject the selection.  
If it is not true that <KBD
CLASS="command"
>select in pick</KBD
>, then 
we assign <KBD
CLASS="command"
>select</KBD
> to an element of the <B
CLASS="emphasis.bold"
>pick</B
> array.
This will make
future <KBD
CLASS="command"
>in</KBD
> tests
return true, causing the <KBD
CLASS="command"
>do</KBD
> loop to continue. </P
><P
CLASS="para"
>Finally, the program loops through the <B
CLASS="emphasis.bold"
>pick</B
> array and
prints the elements.
This version of the <KBD
CLASS="command"
>lotto</KBD
> script leaves one thing out.
See if you can tell what it is if we run it again:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>lotto 7 35</B
></CODE
>
Pick 7 of 35
5 21 9 30 29 20 2</PRE
></BLOCKQUOTE
><P
CLASS="para"
>That's right, the numbers are not sorted.  We'll
defer showing the code for the sort routine
until we discuss user-defined functions.  While it's not
necessary to have written the sorting code as a function,
it makes a lot of sense.  One reason is that you
can tackle a more generalized problem and retain
the solution for use in other programs.  Later 
on, we will write a 
function that sorts the elements of an array.</P
><P
CLASS="para"
>Note that the <B
CLASS="emphasis.bold"
>pick</B
> array isn't ready for sorting, since its
indices are the same as its values, not numbers in order.
We would have to set up a separate array for sorting by our sort
function:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
># create a numerically indexed array for sorting
i = 1
for (j in pick)
	sortedpick[i++] = pick[j]</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The <KBD
CLASS="command"
>lotto</KBD
> program is set up to do everything in the <KBD
CLASS="command"
>BEGIN</KBD
> block.
No input is processed. 
You could, however,
revise this script to read a list of names from a file and
for each name generate a &quot;quick-pick.&quot;</P
><A
CLASS="indexterm"
NAME="AUTOID-7514"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7515"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7516"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7517"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7518"
></A
></DIV
><A
CLASS="indexterm"
NAME="AUTOID-7519"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7520"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7521"
></A
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch08_06.htm"
TITLE="8.6 System Variables That Are Arrays"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.6 System Variables That Are Arrays"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="sed &amp; awk"
><IMG
SRC="../gifs/txthome.gif"
ALT="sed &amp; awk"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch09_02.htm"
TITLE="9.2 String Functions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.2 String Functions"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>8.6 System Variables That Are Arrays</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>9.2 String Functions</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The UNIX CD Bookshelf Navigation"><MAP
NAME="map"
><AREA
SHAPE="RECT"
COORDS="0,0,73,21"
HREF="../index.htm"
ALT="The UNIX CD Bookshelf"><AREA
SHAPE="RECT"
COORDS="74,0,163,21"
HREF="../upt/index.htm"
ALT="UNIX Power Tools"><AREA
SHAPE="RECT"
COORDS="164,0,257,21"
HREF="../unixnut/index.htm"
ALT="UNIX in a Nutshell"><AREA
SHAPE="RECT"
COORDS="258,0,321,21"
HREF="../vi/index.htm"
ALT="Learning the vi Editor"><AREA
SHAPE="RECT"
COORDS="322,0,378,21"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="379,0,438,21"
HREF="../ksh/index.htm"
ALT="Learning the Korn Shell"><AREA
SHAPE="RECT"
COORDS="439,0,514,21"
HREF="../lrnunix/index.htm"
ALT="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
