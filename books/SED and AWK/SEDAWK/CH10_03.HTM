<HTML
><HEAD
>
<TITLE>[Chapter 10] 10.3 The system() Function</TITLE>
<META
NAME="DC.title"
CONTENT="sed &amp; awk"><META
NAME="DC.creator"
CONTENT="Dale Dougherty &amp; Arnold Robbins"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1998-08-03T21:01:40Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-225-5"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch10_01.htm"
TITLE="10. The Bottom Drawer"><LINK
REL="prev"
HREF="ch10_02.htm"
TITLE="10.2 The close() Function"><LINK
REL="next"
HREF="ch10_04.htm"
TITLE="10.4 A Menu-Based Command Generator"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="sed &amp; awk"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/ssrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch10_02.htm"
TITLE="10.2 The close() Function"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.2 The close() Function"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 10<BR>The Bottom Drawer</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch10_04.htm"
TITLE="10.4 A Menu-Based Command Generator"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.4 A Menu-Based Command Generator"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SEDAWK-CH-10-SECT-3"
>10.3 The system() Function</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH10.SYSTEM"
></A
><A
CLASS="indexterm"
NAME="AUTOID-8410"
></A
><A
CLASS="indexterm"
NAME="AUTOID-8413"
></A
>The <KBD
CLASS="command"
>system()</KBD
> function executes a command supplied as
an expression.[3]
It does not, however, make the output of the command available within
the program for processing.  It returns the exit status of the command
that was executed.  The script waits for the command to finish before
continuing execution.  The following example executes the
<KBD
CLASS="command"
>mkdir</KBD
> command:</P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[3] The <KBD
CLASS="command"
>system()</KBD
> function is modeled after the
standard C library function of the same name.</P
></BLOCKQUOTE
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>BEGIN { if (system(&quot;mkdir dale&quot;) != 0) 
		print &quot;Command Failed&quot; }</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>The <KBD
CLASS="command"
>system()</KBD
> function is called from an
<KBD
CLASS="command"
>if</KBD
> statement that tests for a non-zero exit
status.  Running the program twice produces one success and one
failure:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>awk -f system.awk</B
></CODE
>
$ <CODE
CLASS="userinput"
><B
>ls dale</B
></CODE
>
$ <CODE
CLASS="userinput"
><B
>awk -f system.awk</B
></CODE
>
mkdir: dale: File exists
Command Failed</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>The first run creates the new directory and
<KBD
CLASS="command"
>system()</KBD
> returns an exit status of 0
(success).  The second time the command is executed, the directory
already exists, so <KBD
CLASS="command"
>mkdir</KBD
> fails and produces an
error message.  The &quot;Command Failed&quot; message is produced by awk.</P
><P
CLASS="para"
>The Berkeley UNIX command set has a small but useful command for
<KBD
CLASS="command"
>troff</KBD
> users named <KBD
CLASS="command"
>soelim</KBD
>, named
because it &quot;eliminates&quot; &quot;.so&quot; lines from a <KBD
CLASS="command"
>troff</KBD
>
input file.  (<KBD
CLASS="command"
>.so</KBD
> is a request to include or
&quot;source&quot; the contents of the named file.)  If you have an older
System V system that does not have <KBD
CLASS="command"
>soelim</KBD
>, you can
use the following awk script to create it:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>/^\.so/ { gsub(/&quot;/, &quot;&quot;, $2)
		system(&quot;cat &quot; $2)
		next
		}
{ print }</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>This script looks for &quot;.so&quot; at the beginning of a line, removes
any quotation marks, and then uses <KBD
CLASS="command"
>system()</KBD
> 
to execute the <KBD
CLASS="command"
>cat</KBD
> command and 
output the contents of the file. This output merges with the
rest of the lines in the file, which are simply printed to standard
output, as in the following example.</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>cat soelim.test</B
></CODE
>
This is a test
.so test1
This is a test
.so test2
This is a test.
$ <CODE
CLASS="userinput"
><B
>awk -f soelim.awk soelim.test</B
></CODE
>
This is a test
first:second
one:two
This is a test
three:four
five:six
This is a test.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>We don't explicitly test the exit status of the command.  Thus, if the
file does not exist, the error messages merge with the output:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>awk -f soelim.awk soelim.test</B
></CODE
>
This is a test
first:second
one:two
This is a test
cat: cannot open test2
This is a test.</PRE
></BLOCKQUOTE
><P
CLASS="para"
>We might want to test the return value of the
<KBD
CLASS="command"
>system()</KBD
> function and generate an error
message for the user.  This program is also very simplistic: it does
not handle instances of &quot;.so&quot; nested in the included file.  Think
about how you might implement a version of this program that did
handle nested &quot;.so&quot; requests.</P
><P
CLASS="para"
>This example is a function prompting you to enter a
filename.  It uses the <KBD
CLASS="command"
>system()</KBD
> function to
execute the <KBD
CLASS="command"
>test</KBD
> command to verify the file
exists and is readable:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
># getFilename function -- prompts user for filename,
#   verifies that file exists and returns absolute pathname. 
function getFilename(	file) { 
    while (! file) {
	printf &quot;Enter a filename: &quot;
	getline &lt; &quot;-&quot; # get response
	file = $0
	# check that file exists and is readable
	# test returns 1 if file does not exist.
	if (system(&quot;test -r &quot; file)) {
		print file &quot; not found&quot;
		file = &quot;&quot;
	}
    }
    if (file !~ /^\//) {
	&quot;pwd&quot; | getline # get current directory 
 	close(&quot;pwd&quot;)
	file = $0 &quot;/&quot; file
    }
    return file
}</PRE
></BLOCKQUOTE
><P
CLASS="para"
>This function returns the absolute pathname of the file specified by
the user.  It places the prompting and verification sequence inside a
<KBD
CLASS="command"
>while</KBD
> loop in order to allow the user to make a
different entry if the previous one is invalid.</P
><P
CLASS="para"
>The <KBD
CLASS="command"
>test -r</KBD
> command returns 0 if the file exists
and is readable, and 1 if not.  Once it is determined that the
filename is valid, then we test the filename to see if it begins with
a &quot;/&quot;, which would indicate that the user supplied an absolute
pathname.  If that test fails, we use the <KBD
CLASS="command"
>getline</KBD
>
function to get the output of the <KBD
CLASS="command"
>pwd</KBD
> command and
prepend it to the filename.  (Admittedly, the script makes no attempt
to deal with &quot;./&quot; or &quot;../&quot; entries, although tests can
be easily devised to match them.)  Note the two uses of the
<KBD
CLASS="command"
>getline</KBD
> function: the first gets the user's
response and the second executes the <KBD
CLASS="command"
>pwd</KBD
> command.</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch10_02.htm"
TITLE="10.2 The close() Function"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.2 The close() Function"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="sed &amp; awk"
><IMG
SRC="../gifs/txthome.gif"
ALT="sed &amp; awk"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch10_04.htm"
TITLE="10.4 A Menu-Based Command Generator"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.4 A Menu-Based Command Generator"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>10.2 The close() Function</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>10.4 A Menu-Based Command Generator</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The UNIX CD Bookshelf Navigation"><MAP
NAME="map"
><AREA
SHAPE="RECT"
COORDS="0,0,73,21"
HREF="../index.htm"
ALT="The UNIX CD Bookshelf"><AREA
SHAPE="RECT"
COORDS="74,0,163,21"
HREF="../upt/index.htm"
ALT="UNIX Power Tools"><AREA
SHAPE="RECT"
COORDS="164,0,257,21"
HREF="../unixnut/index.htm"
ALT="UNIX in a Nutshell"><AREA
SHAPE="RECT"
COORDS="258,0,321,21"
HREF="../vi/index.htm"
ALT="Learning the vi Editor"><AREA
SHAPE="RECT"
COORDS="322,0,378,21"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="379,0,438,21"
HREF="../ksh/index.htm"
ALT="Learning the Korn Shell"><AREA
SHAPE="RECT"
COORDS="439,0,514,21"
HREF="../lrnunix/index.htm"
ALT="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
