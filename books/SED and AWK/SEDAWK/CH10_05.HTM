<HTML
><HEAD
>
<TITLE>[Chapter 10] 10.5 Directing Output to Files and Pipes</TITLE>
<META
NAME="DC.title"
CONTENT="sed &amp; awk"><META
NAME="DC.creator"
CONTENT="Dale Dougherty &amp; Arnold Robbins"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1998-08-03T21:01:46Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-225-5"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch10_01.htm"
TITLE="10. The Bottom Drawer"><LINK
REL="prev"
HREF="ch10_04.htm"
TITLE="10.4 A Menu-Based Command Generator"><LINK
REL="next"
HREF="ch10_06.htm"
TITLE="10.6 Generating Columnar Reports"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="sed &amp; awk"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/ssrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch10_04.htm"
TITLE="10.4 A Menu-Based Command Generator"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.4 A Menu-Based Command Generator"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 10<BR>The Bottom Drawer</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch10_06.htm"
TITLE="10.6 Generating Columnar Reports"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.6 Generating Columnar Reports"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SEDAWK-CH-10-SECT-5"
>10.5 Directing Output to Files and Pipes</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH10.OUT1"
></A
><A
CLASS="indexterm"
NAME="CH10.OUT3"
></A
><A
CLASS="indexterm"
NAME="CH10.OUT4"
></A
><A
CLASS="indexterm"
NAME="AUTOID-8572"
></A
><A
CLASS="indexterm"
NAME="AUTOID-8575"
></A
><A
CLASS="indexterm"
NAME="AUTOID-8578"
></A
><A
CLASS="indexterm"
NAME="AUTOID-8580"
></A
><A
CLASS="indexterm"
NAME="AUTOID-8582"
></A
><A
CLASS="indexterm"
NAME="AUTOID-8584"
></A
>The output of any <KBD
CLASS="command"
>print</KBD
> or
<KBD
CLASS="command"
>printf</KBD
> statement can be directed to a file, using
the output redirection operators &quot;&gt;&quot; or &quot;&gt;&gt;&quot;. For example, the
following statement writes the current record to the file
<I
CLASS="filename"
>data.out</I
>:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>print &gt; &quot;data.out&quot;</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>The filename can be any expression that evaluates to a valid filename.
A file is opened by the first use of the redirection operator, and
subsequent uses append data to the file.  The difference between
&quot;&gt;&quot; and &quot;&gt;&gt;&quot; is the same as between the shell redirection
operators.  A right-angle bracket (&quot;&gt;&quot;) truncates
the file when opening it while &quot;&gt;&gt;&quot; preserves whatever the file
contains and appends data to it.</P
><P
CLASS="para"
>Because the redirection operator &quot;&gt;&quot; is the same as the relational
operator, there is the potential for confusion when you specify an
expression as an argument to the <KBD
CLASS="command"
>print</KBD
> command.
The rule is that &quot;&gt;&quot; will be interpreted as a redirection operator
when it appears in an argument list for any of the print statements.
To use &quot;&gt;&quot; as a relational operator in an expression that appears
in the argument list, put either the expression or the argument list
in parentheses.  For example, the following example uses parentheses
around the conditional expression to make sure that the relational
expression is evaluated properly:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>print &quot;a =&quot;, a, &quot;b =&quot;, b, &quot;max =&quot;, (a &gt; b ? a : b) &gt; &quot;data.out&quot;</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>The conditional expression evaluates whether <KBD
CLASS="command"
>a</KBD
> is
greater than <KBD
CLASS="command"
>b</KBD
>; if it is, then the value of
<KBD
CLASS="command"
>a</KBD
> is printed as the maximum value; otherwise,
<KBD
CLASS="command"
>b</KBD
>'s value is used.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-10-SECT-5.1"
>10.5.1 Directing Output to a Pipe</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-8604"
></A
><A
CLASS="indexterm"
NAME="AUTOID-8607"
></A
><A
CLASS="indexterm"
NAME="AUTOID-8610"
></A
><A
CLASS="indexterm"
NAME="AUTOID-8613"
></A
>You can also direct output to a pipe.  The command</P
><BLOCKQUOTE
CLASS="literallayout"
><P
CLASS="literallayout"
><CODE
CLASS="literal"
>print |</CODE
> <CODE
CLASS="replaceable"
><I
>command</I
></CODE
></P
></BLOCKQUOTE
><P
CLASS="para"
>opens a pipe the first time it is executed and sends the current
record as input to that command.  In other words, the command is only
invoked once, but each execution of the <KBD
CLASS="command"
>print</KBD
>
command supplies another line of input.</P
><P
CLASS="para"
>The following script strips <KBD
CLASS="command"
>troff</KBD
> macros and
requests from the current input line and then sends the line as input
to <KBD
CLASS="command"
>wc</KBD
> to determine how many words are in the file:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>{# words.awk - strip macros then get word count
sub(/^\.../,&quot;&quot;)
print | &quot;wc -w&quot; 
}</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>By removing formatting codes, we get a truer word count.</P
><P
CLASS="para"
>In most cases, we prefer to use a shell script to pipe the output of
the awk command to another command rather than do it inside the awk
script.  For instance, we'd write the previous example as a shell
script invoking awk and piping its output to <KBD
CLASS="command"
>wc</KBD
>:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>awk '{ # words -- strip macros 
sub(/^\.../,&quot;&quot;)
print 
}' $* | 
# get word count
wc -w</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>This method seems simpler and easier to understand.
Nonetheless, the other method has the advantage of accomplishing the
same thing without creating a shell script.</P
><P
CLASS="para"
>Remember that you can only have so many pipes open at a time.  Use the
<KBD
CLASS="command"
>close()</KBD
> function to close the pipe when you
are done with it.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-10-SECT-5.2"
>10.5.2 Working with Multiple Files</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH10.FILE1"
></A
><A
CLASS="indexterm"
NAME="CH10.FILE2"
></A
>A file is opened whenever you read from or write to a file.  Every
operating system has some limit on the number of files a running
program may have open.  Furthermore, each implementation of awk may
have an internal limit on the number of open files; this number could
be smaller than the system's limit.[4] 
<A
CLASS="indexterm"
NAME="AUTOID-8648"
></A
><A
CLASS="indexterm"
NAME="AUTOID-8650"
></A
><A
CLASS="indexterm"
NAME="AUTOID-8652"
></A
>
So that you don't run out of open files, awk provides a
<KBD
CLASS="command"
>close()</KBD
> function that allows you to close
an open file.  Closing files that you have finished processing allows
your program to open more files later on.</P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[4]  


Gawk will attempt to appear to have more files open than the system
limit by closing and reopening files as needed. Even though gawk is
&quot;smart,&quot; it is still more efficient to close your files when you're
done with them.  <A
CLASS="indexterm"
NAME="AUTOID-8645"
></A
></P
></BLOCKQUOTE
><P
CLASS="para"
>A common use for directing output to files is to split up a large file
into a number of smaller files.  Although UNIX provides
utilities, <KBD
CLASS="command"
>split</KBD
> and <KBD
CLASS="command"
>csplit</KBD
>,
that do a similar job, they do not have the ability to give the new
file a useful filename.</P
><P
CLASS="para"
>Similarly, sed can be used to write to a
file, but you must specify a fixed filename.  With awk, you can use a
variable to specify the filename and pick up the value from a pattern
in the file.  For instance, if $1 provided a string that could be used
as a filename, you could write a script to output each record to its
own file:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>print $0 &gt; $1</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>You should perhaps test the filename, either to determine its length
or to look for characters that cannot be used in a filename.</P
><P
CLASS="para"
>If you don't close your files, such a program would eventually run out
of available open files, and have to give up.  The example we are
going to look at works because it uses the
<KBD
CLASS="command"
>close()</KBD
> function so that you will not run
into any open-file limitations.</P
><P
CLASS="para"
>The following script was used to split up a large file containing
dozens of manpages.  Each manual page began by setting a number
register and ended with a blank line:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>.nr X 0</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>(Although they used the <KBD
CLASS="command"
>-man</KBD
> macros for the most
part, the beginning of a manpage was strangely coded, making things a
little harder.)  The line that provides the filename looks like this:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>.if \nX=0 .ds x}  XDrawLine &quot;&quot; &quot;Xlib - Drawing Primitives&quot;</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>The fifth field on this line, &quot;XDrawLine,&quot; contains the filename.
Perhaps the only difficulty in writing the script is that the first
line is not the one that provides the filename.  Therefore, we collect
the lines in an array until we get a filename.  Once we get the
filename, we output the array, and from that point on we simply write
each input line to the new file.  Here's the
<KBD
CLASS="command"
>man.split</KBD
> script:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
># man.split -- split up a file containing X manpages. 
BEGIN { file = 0; i = 0; filename = &quot;&quot; }

# First line of new manpage is &quot;.nr X 0&quot;
# Last line is blank
/^\.nr X 0/,/^$/ {
	# this conditional collects lines until we get a filename.
	if (file == 0)
		line[++i] = $0
	else
		print $0 &gt; filename

	# this matches the line that gives us the filename
	if ($4 == &quot;x}&quot;) {
		# now we have a filename
		filename = $5 
		file = 1
		# output name to screen 
		print filename 
		# print any lines collected
		for (x = 1; x &lt;= i; ++x){
			print line[x] &gt; filename
		}
		i = 0
	}

	# close up and clean up for next one
	if ($0 ~ /^$/) {
		close(filename)
		filename = &quot;&quot;
		file = 0
		i = 0
	}
}</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>As you can see, we use the variable <KBD
CLASS="command"
>file</KBD
> as a flag
to convey whether or not we have a valid filename and can write to the
file.  Initially, <KBD
CLASS="command"
>file</KBD
> is 0, and the current input
line is stored in an array. The variable <KBD
CLASS="command"
>i</KBD
> is a
counter used to index the array.  When we encounter the line that sets
the filename, then we set <KBD
CLASS="command"
>file</KBD
> to 1.  The name of
the new file is printed to the screen so that the user can get some
feedback on the progress of the script.  Then we loop through the
array and output it to the new file.  When the next input line is
read, <KBD
CLASS="command"
>file</KBD
> will be set to 1 and the
<KBD
CLASS="command"
>print</KBD
> statement will output it to the named file.</P
><A
CLASS="indexterm"
NAME="AUTOID-8683"
></A
><A
CLASS="indexterm"
NAME="AUTOID-8684"
></A
></DIV
><A
CLASS="indexterm"
NAME="AUTOID-8685"
></A
><A
CLASS="indexterm"
NAME="AUTOID-8686"
></A
><A
CLASS="indexterm"
NAME="AUTOID-8687"
></A
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch10_04.htm"
TITLE="10.4 A Menu-Based Command Generator"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.4 A Menu-Based Command Generator"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="sed &amp; awk"
><IMG
SRC="../gifs/txthome.gif"
ALT="sed &amp; awk"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch10_06.htm"
TITLE="10.6 Generating Columnar Reports"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.6 Generating Columnar Reports"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>10.4 A Menu-Based Command Generator</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>10.6 Generating Columnar Reports</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The UNIX CD Bookshelf Navigation"><MAP
NAME="map"
><AREA
SHAPE="RECT"
COORDS="0,0,73,21"
HREF="../index.htm"
ALT="The UNIX CD Bookshelf"><AREA
SHAPE="RECT"
COORDS="74,0,163,21"
HREF="../upt/index.htm"
ALT="UNIX Power Tools"><AREA
SHAPE="RECT"
COORDS="164,0,257,21"
HREF="../unixnut/index.htm"
ALT="UNIX in a Nutshell"><AREA
SHAPE="RECT"
COORDS="258,0,321,21"
HREF="../vi/index.htm"
ALT="Learning the vi Editor"><AREA
SHAPE="RECT"
COORDS="322,0,378,21"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="379,0,438,21"
HREF="../ksh/index.htm"
ALT="Learning the Korn Shell"><AREA
SHAPE="RECT"
COORDS="439,0,514,21"
HREF="../lrnunix/index.htm"
ALT="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
