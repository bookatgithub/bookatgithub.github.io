<HTML
><HEAD
>
<TITLE>[Chapter 10] 10.6 Generating Columnar Reports</TITLE>
<META
NAME="DC.title"
CONTENT="sed &amp; awk"><META
NAME="DC.creator"
CONTENT="Dale Dougherty &amp; Arnold Robbins"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1998-08-03T21:01:49Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-225-5"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch10_01.htm"
TITLE="10. The Bottom Drawer"><LINK
REL="prev"
HREF="ch10_05.htm"
TITLE="10.5 Directing Output to Files and Pipes"><LINK
REL="next"
HREF="ch10_07.htm"
TITLE="10.7 Debugging"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="sed &amp; awk"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/ssrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch10_05.htm"
TITLE="10.5 Directing Output to Files and Pipes"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.5 Directing Output to Files and Pipes"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 10<BR>The Bottom Drawer</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch10_07.htm"
TITLE="10.7 Debugging"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.7 Debugging"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SEDAWK-CH-10-SECT-6"
>10.6 Generating Columnar Reports</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH10.COL"
></A
><A
CLASS="indexterm"
NAME="CH10.COL2"
></A
>This section describes a small-scale business application that
produces reports with dollar amounts.  While this application doesn't
introduce any new material, it does emphasize the data processing and
reporting capabilities of awk.  (Surprisingly, some people do use awk
to write small business applications.)</P
><P
CLASS="para"
>It is presumed that a script exists for data entry.  The data-entry
script has two jobs: the first is to enter the customer's name and
mailing address for later use in building a mailing list; the second
is to record the customer's order of any of seven items, the number of
items ordered, and the price per item.  The data collected for the
mailing list and the customer order were written to separate files.</P
><P
CLASS="para"
>Here are two sample customer records from the customer order file:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>Charlotte Webb 
P.O  N61331 97 Y 045 	Date: 03/14/97
#1 3  7.50
#2 3  7.50
#3 1  7.50
#4 1  7.50
#7 1  7.50 

Martin S. Rossi 
P.O  NONE 	Date: 03/14/97
#1 2  7.50
#2 5  6.75</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>Each order covers multiple lines, and a blank line separates one order
from another.  The first two lines supply the customer's name,
purchase order number and the date of the order.  Each subsequent line
identifies an item by number, the number ordered, and the price of the
item.</P
><P
CLASS="para"
>Let's write a simple program that multiplies the number of items by
the price.  The script can ignore the first two lines of each record.
We only want to read the lines where an item is specified, as in the
following example.</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>awk '/^#/ {
		amount = $2 * $3
		printf &quot;%s %6.2f\n&quot;, $0, amount
		next
	 }
{ print }' $*</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>The main procedure only affects lines that match the pattern.  It
multiplies the second field by the third field, assigning the value to
the variable <KBD
CLASS="command"
>amount</KBD
>.  The <KBD
CLASS="command"
>printf</KBD
>
conversion <KBD
CLASS="command"
>%f</KBD
> is used to print a floating-point
number; &quot;6.2&quot; specifies a minimum field width of six and a precision
of two.  Precision is the number of digits to the right of the decimal
point; the default for <KBD
CLASS="command"
>%f</KBD
> is six.  We print the
current record along with the value of the variable
<KBD
CLASS="command"
>amount</KBD
>.  If a line is printed within this
procedure, the next line is read from standard input.  Lines not
matching the pattern are simply passed through.  Let's look at how
<KBD
CLASS="command"
>addem</KBD
> works:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>addem orders</B
></CODE
>
Charlotte Webb 
P.O  N61331 97 Y 045 	Date: 03/14/97
#1 3  7.50  22.50
#2 3  7.50  22.50
#3 1  7.50   7.50
#4 1  7.50   7.50
#7 1  7.50   7.50

Martin S. Rossi 
P.O  NONE 	Date: 03/14/97
#1 2  7.50  15.00
#2 5  6.75  33.75</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>This program did not need to access the customer record as a whole; it
simply acted on the individual item lines.  Now, let's design a
program that reads multiline records and accumulates order
information for display in a report.  This report should display for
each item the total number of copies and the total amount.  We also
want totals reflecting all copies ordered and the sum of all orders.</P
><P
CLASS="para"
>Our new script will begin by setting the field and record separators:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>BEGIN { FS = &quot;\n&quot;; RS = &quot;&quot; }</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>Each record has a variable number of fields, depending upon how many
items have been ordered.  First, we check that the input record has at
least three fields.  Then a <KBD
CLASS="command"
>for</KBD
> loop is built to
read all of the fields beginning with the third field.</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>NF &gt;= 3 {
for (i = 3; i &lt;= NF; ++i) {</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>In database terms, each field has a value and each value can be
further broken up as subvalues.  That is, if the value of a field in a
multiline record is a single line, subvalues are the words that are
on that line.  We can use the <KBD
CLASS="command"
>split()</KBD
>
function to divide a field into subvalues.</P
><P
CLASS="para"
>The following part of the script splits each field into subvalues.
<KBD
CLASS="command"
>$i</KBD
> will supply the value of the current field that
will be divided into elements of the array <KBD
CLASS="command"
>order</KBD
>:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>sv = split($i, order, &quot; &quot;)
if (sv == 3) {
       <EM
CLASS="emphasis"
>procedure</EM
>
} else
       print &quot;Incomplete Record&quot;
} # end for loop</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The number of elements returned by the function is saved in a variable
<KBD
CLASS="command"
>sv</KBD
>.  This allows us to test that there are three
subvalues.  If there are not, the <KBD
CLASS="command"
>else</KBD
> statement is
executed, printing the error message to the screen.</P
><P
CLASS="para"
>Next we assign each individual element of the array to a specific
variable.  This is mainly to make it easier to remember what each
element represents:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>title = order[1] 
copies = order[2] 
price = order[3]</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Then we perform a group of arithmetic operations on these
values:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>amount = copies * price  
total_vol += copies
total_amt += amount
vol[title] += copies
amt[title] += amount</PRE
></BLOCKQUOTE
><P
CLASS="para"
>We accumulate these values until the last input record is read.  The
<KBD
CLASS="command"
>END</KBD
> procedure prints the report.</P
><P
CLASS="para"
>Here's the complete program:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>cat addemup</B
></CODE
>
#! /bin/sh
# addemup -- total customer orders 
awk 'BEGIN { FS = &quot;\n&quot;; RS = &quot;&quot; }
NF &gt;= 3 {
	for (i = 3; i &lt;= NF; ++i) { 	
		sv = split($i, order, &quot; &quot;)
		if (sv == 3) {
			title = order[1] 
			copies = order[2] 
			price = order[3]
			amount = copies * price  
			total_vol += copies
			total_amt += amount
			vol[title] += copies
			amt[title] += amount
		} else
			print &quot;Incomplete Record&quot;
	}
}
END { 
   printf &quot;%5s\t%10s\t%6s\n\n&quot;, &quot;TITLE&quot;, &quot;COPIES SOLD&quot;, &quot;TOTAL&quot;
   for (title in vol)
       printf &quot;%5s\t%10d\t$%7.2f\n&quot;, title, vol[title], amt[title] 
   printf &quot;%s\n&quot;, &quot;-------------&quot;
   printf &quot;\t%s%4d\t$%7.2f\n&quot;, &quot;Total &quot;, total_vol, total_amt
}' $*</PRE
></BLOCKQUOTE
><P
CLASS="para"
>We have defined two arrays that have the same subscript.  We only need
to have one <KBD
CLASS="command"
>for</KBD
> loop to read both arrays.</P
><P
CLASS="para"
><KBD
CLASS="command"
>addemup</KBD
>, an order report generator, produces the
following output:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>addemup orders</B
></CODE
>
TITLE     COPIES SOLD      TOTAL

   #1              5     $  37.50
   #2              8     $  56.25
   #3              1     $   7.50
   #4              1     $   7.50
   #7              1     $   7.50
-------------
     Total        16     $ 116.25</PRE
></BLOCKQUOTE
></P
><A
CLASS="indexterm"
NAME="AUTOID-8748"
></A
><A
CLASS="indexterm"
NAME="AUTOID-8749"
></A
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch10_05.htm"
TITLE="10.5 Directing Output to Files and Pipes"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.5 Directing Output to Files and Pipes"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="sed &amp; awk"
><IMG
SRC="../gifs/txthome.gif"
ALT="sed &amp; awk"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch10_07.htm"
TITLE="10.7 Debugging"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.7 Debugging"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>10.5 Directing Output to Files and Pipes</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>10.7 Debugging</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The UNIX CD Bookshelf Navigation"><MAP
NAME="map"
><AREA
SHAPE="RECT"
COORDS="0,0,73,21"
HREF="../index.htm"
ALT="The UNIX CD Bookshelf"><AREA
SHAPE="RECT"
COORDS="74,0,163,21"
HREF="../upt/index.htm"
ALT="UNIX Power Tools"><AREA
SHAPE="RECT"
COORDS="164,0,257,21"
HREF="../unixnut/index.htm"
ALT="UNIX in a Nutshell"><AREA
SHAPE="RECT"
COORDS="258,0,321,21"
HREF="../vi/index.htm"
ALT="Learning the vi Editor"><AREA
SHAPE="RECT"
COORDS="322,0,378,21"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="379,0,438,21"
HREF="../ksh/index.htm"
ALT="Learning the Korn Shell"><AREA
SHAPE="RECT"
COORDS="439,0,514,21"
HREF="../lrnunix/index.htm"
ALT="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
