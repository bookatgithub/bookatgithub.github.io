<HTML
><HEAD
>
<TITLE>[Chapter 10] 10.9 Invoking awk Using the #! Syntax</TITLE>
<META
NAME="DC.title"
CONTENT="sed &amp; awk"><META
NAME="DC.creator"
CONTENT="Dale Dougherty &amp; Arnold Robbins"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1998-08-03T21:02:34Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-225-5"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch10_01.htm"
TITLE="10. The Bottom Drawer"><LINK
REL="prev"
HREF="ch10_08.htm"
TITLE="10.8 Limitations"><LINK
REL="next"
HREF="ch11_01.htm"
TITLE="11. A Flock of awks"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="sed &amp; awk"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/ssrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch10_08.htm"
TITLE="10.8 Limitations"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.8 Limitations"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 10<BR>The Bottom Drawer</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="CHAPTER"
HREF="ch11_01.htm"
TITLE="11. A Flock of awks"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11. A Flock of awks"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SEDAWK-CH-10-SECT-9"
>10.9 Invoking awk Using the #! Syntax</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH10.HASH1"
></A
><A
CLASS="indexterm"
NAME="CH10.HASH2"
></A
>The &quot;#!&quot; syntax is an alternative syntax for invoking awk from a shell
script.  It has the advantage of allowing you to specify awk
parameters and filenames on the shell-script command line.  The &quot;#!&quot;
syntax is recognized on modern UNIX systems, but is not typically
found in older System V systems.  The best way to use this syntax is
to put the following line as the first line[6] 
of the shell script:</P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[6] Note that the pathname to use is system-specific.</P
></BLOCKQUOTE
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>#!/bin/awk -f</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>&quot;#!&quot; is followed by the pathname that locates your version of awk
and then the <I
CLASS="option"
>-f</I
> option.  After this line, 
you specify the awk script:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>#!/bin/awk -f
{ print $1 }</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>Note that no quotes are necessary around the script.  All lines in the
file after the first one will be executed as though they were
specified in a separate script file.</P
><P
CLASS="para"
>A few years ago, there was an interesting discussion on the Net
about the use of the &quot;#!&quot; syntax that clarified how it works.  The
discussion was prompted by a 4.2BSD user's observation that the shell
script below fails:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>#!/bin/awk
{ print $1 }</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>while the one below works:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>#!/bin/sh
/bin/awk '{ print $1 }'</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>The two responses that we saw were by Chris Torek and Guy Harris and we
will try to summarize their explanation.  The first script fails
because it passes the filename of the script as the first parameter
(<KBD
CLASS="command"
>argv[1]</KBD
> in C) and awk interprets it as the input
file and not the script file.  Because no script has been supplied,
awk produces a syntax error message.  In other words, if the name of
the shell script is &quot;myscript,&quot; then the first script executes as:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>/bin/awk myscript</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>If the script was changed to add the <I
CLASS="option"
>-f</I
> option, it
looks like this:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>#!/bin/awk -f
{ print $1 }</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>Then you enter the following command:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>myscript myfile</B
></CODE
></PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>It then executes as though you had typed:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>/bin/awk -f myscript myfile</PRE
></BLOCKQUOTE
></P
><BLOCKQUOTE
CLASS="note"
><P
CLASS="para"
><STRONG
>NOTE:</STRONG
> You can put only one parameter on the &quot;#!&quot; line. This line is
processed directly by the UNIX kernel; it is not processed by the shell
and thus cannot contain arbitrary shell constructs.</P
></BLOCKQUOTE
><P
CLASS="para"
>The &quot;#!&quot; syntax allows you to create shell scripts that pass
command-line parameters transparently to awk.  In other words, you can
pass awk parameters from the command line that invokes the shell
script.</P
><P
CLASS="para"
>For instance, we demonstrate passing parameters by changing
our sample awk script to expect a parameter <KBD
CLASS="command"
>n</KBD
>:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>{ print $1*n }</PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>Assuming that we have a test file in which the first field contains a
number that can be multiplied by <KBD
CLASS="command"
>n</KBD
>, we can invoke
the program, as follows:</P
><P
CLASS="para"
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <KBD
CLASS="command"
>myscript n=4 myfile</KBD
></PRE
></BLOCKQUOTE
></P
><P
CLASS="para"
>This spares us from having to pass &quot;$1&quot; as a shell variable and
assigning it to <KBD
CLASS="command"
>n</KBD
> as an awk parameter inside the
shell script.</P
><P
CLASS="para"
>The <KBD
CLASS="command"
>masterindex</KBD
>, described in
<A
CLASS="xref"
HREF="ch12_01.htm"
TITLE="Full-Featured Applications"
>Chapter 12</A
>, uses
the &quot;#!&quot;  syntax to invoke awk.  If your system does not support this
syntax, you can change the script by removing the &quot;#!&quot;, placing single
quotes around the entire script, and ending the script with &quot;$*&quot;, which
expands to all shell command-line parameters.</P
><P
CLASS="para"
>Well, we've quite nearly cleaned out this bottom drawer.  The
material in this chapter has a lot to do with how awk interfaces with
the UNIX operating system, invoking other utilities, opening and
closing files, and using pipes.  And, we have discussed some of
the admittedly crude techniques for debugging awk scripts.</P
><P
CLASS="para"
>We have covered all of the features of the awk programming
language.  We have concentrated on the POSIX specification for awk,
with only an occasional mention of actual awk implementations.  The
next chapter covers the differences among various awk versions.  
<A
CLASS="xref"
HREF="ch12_01.htm"
TITLE="Full-Featured Applications"
>Chapter 12</A
> is devoted to breaking down two large,
complex applications: a document spellchecker and an indexing program.
<A
CLASS="xref"
HREF="ch13_01.htm"
TITLE="A Miscellany of Scripts"
>Chapter 13, A Miscellany of Scripts</A
>, presents a variety of user-contributed
programs that provide additional examples of how to write programs.</P
><A
CLASS="indexterm"
NAME="AUTOID-8988"
></A
><A
CLASS="indexterm"
NAME="AUTOID-8989"
></A
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch10_08.htm"
TITLE="10.8 Limitations"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.8 Limitations"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="sed &amp; awk"
><IMG
SRC="../gifs/txthome.gif"
ALT="sed &amp; awk"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="CHAPTER"
HREF="ch11_01.htm"
TITLE="11. A Flock of awks"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11. A Flock of awks"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>10.8 Limitations</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>11. A Flock of awks</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The UNIX CD Bookshelf Navigation"><MAP
NAME="map"
><AREA
SHAPE="RECT"
COORDS="0,0,73,21"
HREF="../index.htm"
ALT="The UNIX CD Bookshelf"><AREA
SHAPE="RECT"
COORDS="74,0,163,21"
HREF="../upt/index.htm"
ALT="UNIX Power Tools"><AREA
SHAPE="RECT"
COORDS="164,0,257,21"
HREF="../unixnut/index.htm"
ALT="UNIX in a Nutshell"><AREA
SHAPE="RECT"
COORDS="258,0,321,21"
HREF="../vi/index.htm"
ALT="Learning the vi Editor"><AREA
SHAPE="RECT"
COORDS="322,0,378,21"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="379,0,438,21"
HREF="../ksh/index.htm"
ALT="Learning the Korn Shell"><AREA
SHAPE="RECT"
COORDS="439,0,514,21"
HREF="../lrnunix/index.htm"
ALT="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
