<HTML
><HEAD
>
<TITLE>[Chapter 11] A Flock of awks</TITLE>
<META
NAME="DC.title"
CONTENT="sed &amp; awk"><META
NAME="DC.creator"
CONTENT="Dale Dougherty &amp; Arnold Robbins"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1998-08-06T21:56:16Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-225-5"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="sed &amp; awk"><LINK
REL="prev"
HREF="ch10_09.htm"
TITLE="10.9 Invoking awk Using the #! Syntax"><LINK
REL="next"
HREF="ch11_02.htm"
TITLE="11.2 Freely Available awks"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="sed &amp; awk"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/ssrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch10_09.htm"
TITLE="10.9 Invoking awk Using the #! Syntax"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.9 Invoking awk Using the #! Syntax"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 11</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch11_02.htm"
TITLE="11.2 Freely Available awks"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.2 Freely Available awks"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="CHAPTER"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="SEDAWK-CH-11"
>11. A Flock of awks</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#SEDAWK-CH-11-SECT-1"
TITLE="11.1 Original awk"
>Original awk</A
><BR><A
CLASS="sect1"
HREF="ch11_02.htm"
TITLE="11.2 Freely Available awks"
>Freely Available awks</A
><BR><A
CLASS="sect1"
HREF="ch11_03.htm"
TITLE="11.3 Commercial awks"
>Commercial awks</A
><BR><A
CLASS="sect1"
HREF="ch11_04.htm"
TITLE="11.4 Epilogue"
>Epilogue</A
></P
><P
></P
></DIV
><P
CLASS="para"
>In the previous four chapters, we have looked at POSIX awk, with only
occasional reference to actual awk implementations that you would run.
In this chapter, we
focus on the different versions of awk that are available,
what features they do or do not have, and how you can get them.</P
><P
CLASS="para"
>First, we'll look at the original V7 version of awk.
The original awk lacks many of the features we've described, so this
section mostly describes what's not there.
Next, we'll look at the three versions whose source code is freely
available.
All of them have extensions to the POSIX standard.
Those that are common to all three versions are discussed
first.
Finally, we look at three commercial versions of awk.</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SEDAWK-CH-11-SECT-1"
>11.1 Original awk</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-8997"
></A
><A
CLASS="indexterm"
NAME="CH11.AWK1"
></A
><A
CLASS="indexterm"
NAME="CH11.AWK2"
></A
>In each of the sections that follow, we'll take a brief look at how
the original awk differs from POSIX awk.
Over the years, UNIX vendors have enhanced their versions of original
awk; you may need to write small test programs to see exactly what
features your old awk has or doesn't have.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-11-SECT-1.1"
>11.1.1 Escape Sequences</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-9008"
></A
>The original V7 awk only had &quot;\t&quot;, &quot;\n&quot;, &quot;\&quot;&quot;, and, of course, &quot;\\&quot;.
Most UNIX vendors have added some or all of &quot;\b&quot; and &quot;\r&quot; and &quot;\f&quot;.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-11-SECT-1.2"
>11.1.2 Exponentiation</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-9013"
></A
>Exponentiation (using the <B
CLASS="emphasis.bold"
>^</B
>, 
<B
CLASS="emphasis.bold"
>^=</B
>, <B
CLASS="emphasis.bold"
>**</B
>, 
and *<B
CLASS="emphasis.bold"
>*=</B
> operators)
is not in old awk.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-11-SECT-1.3"
>11.1.3 The C Conditional Expression</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-9022"
></A
><A
CLASS="indexterm"
NAME="AUTOID-9024"
></A
><A
CLASS="indexterm"
NAME="AUTOID-9027"
></A
>The three-argument conditional expression found in C, &quot;<EM
CLASS="emphasis"
>expr1</EM
>
<B
CLASS="emphasis.bold"
>?</B
>
<EM
CLASS="emphasis"
>expr2</EM
> <B
CLASS="emphasis.bold"
>:</B
> <EM
CLASS="emphasis"
>expr3</EM
>&quot; is not in old awk.
You must resort to a plain old <KBD
CLASS="command"
>if</KBD
>-<KBD
CLASS="command"
>else</KBD
> statement.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-11-SECT-1.4"
>11.1.4 Variables as Boolean Patterns</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-9040"
></A
><A
CLASS="indexterm"
NAME="AUTOID-9043"
></A
>You cannot use the value of a variable as a Boolean pattern.</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>flag { print &quot;...&quot; }</PRE
></BLOCKQUOTE
><P
CLASS="para"
>You must instead use a comparison expression.</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>flag != 0 { print &quot;...&quot; }</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-11-SECT-1.5"
>11.1.5 Faking Dynamic Regular Expressions</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-9052"
></A
><A
CLASS="indexterm"
NAME="AUTOID-9055"
></A
><A
CLASS="indexterm"
NAME="AUTOID-9057"
></A
>The original awk made it difficult to
use patterns dynamically because they had to be fixed when
the script was interpreted.
You can get around the problem of not being able to
use a variable as a regular expression by 
importing a shell variable inside an awk program.  The value
of the shell variable will be interpreted by awk as a constant.
Here's an example:</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>$ <CODE
CLASS="userinput"
><B
>cat awkro2</B
></CODE
>
#! /bin/sh
# assign shell's $1 to awk search variable
search=$1
awk '$1 ~ /'&quot;$search&quot;'/' acronyms</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The first line of the script makes the
variable assignment before awk is invoked. 
To get the shell to expand the variable inside the awk procedure, 
we enclose it within single, then double, quotation
marks.[1]
Thus, awk never sees the shell variable and evaluates
it as a constant string.</P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[1] Actually, this is the concatenation of single-quoted text with
double-quoted text with more single-quoted text to produce one
large quoted string.
This trick was used earlier, in <A
CLASS="xref"
HREF="ch06_01.htm"
TITLE="Advanced sed Commands"
>Chapter 6, Advanced sed Commands</A
>.</P
></BLOCKQUOTE
><P
CLASS="para"
>Here's another version that makes use of the Bourne shell variable
substitution feature.
Using this feature gives us an easy way to specify a default value for the
variable if, for instance, the user does not supply a command-line
argument. </P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>search=$1
awk '$1 ~ /'&quot;${search:-.*}&quot;'/' acronyms</PRE
></BLOCKQUOTE
><P
CLASS="para"
>The expression &quot;${search:-.*}&quot; tells the shell to use the value
of <B
CLASS="emphasis.bold"
>search</B
> if it is defined; if not, use &quot;.*&quot; as the value.
Here, &quot;.*&quot; is regular-expression syntax specifying any string of
characters; therefore, all entries are printed if no entry
is supplied on the command line.
Because the whole thing is inside double quotes, the shell does not
perform a wildcard expansion on &quot;.*&quot;.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-11-SECT-1.6"
>11.1.6 Control Flow</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-9072"
></A
><A
CLASS="indexterm"
NAME="AUTOID-9074"
></A
>In POSIX awk, if a program has just a <KBD
CLASS="command"
>BEGIN</KBD
> procedure, and
nothing else, awk will exit after executing that procedure.
The original awk is different; it will execute the <KBD
CLASS="command"
>BEGIN</KBD
> procedure
and then go on to process input, even if there are no pattern-action
statements.
You can force awk to exit by supplying <I
CLASS="filename"
>/dev/null</I
> on the command
line as a data file argument, or by using <KBD
CLASS="command"
>exit</KBD
>.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-9081"
></A
>In addition, the <KBD
CLASS="command"
>BEGIN</KBD
> and <KBD
CLASS="command"
>END</KBD
> procedures, if present, have
to be at the beginning and end of program, respectively.
Furthermore, you can only have one of each.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-11-SECT-1.7"
>11.1.7 Field Separating</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-9088"
></A
>Field separating works the same in old awk as it does in modern awk,
except that you can't use regular expressions.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-11-SECT-1.8"
>11.1.8 Arrays</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-9093"
></A
><A
CLASS="indexterm"
NAME="AUTOID-9095"
></A
><A
CLASS="indexterm"
NAME="AUTOID-9098"
></A
>There is no way in the original awk to delete an element from an array.
The best thing you can do is assign the empty string to the unwanted
array element, and then code your program to ignore array elements whose
values are empty.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-9102"
></A
>Along the same lines, <KBD
CLASS="command"
>in</KBD
> is not an operator in original awk; you
cannot use <KBD
CLASS="command"
>if (item in array)</KBD
> to see if an item is present.
Unfortunately, this forces you to loop through every item in an array
to see if the index you want is present.</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>for (item in array) {
	if (item == searchkey) {
		<EM
CLASS="emphasis"
>process array[item]</EM
>
		break
	}
}</PRE
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-11-SECT-1.9"
>11.1.9 The getline Function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-9111"
></A
>The original V7 awk did not have <B
CLASS="emphasis.bold"
>getline</B
>.
If your awk is really ancient, then <B
CLASS="emphasis.bold"
>getline</B
> may not
work for you.
Some vendors have
the simplest form of <B
CLASS="emphasis.bold"
>getline</B
>,
which reads the next record from the regular input stream,
and sets $0, <B
CLASS="emphasis.bold"
>NF</B
> and <B
CLASS="emphasis.bold"
>NR</B
> 
(there is no <B
CLASS="emphasis.bold"
>FNR</B
>, see below).
All of the other forms of <B
CLASS="emphasis.bold"
>getline</B
> are not available.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-11-SECT-1.10"
>11.1.10 Functions</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-9123"
></A
><A
CLASS="indexterm"
NAME="AUTOID-9125"
></A
><A
CLASS="indexterm"
NAME="AUTOID-9128"
></A
>The original awk had only a limited number of built-in string functions.
(See <A
CLASS="xref"
HREF="ch11_01.htm#SEDAWK-CH-11-TAB-1"
TITLE="Original awk's Built-In String Functions"
>Table 11.1</A
> and
<A
CLASS="xref"
HREF="ch11_01.htm#SEDAWK-CH-11-TAB-2"
TITLE="Original awk System Variables"
>Table 11.3</A
>.)</P
><TABLE
CLASS="table"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="SEDAWK-CH-11-TAB-1"
>Table 11.1: Original awk's Built-In String Functions</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Awk Function</TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Description</TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><B
CLASS="emphasis.bold"
>index</B
>(<EM
CLASS="emphasis"
>s</EM
>,<EM
CLASS="emphasis"
>t</EM
>)</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Returns position of substring <EM
CLASS="emphasis"
>t</EM
> in string <EM
CLASS="emphasis"
>s</EM
> or zero if not present.</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><B
CLASS="emphasis.bold"
>length</B
>(<EM
CLASS="emphasis"
>s</EM
>)</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns length of string <EM
CLASS="emphasis"
>s</EM
> or length of <B
CLASS="emphasis.bold"
>$0</B
> if no string is supplied.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><B
CLASS="emphasis.bold"
>split</B
>(<EM
CLASS="emphasis"
>s</EM
>,<EM
CLASS="emphasis"
>a</EM
>,<EM
CLASS="emphasis"
>sep</EM
>)</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Parses string <EM
CLASS="emphasis"
>s</EM
> into elements of array <EM
CLASS="emphasis"
>a</EM
> using field separator <EM
CLASS="emphasis"
>sep</EM
>; returns number of elements.  If <EM
CLASS="emphasis"
>sep</EM
> is not supplied, <B
CLASS="emphasis.bold"
>FS</B
> is used. Array splitting works the same way as field splitting.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><B
CLASS="emphasis.bold"
>sprintf</B
>(&quot;<EM
CLASS="emphasis"
>fmt</EM
>&quot;,<EM
CLASS="emphasis"
>expr</EM
>)</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Uses <KBD
CLASS="command"
>printf</KBD
> format specification for <EM
CLASS="emphasis"
>expr</EM
>.</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><B
CLASS="emphasis.bold"
>substr</B
>(<EM
CLASS="emphasis"
>s</EM
>,<EM
CLASS="emphasis"
>p</EM
>,<EM
CLASS="emphasis"
>n</EM
>)</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns substring of string <EM
CLASS="emphasis"
>s</EM
> at beginning position 
<EM
CLASS="emphasis"
>p</EM
> up to maximum length of <EM
CLASS="emphasis"
>n</EM
>.  If <EM
CLASS="emphasis"
>n</EM
> isn't supplied, the rest of the string from <EM
CLASS="emphasis"
>p</EM
> is used. </P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-9193"
></A
><A
CLASS="indexterm"
NAME="AUTOID-9195"
></A
><A
CLASS="indexterm"
NAME="AUTOID-9198"
></A
><A
CLASS="indexterm"
NAME="AUTOID-9201"
></A
><A
CLASS="indexterm"
NAME="AUTOID-9205"
></A
>Some built-in functions
can be classified as arithmetic functions.
Most of them take a numeric argument and return
a numeric value.  <A
CLASS="xref"
HREF="ch11_01.htm#SEDAWK-CH-11-TAB-1.5"
TITLE="Original awk's Built-In Arithmetic Functions"
>Table 11.2</A
> summarizes
these arithmetic functions.</P
><TABLE
CLASS="table"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="SEDAWK-CH-11-TAB-1.5"
>Table 11.2: Original awk's Built-In Arithmetic Functions</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Awk Function</TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Description</TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><B
CLASS="emphasis.bold"
>exp</B
>(<EM
CLASS="emphasis"
>x</EM
>)</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Returns <EM
CLASS="emphasis"
>e</EM
> to the power <EM
CLASS="emphasis"
>x</EM
>.</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><B
CLASS="emphasis.bold"
>int</B
>(<EM
CLASS="emphasis"
>x</EM
>)</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Returns truncated value of <EM
CLASS="emphasis"
>x</EM
>.</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><B
CLASS="emphasis.bold"
>log</B
>(<EM
CLASS="emphasis"
>x</EM
>)</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Returns natural logarithm (base-<EM
CLASS="emphasis"
>e</EM
>) of <EM
CLASS="emphasis"
>x</EM
>.</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><B
CLASS="emphasis.bold"
>sqrt</B
>(<EM
CLASS="emphasis"
>x</EM
>)</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Returns square root of <EM
CLASS="emphasis"
>x</EM
>.</TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>One of the nicest facilities in awk, the ability to define your own
functions, is also not available in original awk.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-11-SECT-1.11"
>11.1.11 Built-In Variables</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-9248"
></A
><A
CLASS="indexterm"
NAME="AUTOID-9251"
></A
><A
CLASS="indexterm"
NAME="AUTOID-9253"
></A
>In original awk only the variables shown in
<A
CLASS="xref"
HREF="ch11_01.htm#SEDAWK-CH-11-TAB-2"
TITLE="Original awk System Variables"
>Table 11.3</A
> are built in. </P
><TABLE
CLASS="table"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="SEDAWK-CH-11-TAB-2"
>Table 11.3: Original awk System Variables</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Variable</TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Description</TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><B
CLASS="emphasis.bold"
>FILENAME</B
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Current filename</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><B
CLASS="emphasis.bold"
>FS</B
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Field separator (a blank)</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><B
CLASS="emphasis.bold"
>NF</B
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Number of fields in current record</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><B
CLASS="emphasis.bold"
>NR</B
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Number of the current record</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><B
CLASS="emphasis.bold"
>OFMT</B
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Output format for numbers (%.6g)</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><B
CLASS="emphasis.bold"
>OFS</B
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Output field separator (a blank)</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><B
CLASS="emphasis.bold"
>ORS</B
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Output record separator (a newline)</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><B
CLASS="emphasis.bold"
>RS</B
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Record separator (a newline)</TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>OFMT</B
> does double duty, serving as the conversion format for the
<KBD
CLASS="command"
>print</KBD
> statement, as well as for converting numbers to strings.</P
></DIV
><A
CLASS="indexterm"
NAME="AUTOID-9300"
></A
><A
CLASS="indexterm"
NAME="AUTOID-9301"
></A
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch10_09.htm"
TITLE="10.9 Invoking awk Using the #! Syntax"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.9 Invoking awk Using the #! Syntax"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="sed &amp; awk"
><IMG
SRC="../gifs/txthome.gif"
ALT="sed &amp; awk"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch11_02.htm"
TITLE="11.2 Freely Available awks"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.2 Freely Available awks"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>10.9 Invoking awk Using the #! Syntax</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>11.2 Freely Available awks</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The UNIX CD Bookshelf Navigation"><MAP
NAME="map"
><AREA
SHAPE="RECT"
COORDS="0,0,73,21"
HREF="../index.htm"
ALT="The UNIX CD Bookshelf"><AREA
SHAPE="RECT"
COORDS="74,0,163,21"
HREF="../upt/index.htm"
ALT="UNIX Power Tools"><AREA
SHAPE="RECT"
COORDS="164,0,257,21"
HREF="../unixnut/index.htm"
ALT="UNIX in a Nutshell"><AREA
SHAPE="RECT"
COORDS="258,0,321,21"
HREF="../vi/index.htm"
ALT="Learning the vi Editor"><AREA
SHAPE="RECT"
COORDS="322,0,378,21"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="379,0,438,21"
HREF="../ksh/index.htm"
ALT="Learning the Korn Shell"><AREA
SHAPE="RECT"
COORDS="439,0,514,21"
HREF="../lrnunix/index.htm"
ALT="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
