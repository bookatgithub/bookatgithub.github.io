<HTML
><HEAD
>
<TITLE>[Chapter 11] 11.3 Commercial awks</TITLE>
<META
NAME="DC.title"
CONTENT="sed &amp; awk"><META
NAME="DC.creator"
CONTENT="Dale Dougherty &amp; Arnold Robbins"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1998-08-06T21:56:26Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-225-5"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch11_01.htm"
TITLE="11. A Flock of awks"><LINK
REL="prev"
HREF="ch11_02.htm"
TITLE="11.2 Freely Available awks"><LINK
REL="next"
HREF="ch11_04.htm"
TITLE="11.4 Epilogue"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="sed &amp; awk"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/ssrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch11_02.htm"
TITLE="11.2 Freely Available awks"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.2 Freely Available awks"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 11<BR>A Flock of awks</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch11_04.htm"
TITLE="11.4 Epilogue"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.4 Epilogue"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="SEDAWK-CH-11-SECT-3"
>11.3 Commercial awks</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH11.COMM"
></A
>There are also several commercial versions of awk.
In this section, we review the ones that we know about.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-11-SECT-3.1"
>11.3.1 MKS awk</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-10173"
></A
><A
CLASS="indexterm"
NAME="AUTOID-10175"
></A
>Mortice Kern Systems (MKS) in Waterloo, Ontario (Canada)[9]
supplies
awk as part of the MKS Toolkit for MS-DOS/Windows, OS/2, Windows 95,
and Windows NT.</P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[9] Mortice Kern Systems, 185 Columbia Street West, Waterloo, Ontario N2L 5Z5,
Canada. Phone: 1-800-265-2797 in North America, 1-519-884-2251 elsewhere.
URL is <A
CLASS="systemitem.sitename"
HREF="http://www.mks.com/"
>http://www.mks.com/</A
>.</P
></BLOCKQUOTE
><P
CLASS="para"
>The MKS version implements POSIX awk. It has the following extensions:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>The <B
CLASS="emphasis.bold"
>exp()</B
>, <B
CLASS="emphasis.bold"
>int()</B
>, <B
CLASS="emphasis.bold"
>log()</B
>, <B
CLASS="emphasis.bold"
>sqrt()</B
>,
<B
CLASS="emphasis.bold"
>tolower()</B
>, and <B
CLASS="emphasis.bold"
>toupper()</B
> functions use <B
CLASS="emphasis.bold"
>$0</B
> if given no
argument.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>An additional function <B
CLASS="emphasis.bold"
>ord()</B
> is available. This function takes
a string argument, and returns the numeric value of the first character
in the string. It is similar to the function of the same name in Pascal.</P
></LI
></UL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-11-SECT-3.2"
>11.3.2 Thompson Automation awk (tawk)</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH11.THOMP"
></A
><A
CLASS="indexterm"
NAME="CH11.THOMP2"
></A
><A
CLASS="indexterm"
NAME="CH11.TAWK5"
></A
><A
CLASS="indexterm"
NAME="AUTOID-10205"
></A
>Thompson Automation Software[10]
makes a version of awk (tawk)[11]
for MS-DOS/Windows, Windows 95 and NT, and Solaris.
Tawk is interesting on several counts.
First, unlike other versions of awk, which are interpreters, tawk
is a compiler.
Second, tawk comes with a screen-oriented debugger, written in awk!
The source for the debugger is included.
Third, tawk allows you to link your compiled program with arbitrary
functions written in C.
Tawk has received rave reviews in the <A
CLASS="systemitem.newsgroup"
HREF="news:comp.lang.awk"
>comp.lang.awk</A
> newsgroup.</P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[10] Thompson Automation Software, 5616 SW Jefferson, Portland OR 97221 U.S.A.
Phone: 1-800-944-0139 within the U.S., 1-503-224-1639 elsewhere.</P
><P
CLASS="para"
>[11] Michael Brennan,
in the <EM
CLASS="emphasis"
>mawk(1)</EM
> manpage, makes the following
statement:
&quot;Implementors of the AWK language have shown a consistent lack
of imagination when naming their programs.&quot;</P
></BLOCKQUOTE
><P
CLASS="para"
>Tawk comes with an <KBD
CLASS="command"
>awk</KBD
> interface that acts like POSIX awk,
compiling and running your program.
You can, however, compile your program into a standalone executable file.
The tawk compiler actually compiles into a compact intermediate form.
The intermediate representation is linked with a library that executes
the program when it is run, and it is at link time that other C routines
can be integrated with the awk program.</P
><P
CLASS="para"
>Tawk is a very full-featured implementation of awk. Besides implementing
the features of POSIX awk (based on new awk), it extends the language
in some fundamental ways, and also has a very large number of built-in
functions.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SEDAWK-CH-11-SECT-3.2.1"
>11.3.2.1 Tawk language extensions</A
></H4
><P
CLASS="para"
>This section provides a &quot;laundry list&quot; of the new features in tawk.
A full treatment of them is beyond the scope of this book; the tawk
documentation does a nice job of presenting them.
Hopefully, by now you should be familiar enough with awk that the value of
these features will be apparent.
Where relevant, we'll contrast the tawk feature with a comparable
feature in gawk.</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Additional special patterns, <KBD
CLASS="command"
>INIT</KBD
>, <KBD
CLASS="command"
>BEGINFILE</KBD
>, and <KBD
CLASS="command"
>ENDFILE</KBD
>.
<KBD
CLASS="command"
>INIT</KBD
> is like <KBD
CLASS="command"
>BEGIN</KBD
>, but the
actions in its procedure are run before[12]
those of the <KBD
CLASS="command"
>BEGIN</KBD
> procedure.<A
CLASS="indexterm"
NAME="AUTOID-10231"
></A
><A
CLASS="indexterm"
NAME="AUTOID-10233"
></A
><A
CLASS="indexterm"
NAME="AUTOID-10235"
></A
>
<KBD
CLASS="command"
>BEGINFILE</KBD
> and <KBD
CLASS="command"
>ENDFILE</KBD
>
provide you the ability to have per-file
start-up and clean-up actions.
Unlike using a rule based on
<B
CLASS="emphasis.bold"
>FNR == 1</B
>, these actions are executed even when files are empty.</P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[12] I confess that
I don't see the real usefulness of this. [A.R.]</P
></BLOCKQUOTE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-10242"
></A
>Controlled regular expressions.  You can add a flag to a regular
expression (&quot;/match me/&quot;) that tells tawk how to treat the regular expression.
An <B
CLASS="emphasis.bold"
>i</B
> flag (&quot;/match me/i&quot;) indicates
that case should be ignored when doing matching.
An <B
CLASS="emphasis.bold"
>s</B
> flag indicates that the shortest possible
text should be matched, instead of the longest.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-10249"
></A
>An <KBD
CLASS="command"
>abort </KBD
>[<EM
CLASS="emphasis"
>expr</EM
>] statement. This is similar to <KBD
CLASS="command"
>exit</KBD
>,
except that tawk exits immediately, bypassing any <KBD
CLASS="command"
>END</KBD
> procedure.
The <EM
CLASS="emphasis"
>expr</EM
>, if provided, becomes the return value from tawk to its
parent program.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-10258"
></A
><A
CLASS="indexterm"
NAME="AUTOID-10261"
></A
>True multidimensional arrays.  Conventional awk simulates multidimensional
arrays by concatenating the values of the subscripts, separated by the
value of <KBD
CLASS="command"
>SUBSEP</KBD
>, to generate a (hopefully) unique index in a regular
associative array.  While implementing this feature for compatibility, tawk
also provides true multidimensional arrays.</P
><BLOCKQUOTE
CLASS="screen"
><PRE
CLASS="screen"
>a[1][1] = &quot;hello&quot;
	a[1][2] = &quot;world&quot;
	for (i in a[1])
		print a[1][i]</PRE
></BLOCKQUOTE
><P
CLASS="para"
>Multidimensional arrays guarantee that the indices will be unique, and
also have the potential for greater performance when the number of elements
gets to be very large.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-10269"
></A
><A
CLASS="indexterm"
NAME="AUTOID-10272"
></A
>Automatic sorting of arrays. When looping over every element of an array using
the <KBD
CLASS="command"
>for (item in array)</KBD
> construct, tawk will first sort the indices
of the array, so that array elements are processed in order. You can
control whether this sorting is turned on or off, and if on, whether the
sorting is numeric or alphabetic, and in ascending or descending order.
While the sorting incurs a performance penalty, it is likely to be less
than the overhead of sorting the array yourself using awk code, or piping
the results into an external invocation of <KBD
CLASS="command"
>sort</KBD
>.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-10278"
></A
><A
CLASS="indexterm"
NAME="AUTOID-10280"
></A
><A
CLASS="indexterm"
NAME="AUTOID-10283"
></A
>Scope control for functions and variables.
You can declare that functions and variables are global to an
entire program, global within a &quot;module&quot; (source file), local to
a module, and local to a function.  Regular awk only gives you
global variables, global functions, and extra function parameters,
which act as local variables.
This feature is a very nice one, making it much easier to write
libraries of awk functions without having to worry about variable names
inadvertently conflicting with those in other library functions or in
the user's main program.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-10288"
></A
><A
CLASS="indexterm"
NAME="AUTOID-10291"
></A
><A
CLASS="indexterm"
NAME="AUTOID-10294"
></A
><B
CLASS="emphasis.bold"
>RS</B
> can be a regular expression. This is similar to gawk and mawk;
however, the regular expression cannot be one that requires more than
one character of look-ahead.  The text that matched <B
CLASS="emphasis.bold"
>RS</B
> is saved
in the variable <B
CLASS="emphasis.bold"
>RSM</B
> (record separator match), similar to
gawk's <B
CLASS="emphasis.bold"
>RT</B
> variable.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-10303"
></A
>Describing fields, instead of the field separators.
The variable <B
CLASS="emphasis.bold"
>FPAT</B
> can be a regular expression that describes the
contents of the fields. Successive occurrences of text that matches <B
CLASS="emphasis.bold"
>FPAT</B
>
become the contents of the fields.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-10309"
></A
><A
CLASS="indexterm"
NAME="AUTOID-10312"
></A
>Controlling the implicit file processing loop.
The variable <B
CLASS="emphasis.bold"
>ARGI</B
> tracks the position in <B
CLASS="emphasis.bold"
>ARGV</B
> of the
current input data file.  Unlike gawk's <B
CLASS="emphasis.bold"
>ARGIND</B
> variable,
assigning a value to <B
CLASS="emphasis.bold"
>ARGI</B
> can be used to make tawk skip over
input data files.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-10320"
></A
><A
CLASS="indexterm"
NAME="AUTOID-10323"
></A
>Fixed-length records.  By assigning a value to the <B
CLASS="emphasis.bold"
>RECLEN</B
> variable,
you can make tawk read records in fixed-length chunks.  If <B
CLASS="emphasis.bold"
>RS</B
> is
not matched within <B
CLASS="emphasis.bold"
>RECLEN</B
> characters, then tawk returns a record
that is <B
CLASS="emphasis.bold"
>RECLEN</B
> characters long.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-10331"
></A
><A
CLASS="indexterm"
NAME="AUTOID-10333"
></A
><A
CLASS="indexterm"
NAME="AUTOID-10335"
></A
>Hexadecimal constants.
You can specify C-style hexadecimal constants (<B
CLASS="emphasis.bold"
>0xDEAD </B
>and <B
CLASS="emphasis.bold"
>0xBEEF</B
>
being two rather famous ones) in tawk programs.
This helps when using the built-in bit manipulation functions
(see the next section).</P
></LI
></UL
><P
CLASS="para"
>Whew!  That's a rather long list, but these features bring
additional power to programming in awk.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="SEDAWK-CH-11-SECT-3.2.2"
>11.3.2.2 Additional built-in tawk functions</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-10344"
></A
><A
CLASS="indexterm"
NAME="AUTOID-10348"
></A
>Besides extending the language, tawk provides a large number of
additional built-in functions.
Here is another &quot;laundry list,&quot; this time of the different classes of
functions available. Each class has two or more functions associated
with it. We'll briefly describe the functionality of each class.</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Extended string functions.  Extensions to the standard string functions
and new string functions
allow you to match and substitute for subpatterns within patterns
(similar to gawk's <B
CLASS="emphasis.bold"
>gensub()</B
> function), assign to substrings within
strings, and split a string into an array based on a pattern that
matches elements, instead of the separator.  There are additional
<KBD
CLASS="command"
>printf</KBD
> formats, and string translation functions.
While undoubtedly some of these functions could be written as
user-defined functions, having them built in provides greater performance.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Bit manipulation functions. You can perform bitwise AND, OR, and XOR
operations on (integer) values.
These could also be written as user-defined functions, but with a loss
of performance.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>More I/O functions.  There is a suite of functions modeled after those
in the <EM
CLASS="emphasis"
>stdio</EM
>(3) library. In particular, the ability to seek within
a file, and do I/O in fixed-size amounts, is quite useful.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Directory operation functions. You can make, remove, and change directories,
as well as remove and rename files.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>File information functions. You can retrieve file permissions, size, and
modification times.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Directory reading functions. You can get the current directory name,
as well as read a list of all the filenames in a directory.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Time functions. There are functions to retrieve the current time of day,
and format it in various ways. These functions are not quite as flexible
as gawk's <B
CLASS="emphasis.bold"
>strftime()</B
> function.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Execution functions. You can sleep for a specific amount of time, and
start other functions running. Tawk's <B
CLASS="emphasis.bold"
>spawn()</B
> function is
interesting because it allows you to provide values for the new
program's environment, and also indicate whether the program should or
should not run asynchronously.
This is particularly valuable on non-UNIX systems, where the command
interpreters (such as MS-DOS's <KBD
CLASS="command"
>command.com</KBD
>) are quite limited.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>File locking. You can lock and unlock files and ranges within files.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Screen functions.  You can do screen-oriented I/O.  Under UNIX,
these functions are implemented on top of the <EM
CLASS="emphasis"
>curses</EM
>(3) library.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Packing and unpacking of binary data. You can specify how binary data
structures are laid out. This, together with the new I/O functions, makes
it possible to do binary I/O, something you would normally have to do in C
or C++.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Access to internal state. You can get or set the value of any awk variable
through function calls.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Access to MS-DOS low-level facilities. You can use system interrupts,
and peek and poke values at memory addresses. These features are
obviously for experts only.</P
></LI
></UL
><P
CLASS="para"
>From this list, it becomes clear that tawk provides a nice alternative
to C and to Perl for serious programming tasks.
As an example, the
screen functions and internal state functions are used to
implement the tawk debugger in awk.</P
></DIV
><A
CLASS="indexterm"
NAME="AUTOID-10386"
></A
><A
CLASS="indexterm"
NAME="AUTOID-10387"
></A
><A
CLASS="indexterm"
NAME="AUTOID-10388"
></A
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="SEDAWK-CH-11-SECT-3.3"
>11.3.3 Videosoft VSAwk</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-10392"
></A
><A
CLASS="indexterm"
NAME="AUTOID-10395"
></A
><A
CLASS="indexterm"
NAME="AUTOID-10397"
></A
>Videosoft[13]
sells software called VSAwk that brings awk-style
programming into the Visual Basic environment.
VSAwk is a Visual Basic
control that works in an event driven fashion.
Like awk, VSAwk gives you startup and cleanup actions, and splits
the input record into fields,
as well as the ability to write
expressions and call the awk built-in functions.</P
><BLOCKQUOTE
CLASS="footnote"
><P
CLASS="para"
>[13] Videosoft can be reached at
2625 Alcatraz Avenue, Suite 271,
Berkeley CA 94705 U.S.A.
Phone: 1-510-704-8200.
Fax: 1-510-843-0174.
Their site is <A
CLASS="systemitem.sitename"
HREF="http://www.videosoft.com"
>http://www.videosoft.com</A
>.</P
></BLOCKQUOTE
><P
CLASS="para"
>VSAwk resembles UNIX awk mostly in its data processing model, not
its syntax.
Nevertheless, it's interesting to see how people apply the concepts
from awk to the environment provided by a very different language.</P
></DIV
><A
CLASS="indexterm"
NAME="AUTOID-10403"
></A
><A
CLASS="indexterm"
NAME="AUTOID-10404"
></A
><A
CLASS="indexterm"
NAME="AUTOID-10405"
></A
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch11_02.htm"
TITLE="11.2 Freely Available awks"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.2 Freely Available awks"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="sed &amp; awk"
><IMG
SRC="../gifs/txthome.gif"
ALT="sed &amp; awk"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch11_04.htm"
TITLE="11.4 Epilogue"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.4 Epilogue"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>11.2 Freely Available awks</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>11.4 Epilogue</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><IMG
SRC="../gifs/smnavbar.gif"
USEMAP="#map"
BORDER="0"
ALT="The UNIX CD Bookshelf Navigation"><MAP
NAME="map"
><AREA
SHAPE="RECT"
COORDS="0,0,73,21"
HREF="../index.htm"
ALT="The UNIX CD Bookshelf"><AREA
SHAPE="RECT"
COORDS="74,0,163,21"
HREF="../upt/index.htm"
ALT="UNIX Power Tools"><AREA
SHAPE="RECT"
COORDS="164,0,257,21"
HREF="../unixnut/index.htm"
ALT="UNIX in a Nutshell"><AREA
SHAPE="RECT"
COORDS="258,0,321,21"
HREF="../vi/index.htm"
ALT="Learning the vi Editor"><AREA
SHAPE="RECT"
COORDS="322,0,378,21"
HREF="index.htm"
ALT="sed &amp; awk"><AREA
SHAPE="RECT"
COORDS="379,0,438,21"
HREF="../ksh/index.htm"
ALT="Learning the Korn Shell"><AREA
SHAPE="RECT"
COORDS="439,0,514,21"
HREF="../lrnunix/index.htm"
ALT="Learning the UNIX Operating System"></MAP
></DIV
></BODY
></HTML
>
