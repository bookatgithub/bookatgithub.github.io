<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>Adaptable Binary Function</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>Adaptable Binary Function</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "functors.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "concept.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/concept.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: functors</TD>
<TD Align=right VAlign=top><b>Component type</b>: concept</TD>
</TR>
</Table>

<h3>Description</h3>
An Adaptable Binary Function is a <A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">Binary Function</A> with
nested <tt>typedef</tt>s that define its argument types and result type.  <A href="#1">[1]</A> <A href="#2">[2]</A>
These nested <tt>typedef</tt>s make it possible to use function object adaptors.
<h3>Refinement of</h3>
<A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">Binary Function</A>
<h3>Associated types</h3>
<Table border>
<TR>
<TD VAlign=top>
First argument type
</TD>
<TD VAlign=top>
<tt>F::first_argument_type</tt>
</TD>
<TD VAlign=top>
The type of <tt>F</tt>'s first argument
</TD>
</TR>
<TR>
<TD VAlign=top>
Second argument type
</TD>
<TD VAlign=top>
<tt>F::second_argument_type</tt>
</TD>
<TD VAlign=top>
The type of <tt>F</tt>'s second argument
</TD>
</TR>
<TR>
<TD VAlign=top>
Result type
</TD>
<TD VAlign=top>
<tt>F::result_type</tt>
</TD>
<TD VAlign=top>
The type returned when the Binary Function is called
</TD>
</tr>
</table>
<h3>Notation</h3>
<Table>
<TR>
<TD VAlign=top>
<tt>F</tt>
</TD>
<TD VAlign=top>
A type that is a model of Binary Function
</TD>
</tr>
</table>
<h3>Definitions</h3>
<h3>Valid expressions</h3>
None, except for those defined by <A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">Binary Function</A>
<h3>Expression semantics</h3>
<h3>Complexity guarantees</h3>
<h3>Invariants</h3>
<h3>Models</h3>
<UL>
<LI>
<tt><A href="plus.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/plus.shtml">plus</A></tt>
<LI>
<tt><A href="project1st.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/project1st.shtml">project1st</A></tt>
<LI>
<tt><A href="pointer_to_binary_function.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/pointer_to_binary_function.shtml">pointer_to_binary_function</A></tt>
</UL>
<h3>Notes</h3>
<P><A name="1">[1]</A>
Note the implication of this: a function pointer <tt>T (*f)(X,Y)</tt> is
a <A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">Binary Function</A>, but not an Adaptable Binary Function: the
expressions <tt>f::first_argument_type</tt>, <tt>f::second_argument_type</tt>, and
<tt>f::result_type</tt> are nonsensical.
<P><A name="2">[2]</A>
When you define a class that is a model of Adaptable Binary Function,
you must provide these <tt>typedef</tt>s.  The easiest way to do this is to
derive the class from the base class <tt><A href="binary_function.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binary_function.shtml">binary_function</A></tt>.  This is an 
empty class, with no member functions or member variables; the only
reason it exists is to make defining Adaptable Binary Functions
more convenient. <tt><A href="binary_function.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binary_function.shtml">Binary_function</A></tt> is very similar to the base classes used by 
the <A href="iterator_tags.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/iterator_tags.shtml">iterator tag</A> functions.
<h3>See also</h3>
<A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">Binary Function</A>, <A href="AdaptableGenerator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableGenerator.shtml">Adaptable Generator</A>, <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A> 

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>