<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>Allocators</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>Allocators</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "allocators.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/allocators.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "overview.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/overview.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: allocators</TD>
<TD Align=right VAlign=top><b>Component type</b>: overview</TD>
</TR>
</Table>

<h3>Summary</h3>
Allocators encapsulate allocation and deallocation of memory.  They
provide a low-level interface that permits efficient allocation of 
many small objects; different allocator types represent different
schemes for memory management.
<P>
Note that allocators simply allocate and deallocate memory, as opposed
to creating and destroying objects.  The STL also includes several
low-level algorithms for manipulating uninitialized memory.
<P>
Note also that allocators do not attempt to encapsulate multiple
memory models.  The C++ language only defines a single memory model
(the difference of two pointers, for example, is always <tt>ptrdiff_t</tt>),
and this memory model is the only one that allocators support. 
<i>This is a major change from the definition of allocators in the
original STL.</i> <A href="#1">[1]</A>
<h3>Description</h3>
The details of the allocator interface are still subject to change,
and we do not guarantee that specific member functions will remain in
future versions.  You should think of an allocator as a &quot;black box&quot;.
That is, you may select a container's memory allocation strategy by
instantiating the container template with a particular allocator <A href="#2">[2]</A>,
but you should not make any assumptions about how the container 
actually uses the allocator.  
<P>
The available allocators are as follows.  In most cases you shouldn't
have to worry about the distinction: the default allocator, <tt>alloc</tt>,
is usually the best choice.
<Table border>
<TR>
<TD VAlign=top>
<tt>alloc</tt>
</TD>
<TD VAlign=top>
The default allocator.  It is thread-safe, and usually has the best
   performance characteristics.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>pthread_alloc</tt>
</TD>
<TD VAlign=top>
A thread-safe allocator that uses a different memory pool for
   each thread;  you can only 
   use <tt>pthread_alloc</tt> if your operating system provides pthreads.
   <tt>Pthread_alloc</tt> is usually faster than <tt>alloc</tt>, especially on
   multiprocessor systems.  It can, however, cause
   resource fragmentation: memory deallocated in one
   thread is not available for use by other threads.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>single_client_alloc</tt>
</TD>
<TD VAlign=top>
A fast but thread-unsafe allocator.  In programs that only have
   one thread, this allocator might be faster than <tt>alloc</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>malloc_alloc</tt>
</TD>
<TD VAlign=top>
An allocator that simply uses the standard library function <tt>malloc</tt>.
   It is thread-safe but slow; the main reason why you might
   sometimes want to use it is to get more useful information from
   bounds-checking or leak-detection tools while you are debugging.
</TD>
</tr>
</table>
<h3>Examples</h3>
<pre>
vector&lt;double&gt; V(100, 5.0);     // Uses the default allocator.
vector&lt;double, single_client_alloc&gt; local(V.begin(), V.end());
</pre>
<h3>Concepts</h3>
<UL>
<LI>
Allocator
</UL>
<h3>Types</h3>
<UL>
<LI>
<tt>alloc</tt>
<LI>
<tt>pthread_alloc</tt>
<LI>
<tt>single_client_alloc</tt>
<LI>
<tt>malloc_alloc</tt>
<LI>
<tt><A href="raw_storage_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/raw_storage_iterator.shtml">raw_storage_iterator</A></tt>
</UL>
<h3>Functions</h3>
<UL>
<LI>
<tt><A href="construct.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/construct.shtml">construct</A></tt>
<LI>
<tt><A href="destroy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/destroy.shtml">destroy</A></tt>
<LI>
<tt><A href="uninitialized_copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/uninitialized_copy.shtml">uninitialized_copy</A></tt>
<LI>
<tt><A href="uninitialized_fill.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/uninitialized_fill.shtml">uninitialized_fill</A></tt>
<LI>
<tt><A href="uninitialized_fill_n.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/uninitialized_fill_n.shtml">uninitialized_fill_n</A></tt>
<LI>
<tt><A href="get_temporary_buffer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/get_temporary_buffer.shtml">get_temporary_buffer</A></tt>
<LI>
<tt><A href="return_temporary_buffer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/return_temporary_buffer.shtml">return_temporary_buffer</A></tt>
</UL>
<h3>Notes</h3>
<P><A name="1">[1]</A>
The reason for this change is that the new interface reduces
memory fragmentation, and that it allows an implementation that
is both efficient and thread-safe.
<P><A name="2">[2]</A>
Different containers may use different allocators.  You might,
for example, have some containers that use the default allocator
<tt>alloc</tt> and others that use <tt>pthread_alloc</tt>.  Note, however, that
<tt>vector&lt;int&gt;</tt> and <tt>vector&lt;int, pthread_alloc&gt;</tt> are distinct types.
<h3>See also</h3>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>