<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>Front Insertion Sequence</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>Front Insertion Sequence</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "containers.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/containers.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "concept.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/concept.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: containers</TD>
<TD Align=right VAlign=top><b>Component type</b>: concept</TD>
</TR>
</Table>

<h3>Description</h3>
A Front Insertion Sequence is a <A href="Sequence.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Sequence.shtml">Sequence</A>
where it is possible to insert an element at the beginning, or to
access the first element, in amortized constant time.  Front Insertion
Sequences have special member functions as a shorthand for those
operations.
<h3>Refinement of</h3>
<A href="Sequence.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Sequence.shtml">Sequence</A>
<h3>Associated types</h3>
None, except for those of <A href="Sequence.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Sequence.shtml">Sequence</A>.
<h3>Notation</h3>
<Table>
<TR>
<TD VAlign=top>
<tt>X</tt>
</TD>
<TD VAlign=top>
A type that is a model of Front Insertion Sequence
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>a</tt>
</TD>
<TD VAlign=top>
Object of type <tt>X</tt>
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>T</tt>
</TD>
<TD VAlign=top>
The value type of <tt>X</tt>
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>t</tt>
</TD>
<TD VAlign=top>
Object of type <tt>T</tt>
</TD>
</tr>
</table>
<h3>Definitions</h3>
<h3>Valid expressions</h3>
In addition to the expressions defined in
<A href="Sequence.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Sequence.shtml">Sequence</A>, the following expressions must be
valid.
<Table border>
<TR>
<TH>
Name
</TH>
<TH>
Expression
</TH>
<TH>
Type requirements
</TH>
<TH>
Return type
</TH>
</TR>
<TR>
<TD VAlign=top>
Front
</TD>
<TD VAlign=top>
<tt>a.front()</tt> <A href="#1">[1]</A>
</TD>
<TD VAlign=top>
&nbsp;
</TD>
<TD VAlign=top>
<tt>reference</tt> if <tt>a</tt> is mutable, otherwise <tt>const_reference</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
Push front
</TD>
<TD VAlign=top>
<tt>a.push_front(t)</tt>
</TD>
<TD VAlign=top>
<tt>a</tt> is mutable.
</TD>
<TD VAlign=top>
<tt>void</tt>
</TD>
</TR>
<TR>
<TD VAlign=top>
Pop front
</TD>
<TD VAlign=top>
<tt>a.pop_front()</tt>
</TD>
<TD VAlign=top>
<tt>a</tt> is mutable.
</TD>
<TD VAlign=top>
<tt>void</tt>
</TD>
</tr>
</table>
<h3>Expression semantics</h3>
<Table border>
<TR>
<TH>
Name
</TH>
<TH>
Expression
</TH>
<TH>
Precondition
</TH>
<TH>
Semantics
</TH>
<TH>
Postcondition
</TH>
</TR>
<TR>
<TD VAlign=top>
Front
</TD>
<TD VAlign=top>
<tt>a.front()</tt> <A href="#1">[1]</A>
</TD>
<TD VAlign=top>
<tt>!a.empty()</tt>
</TD>
<TD VAlign=top>
Equivalent to <tt>*(a.begin())</tt>.
</TD>
<TD VAlign=top>
&nbsp;
</TD>
</TR>
<TR>
<TD VAlign=top>
Push front
</TD>
<TD VAlign=top>
<tt>a.push_front(t)</tt>
</TD>
<TD VAlign=top>
&nbsp;
</TD>
<TD VAlign=top>
Equivalent to <tt>a.insert(a.begin(), t)</tt>
</TD>
<TD VAlign=top>
<tt>a.size</tt> is incremented by 1. <tt>a.front()</tt> is a copy of <tt>t</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
Pop front
</TD>
<TD VAlign=top>
<tt>a.pop_front()</tt>
</TD>
<TD VAlign=top>
<tt>!a.empty()</tt>
</TD>
<TD VAlign=top>
Equivalent to <tt>a.erase(a.begin())</tt>
</TD>
<TD VAlign=top>
<tt>a.size()</tt> is decremented by 1.
</TD>
</tr>
</table>
<h3>Complexity guarantees</h3>
Front, push front, and pop front are amortized constant time.
<A href="#2">[2]</A>
<h3>Invariants</h3>
<Table border>
<TR>
<TD VAlign=top>
Symmetry of push and pop
</TD>
<TD VAlign=top>
<tt>push_front()</tt> followed by <tt>pop_front()</tt> is a null operation.
</TD>
</tr>
</table>
<h3>Models</h3>
<UL>
<LI>
 <A href="List.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/List.shtml">list</A>
<LI>
 <A href="Deque.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Deque.shtml">deque</A>
</UL>
<h3>Notes</h3>
<P><A name="1">[1]</A>
Front is actually defined in <A href="Sequence.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Sequence.shtml">Sequence</A>,
since it is always possible to implement it in amortized constant
time.  Its definition is repeated here, along with push front and pop
front, in the interest of clarity.
<P><A name="2">[2]</A>
This complexity guarantee is the only reason that <tt>front()</tt>,
<tt>push_front()</tt>, and <tt>pop_front()</tt> are defined: they
provide no additional functionality.  Not every sequence must define
these operations, but it is guaranteed that they are efficient if they
exist at all.
<h3>See also</h3>
<A href="Container.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Container.shtml">Container</A>,
<A href="Sequence.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Sequence.shtml">Sequence</A>,
<A href="BackInsertionSequence.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BackInsertionSequence.shtml">Back Insertion Sequence</A>,
<tt><A href="Deque.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Deque.shtml">deque</A></tt>,
<tt><A href="List.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/List.shtml">list</A></tt>,
<tt><A href="Slist.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Slist.shtml">slist</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>