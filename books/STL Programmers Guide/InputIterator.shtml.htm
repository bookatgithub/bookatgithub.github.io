<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>Input Iterator</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>Input Iterator</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "iterators.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/iterators.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "concept.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/concept.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: iterators</TD>
<TD Align=right VAlign=top><b>Component type</b>: concept</TD>
</TR>
</Table>

<h3>Description</h3>
An Input Iterator is an iterator that may be dereferenced to refer to some
object, and that may be incremented to obtain the next iterator in
a sequence.  Input Iterators are not required to be mutable.
<h3>Refinement of</h3>
<A href="trivial.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/trivial.shtml">Trivial iterator</A>. 
<h3>Associated types</h3>
<Table border>
<TR>
<TD VAlign=top>
Value type
</TD>
<TD VAlign=top>
The type of the value obtained by dereferencing an Input Iterator
</TD>
</TR>
<TR>
<TD VAlign=top>
Distance type
</TD>
<TD VAlign=top>
A signed integral type used to represent the distance from one
   iterator to another, or the number of elements in a range.
</TD>
</tr>
</table>
<h3>Notation</h3>
<Table>
<TR>
<TD VAlign=top>
<tt>X</tt>
</TD>
<TD VAlign=top>
A type that is a model of Input Iterator
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>T</tt>
</TD>
<TD VAlign=top>
The value type of <tt>X</tt>
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>i</tt>, <tt>j</tt>
</TD>
<TD VAlign=top>
Object of type <tt>X</tt>
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>t</tt>
</TD>
<TD VAlign=top>
Object of type <tt>T</tt>
</TD>
</tr>
</table>
<h3>Definitions</h3>
An iterator is <i>past-the-end</i> if it points beyond the last element
of a container.  Past-the-end values are nonsingular and nondereferenceable.
<P>
An iterator is <i>valid</i> if it is dereferenceable or past-the-end.
<P>
An iterator <tt>i</tt> is <i>incrementable</i> if there is a
&quot;next&quot; iterator, that is, if <tt>++i</tt> is well-defined.
Past-the-end iterators are not incrementable.
<P>
An Input Iterator <tt>j</tt> is <i>reachable</i> from an Input
Iterator <tt>i</tt> if, after applying <tt>operator++</tt> to
<tt>i</tt> a finite number of times, <tt>i == j</tt>. <A href="#1">[1]</A>
<P>
The notation <tt>[i,j)</tt> refers to a <i>range</i> of iterators beginning with
<tt>i</tt> and up to but not including <tt>j</tt>.
<P>
The range <tt>[i,j)</tt> is a <i>valid range</i> if 
both <tt>i</tt> and <tt>j</tt> are valid iterators, 
and <tt>j</tt> is reachable from <tt>i</tt> <A href="#2">[2]</A>.
<h3>Valid expressions</h3>
In addition to the expressions defined in <A href="trivial.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/trivial.shtml">Trivial Iterator</A>,
the following expressions must be valid.
<Table border>
<TR>
<TH>
Name
</TH>
<TH>
Expression
</TH>
<TH>
Type requirements
</TH>
<TH>
Return type
</TH>
</TR>
<TR>
<TD VAlign=top>
Preincrement
</TD>
<TD VAlign=top>
<tt>++i</tt>
</TD>
<TD VAlign=top>
&nbsp;
</TD>
<TD VAlign=top>
<tt>X&amp;</tt>
</TD>
</TR>
<TR>
<TD VAlign=top>
Postincrement
</TD>
<TD VAlign=top>
<tt>(void)i++</tt>
</TD>
<TD VAlign=top>
&nbsp;
</TD>
<TD VAlign=top>
&nbsp;
</TD>
</TR>
<TR>
<TD VAlign=top>
Postincrement and dereference
</TD>
<TD VAlign=top>
<tt>*i++</tt>
</TD>
<TD VAlign=top>
&nbsp;
</TD>
<TD VAlign=top>
<tt>T</tt>
</TD>
</tr>
</table>
<h3>Expression semantics</h3>
<Table border>
<TR>
<TH>
Name
</TH>
<TH>
Expression
</TH>
<TH>
Precondition
</TH>
<TH>
Semantics
</TH>
<TH>
Postcondition
</TH>
</TR>
<TR>
<TD VAlign=top>
Dereference
</TD>
<TD VAlign=top>
<tt>*t</tt>
</TD>
<TD VAlign=top>
<tt>i</tt> is incrementable
</TD>
<TD VAlign=top>
&nbsp;
</TD>
<TD VAlign=top>
&nbsp;
</TD>
</TR>
<TR>
<TD VAlign=top>
Preincrement
</TD>
<TD VAlign=top>
<tt>++i</tt>
</TD>
<TD VAlign=top>
<tt>i</tt> is dereferenceable
</TD>
<TD VAlign=top>
&nbsp;
</TD>
<TD VAlign=top>
<tt>i</tt> is dereferenceable or past-the-end <A href="#3">[3]</A> <A href="#4">[4]</A>
</TD>
</TR>
<TR>
<TD VAlign=top>
Postincrement
</TD>
<TD VAlign=top>
<tt>(void)i++</tt>
</TD>
<TD VAlign=top>
<tt>i</tt> is dereferenceable
</TD>
<TD VAlign=top>
Equivalent to <tt>(void)++i</tt>
</TD>
<TD VAlign=top>
<tt>i</tt> is dereferenceable or past-the-end <A href="#3">[3]</A> <A href="#4">[4]</A>
</TD>
</TR>
<TR>
<TD VAlign=top>
Postincrement and dereference
</TD>
<TD VAlign=top>
<tt>*i++</tt>
</TD>
<TD VAlign=top>
<tt>i</tt> is dereferenceable
</TD>
<TD VAlign=top>
Equivalent to <tt>{T t = *i; ++i; return t;}</tt>
</TD>
<TD VAlign=top>
<tt>i</tt> is dereferenceable or past-the-end <A href="#3">[3]</A> <A href="#4">[4]</A>
</TD>
</tr>
</table>
<h3>Complexity guarantees</h3>
All operations are amortized constant time.
<h3>Invariants</h3>
<h3>Models</h3>
<UL>
<LI>
 <A href="istream_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/istream_iterator.shtml">istream_iterator</A>
</UL>
<h3>Notes</h3>
<P><A name="1">[1]</A>
<tt>i == j</tt> does not imply <tt>++i == ++j</tt>.
<P><A name="2">[2]</A>
Every iterator in a valid range <tt>[i, j)</tt> is dereferenceable,
and <tt>j</tt> is either dereferenceable or past-the-end.  The fact
that every iterator in the range is dereferenceable follows from the fact
that incrementable iterators must be deferenceable.
<P><A name="3">[3]</A>
After executing <tt>++i</tt>, it is not required that copies of the old
     value of <tt>i</tt> be dereferenceable or that they be in the domain of 
     <tt>operator==</tt>.
<P><A name="4">[4]</A>
It is not guaranteed that it is possible to pass through the same
     input iterator twice.
<h3>See also</h3>
<A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">Output Iterator</A>, <A href="Iterators.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Iterators.shtml">Iterator overview</A>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>