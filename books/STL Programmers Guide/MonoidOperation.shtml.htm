<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>MonoidOperation</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>MonoidOperation</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "functors.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "concept.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/concept.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: functors</TD>
<TD Align=right VAlign=top><b>Component type</b>: concept</TD>
</TR>
</Table>

<h3>Description</h3>
A Monoid Operation is a special sort of <A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">Binary Function</A>.  A
<A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">Binary Function</A> must satisfy three conditions in order to
be a Monoid Operation.  First, its first argument type and second
argument type must be the same, and its result type must be the
same as its argument type.  Second, there must be an identity
element.  Third, the operation must be associative.  Examples
of Monoid Operations are addition and multiplication. <A href="#1">[1]</A>
<h3>Refinement of</h3>
<A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">Binary Function</A>
<h3>Associated types</h3>
<Table border>
<TR>
<TD VAlign=top>
Argument type
</TD>
<TD VAlign=top>
The type of the Monoid Operation's first argument and second argument,
   and also the type returned when the Monoid Operation is returned.
</TD>
</tr>
</table>
<h3>Notation</h3>
<Table>
<TR>
<TD VAlign=top>
<tt>F</tt>
</TD>
<TD VAlign=top>
A type that is a model of MonoidOperation
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>T</tt>
</TD>
<TD VAlign=top>
<tt>F</tt>'s argument type.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>f</tt>
</TD>
<TD VAlign=top>
Object of type <tt>F</tt>
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>x</tt>, <tt>y</tt>, <tt>z</tt>
</TD>
<TD VAlign=top>
Objects of type <tt>T</tt>
</TD>
</tr>
</table>
<h3>Definitions</h3>
A type <tt>F</tt> that is a model of <A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">binary function</A> is <i>associative</i> if
<tt>F</tt>'s first argument type, second argument type, and result type are
the same, and if, for every object <tt>f</tt> of type <tt>F</tt> and for every 
objects <tt>x</tt>, <tt>y</tt>, and <tt>z</tt> of <tt>F</tt>'s argument type, 
<tt>f(x, f(y, z))</tt> is the same as <tt>f(f(x, y), z)</tt>. <A href="#2">[2]</A>
<h3>Valid Expressions</h3>
In addition to the expressions described in the <A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">Binary Function</A>
requirements, the following expressions must be valid.
<Table border>
<TR>
<TH>
Name
</TH>
<TH>
Expression
</TH>
<TH>
Type requirements
</TH>
<TH>
Return type
</TH>
</TR>
<TR>
<TD VAlign=top>
Function call
</TD>
<TD VAlign=top>
<tt>f(x, y)</tt>
</TD>
<TD VAlign=top>
&nbsp;
</TD>
<TD VAlign=top>
<tt>T</tt>
</TD>
</TR>
<TR>
<TD VAlign=top>
Identity element
</TD>
<TD VAlign=top>
<tt>identity_element(f)</tt> <A href="#3">[3]</A>
</TD>
<TD VAlign=top>
&nbsp;
</TD>
<TD VAlign=top>
<tt>T</tt>
</TD>
</tr>
</table>
<h3>Expression semantics</h3>
<Table border>
<TR>
<TH>
Name
</TH>
<TH>
Expression
</TH>
<TH>
Precondition
</TH>
<TH>
Semantics
</TH>
<TH>
Postcondition
</TH>
</TR>
<TR>
<TD VAlign=top>
Function call
</TD>
<TD VAlign=top>
<tt>f(x, y)</tt>
</TD>
<TD VAlign=top>
<tt>x</tt> and <tt>y</tt> are in the domain of <tt>f</tt>.
</TD>
<TD VAlign=top>
Calls <tt>f</tt> with <tt>x</tt> and <tt>y</tt> as arguments.
</TD>
<TD VAlign=top>
&nbsp;
</TD>
</TR>
<TR>
<TD VAlign=top>
Identity element
</TD>
<TD VAlign=top>
<tt>identity_element(f)</tt>
</TD>
<TD VAlign=top>
&nbsp;
</TD>
<TD VAlign=top>
Returns the monoid's identity element.  That is, the return value
   is a value <tt>id</tt> of type <tt>T</tt> such that, for all <tt>x</tt> in the domain
   of <tt>f</tt>, <tt>f(x, id)</tt> and <tt>f(id, x)</tt> both return <tt>x</tt>.
</TD>
<TD VAlign=top>
&nbsp;
</TD>
</tr>
</table>
<h3>Complexity guarantees</h3>
<h3>Invariants</h3>
<Table border>
<TR>
<TD VAlign=top>
Associativity
</TD>
<TD VAlign=top>
For any <tt>x</tt>, <tt>y</tt>, and <tt>z</tt> of type <tt>T</tt>, <tt>f(x, f(y, z))</tt> and
   <tt>f(f(x, y), z)</tt> return the same value. <A href="#4">[4]</A>
</TD>
</TR>
<TR>
<TD VAlign=top>
Identity element.
</TD>
<TD VAlign=top>
There exists some element <tt>id</tt> of type <tt>T</tt> such that, for all
   <tt>x</tt> of type <tt>T</tt>, <tt>f(x, id)</tt> and <tt>f(id, x)</tt> both return <tt>x</tt>.
   The expression <tt>identity_element(f)</tt> returns <tt>id</tt>.
</TD>
</tr>
</table>
<h3>Models</h3>
<UL>
<LI>
<tt><A href="plus.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/plus.shtml">plus</A>&lt;int&gt;</tt>
<LI>
<tt><A href="times.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/times.shtml">multiplies</A>&lt;double&gt;</tt>
</UL>
<h3>Notes</h3>
<P><A name="1">[1]</A>
A monoid is one of three closely related algebraic structures.
A <i>semigroup</i> is a set S, and a binary operation *, with the
properties that * is closed on S (that is, if x and y are elements of
S then x * y is also a member of S) and that * is associative (that
is, if x, y, and z are elements of S, then x * (y * z) = (x * y) * z).
A <i>monoid</i> is a semigroup that has an identity element.  That is,
there exists some element id such that, for all x in S, x * id = id * x =
x.  Finally, a <i>group</i> is a monoid with the property that every element
has an inverse.  That is, for every x in S, there exists an element
xi such that x * xi = xi * x = id.  As an example, the set of 
real numbers under multiplication is a monoid (the identity element
is 1), but it isn't a group.  It isn't a group because 0 has no inverse.
<P><A name="2">[2]</A>
Mathematics textbooks typically write this as an equation,
instead of using words like &quot;is the same as&quot;.  We can't use
equality in this definition, however, because <tt>F</tt>'s argument type
might not be <A href="EqualityComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/EqualityComparable.shtml">equality comparable</A>.  If <tt>F</tt>'s argument typeis
<A href="EqualityComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/EqualityComparable.shtml">equality comparable</A>, however, then these two expression are expected
to be equal: the condition of associativity becomes
<tt>f(x, f(y, z)) == f(f(x, y), z)</tt>
<P><A name="3">[3]</A>
This is implemented as an overloaded function.  The function
<tt>identity_element</tt> is defined, in <A href="javascript:if(confirm('http://codeguru.developer.com/cpp/stlguide/function.h  \n\nThis file was not retrieved by Teleport Pro, because the server reports that an error occurred that prevented retrieval.  \n\nDo you want to open it from the server?'))window.location='http://codeguru.developer.com/cpp/stlguide/function.h'" tppabs="http://codeguru.developer.com/cpp/stlguide/function.h">function.h</A>, for arguments of
type <tt><A href="plus.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/plus.shtml">plus</A>&lt;T&gt;</tt> and <tt><A href="times.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/times.shtml">multiplies</A>&lt;T&gt;</tt>.  If you define a new
Monoid Operation <tt>F</tt> (matrix multiplication, for example), you must
overload <tt>identity_element</tt> for arguments of type <tt>F</tt>.
<P><A name="4">[4]</A>
Associativity is not the same as commutativity.  That is, the requirement
that <tt>x * (y * z) == (x * y) * z</tt> is completely unrelated to
the requirement that <tt>x * y == y * x</tt>.  Monoid operations are
required to be associative, but they are not required to be 
commutative.  As an example, square matrices under multiplication
form a monoid even though matrix multiplication is not commutative.
<h3>See also</h3>
<A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">Binary Function</A>, <tt><A href="plus.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/plus.shtml">plus</A></tt>, <tt><A href="times.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/times.shtml">multiplies</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>