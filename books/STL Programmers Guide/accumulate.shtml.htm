<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>accumulate</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>accumulate</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<tt>Accumulate</tt> is an overloaded name; there are actually two <tt>accumulate</tt>
functions.
<pre>
template &lt;class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>, class T&gt;
T accumulate(InputIterator first, InputIterator last, T init);

template &lt;class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>, class T, class <A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">BinaryFunction</A>&gt;
T accumulate(InputIterator first, InputIterator last, T init,
             BinaryFunction binary_op);
</pre>                   
<h3>Description</h3>
<tt>Accumulate</tt> is a generalization of summation: it computes the sum
(or some other binary operation) of <tt>init</tt> and all of the elements
in the range <tt>[first, last)</tt>.  <A href="#1">[1]</A>  
<P>
The <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object</A> <tt>binary_op</tt> is not required to be either
commutative or associative: the order of all of <tt>accumulate</tt>'s operations
is specified.  The result is first initialized to <tt>init</tt>.  Then, for each
iterator <tt>i</tt> in <tt>[first, last)</tt>, in order from beginning to end,
it is updated by <tt>result = result + *i</tt> (in the first version) or
<tt>result = binary_op(result, *i)</tt> (in the second version).
<h3>Definition</h3>
Defined in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.
<h3>Requirements on types</h3>
For the first version, the one that takes two arguments:
<UL>
<LI>
<tt>InputIterator</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>T</tt> is a model of <A href="Assignable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Assignable.shtml">Assignable</A>.
<LI>
If <tt>x</tt> is an object of type <tt>T</tt> and <tt>y</tt> is an object of
   <tt>InputIterator</tt>'s value type, then <tt>x + y</tt> is defined.
<LI>
The return type of <tt>x + y</tt> is convertible to <tt>T</tt>.
</UL>
For the second version, the one that takes three arguments:
<UL>
<LI>
<tt>InputIterator</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>T</tt> is a model of <A href="Assignable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Assignable.shtml">Assignable</A>.
<LI>
<tt>BinaryFunction</tt> is a model of <A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">Binary Function</A>.
<LI>
<tt>T</tt> is convertible to <tt>BinaryFunction</tt>'s first argument type.
<LI>
The value type of <tt>InputIterator</tt> is convertible to
   <tt>BinaryFunction</tt>'s second argument type.
<LI>
<tt>BinaryFunction</tt>'s return type is convertible to <tt>T</tt>.
</UL>
<h3>Preconditions</h3>
<UL>
<LI>
<tt>[first, last)</tt> is a valid range.
</UL>
<h3>Complexity</h3>
Linear.  Exactly <tt>last - first</tt> invocations of the binary operation.
<h3>Example</h3>
<pre>
int main()
{
  int A[] = {1, 2, 3, 4, 5};
  const int N = sizeof(A) / sizeof(int);

  cout &lt;&lt; &quot;The sum of all elements in A is &quot; 
       &lt;&lt; accumulate(A, A + N, 0)
       &lt;&lt; endl;

  cout &lt;&lt; &quot;The product of all elements in A is &quot;
       &lt;&lt; accumulate(A, A + N, 1, multiplies&lt;int&gt;())
       &lt;&lt; endl;
}
</pre>
<h3>Notes</h3>
<P><A name="1">[1]</A>
There are several reasons why it is important that <tt>accumulate</tt>
starts with the value <tt>init</tt>.  One of the most basic is that this
allows <tt>accumulate</tt> to have a well-defined result even if <tt>[first,
last)</tt> is an empty range: if it is empty, the return value is <tt>init</tt>.
If you want to find the sum of all of the elements in <tt>[first, last)</tt>,
you can just pass <tt>0</tt> as <tt>init</tt>.
<h3>See also</h3>
<tt><A href="inner_product.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/inner_product.shtml">inner_product</A></tt>, <tt><A href="partial_sum.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/partial_sum.shtml">partial_sum</A></tt>, <tt><A href="adjacent_difference.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/adjacent_difference.shtml">adjacent_difference</A></tt>,
<tt><A href="count.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/count.shtml">count</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>