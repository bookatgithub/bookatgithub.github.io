<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>adjacent_find</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>adjacent_find</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<tt>Adjacent_find</tt> is an overloaded name; there are actually two <tt>adjacent_find</tt>
functions.
<pre>
template &lt;class <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">ForwardIterator</A>&gt;
ForwardIterator adjacent_find(ForwardIterator first, ForwardIterator last);

template &lt;class <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">ForwardIterator</A>, class <A href="BinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryPredicate.shtml">BinaryPredicate</A>&gt;
ForwardIterator adjacent_find(ForwardIterator first, ForwardIterator last,
                              BinaryPredicate binary_pred);
</pre>                   
<h3>Description</h3>
The first version of <tt>adjacent_find</tt>
returns the first iterator <tt>i</tt> such that <tt>i</tt> and <tt>i+1</tt>
are both valid iterators in <tt>[first, last)</tt>, and such that 
<tt>*i == *(i+1)</tt>.  It returns <tt>last</tt> if no such iterator exists.
<P>
The second version of <tt>adjacent_find</tt>
returns the first iterator <tt>i</tt> such that <tt>i</tt> and <tt>i+1</tt>
are both valid iterators in <tt>[first, last)</tt>, and such that 
<tt>binary_pred(*i, *(i+1))</tt> is <tt>true</tt>.  
It returns <tt>last</tt> if no such iterator exists.
<h3>Definition</h3>
Defined in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.
<h3>Requirements on types</h3>
For the first version:
<UL>
<LI>
<tt>ForwardIterator</tt> is a model of <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">Forward Iterator</A>.
<LI>
<tt>ForwardIterator</tt>'s value type is <A href="EqualityComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/EqualityComparable.shtml">Equality Comparable</A>.
</UL>
For the second version:
<UL>
<LI>
<tt>ForwardIterator</tt> is a model of <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">Forward Iterator</A>.
<LI>
<tt>ForwardIterator</tt>'s value type is convertible to <tt>BinaryPredicate</tt>'s
   first argument type and to its second argument type.
</UL>
<h3>Preconditions</h3>
<UL>
<LI>
<tt>[first, last)</tt> is a valid range.
</UL>
<h3>Complexity</h3>
Linear.  If <tt>first == last</tt> then no comparison are performed;
otherwise, at most <tt>(last - first) - 1</tt> comparisons.
<h3>Example</h3>
Find the first element that is greater than its successor.
<pre>
int A[] = {1, 2, 3, 4, 6, 5, 7, 8};
const int N = sizeof(A) / sizeof(int);

const int* p = adjacent_find(A, A + N, <A href="greater.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/greater.shtml">greater</A>&lt;int&gt;());

cout &lt;&lt; &quot;Element &quot; &lt;&lt; p - A &lt;&lt; &quot; is out of order: &quot;
     &lt;&lt; *p &lt;&lt; &quot; &gt; &quot; &lt;&lt; *(p + 1) &lt;&lt; &quot;.&quot; &lt;&lt; endl;
</pre>
<h3>Notes</h3>
<h3>See also</h3>
<tt><A href="find.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/find.shtml">find</A></tt>, <tt><A href="mismatch.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/mismatch.shtml">mismatch</A></tt>, <tt><A href="equal.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/equal.shtml">equal</A></tt>, <tt><A href="search.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/search.shtml">search</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>