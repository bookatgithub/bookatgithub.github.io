<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>binary_compose¡´AdaptableBinaryFunction,AdaptableUnaryFunction1,AdaptableUnaryFunction2¡µ</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>binary_compose&lt;AdaptableBinaryFunction,AdaptableUnaryFunction1,AdaptableUnaryFunction2&gt;</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "functors.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "type.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/type.gif" Alt=""   WIDTH = "194"  HEIGHT = "39" ></TD>
</TR>
<TR>
<TD Align=left><Img src = "adaptors.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/adaptors.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Categories</b>: functors, adaptors</TD>
<TD Align=right VAlign=top><b>Component type</b>: type</TD>
</TR>
</Table>

<h3>Description</h3>
<tt>Binary_compose</tt> is a <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object</A> adaptor. 
If <tt>f</tt> is an <A href="AdaptableBinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryFunction.shtml">Adaptable Binary Function</A> and <tt>g1</tt> and <tt>g2</tt> are both
<A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Functions</A>, and if <tt>g1</tt>'s and <tt>g2</tt>'s return types
are convertible to <tt>f</tt>'s argument types, then <tt>binary_compose</tt> can be 
used to create a function object <tt>h</tt> such that <tt>h(x)</tt> is the same as 
<tt>f(g1(x), g2(x))</tt>. <A href="#1">[1]</A> <A href="#2">[2]</A>
<h3>Example</h3>
Finds the first element in a list that lies in the range from 1 to 10.
<pre>
<A href="List.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/List.shtml">list</A>&lt;int&gt; L;
...
<A href="List.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/List.shtml">list</A>&lt;int&gt;::iterator in_range = 
     <A href="find_if.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/find_if.shtml">find_if</A>(L.begin(), L.end(),
             compose2(<A href="logical_and.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/logical_and.shtml">logical_and</A>&lt;bool&gt;(),
                      <A href="binder2nd.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binder2nd.shtml">bind2nd</A>(<A href="greater_equal.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/greater_equal.shtml">greater_equal</A>&lt;int&gt;(), 1),
                      <A href="binder2nd.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binder2nd.shtml">bind2nd</A>(<A href="less_equal.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/less_equal.shtml">less_equal</A>&lt;int&gt;(), 10)));
assert(in_range == L.end() || (*in_range &gt;= 1 &amp;&amp; *in_range &lt;= 10));
</pre>
<P>
Computes <tt>sin(x)/(x + DBL_MIN)</tt> for each element of a range.
<pre>
<A href="transform.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/transform.shtml">transform</A>(first, last, first,
          compose2(<A href="divides.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/divides.shtml">divides</A>&lt;double&gt;(),
                   <A href="ptr_fun.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ptr_fun.shtml">ptr_fun</A>(sin),
                   <A href="binder2nd.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binder2nd.shtml">bind2nd</A>(<A href="plus.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/plus.shtml">plus</A>&lt;double&gt;(), DBL_MIN)));
</pre>
<h3>Definition</h3>
Defined in <A href="javascript:if(confirm('http://codeguru.developer.com/cpp/stlguide/function.h  \n\nThis file was not retrieved by Teleport Pro, because the server reports that an error occurred that prevented retrieval.  \n\nDo you want to open it from the server?'))window.location='http://codeguru.developer.com/cpp/stlguide/function.h'" tppabs="http://codeguru.developer.com/cpp/stlguide/function.h">function.h</A>
<h3>Template parameters</h3>
<Table border>
<TR>
<TH>
Parameter
</TH>
<TH>
Description
</TH>
<TH>
Default
</TH>
</TR>
<TR>
<TD VAlign=top>
<tt>AdaptableBinaryFunction</tt>
</TD>
<TD VAlign=top>
The type of the &quot;outer&quot; function in the function composition
   operation.  That is, if the <tt>binary_compose</tt> is a function object
   <tt>h</tt> such that <tt>h(x) = f(g1(x), g2(x))</tt>, then <tt>AdaptableBinaryFunction</tt>
   is the type of <tt>f</tt>.
</TD>
<TD VAlign=top>
&nbsp;
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>AdaptableUnaryFunction1</tt>
</TD>
<TD VAlign=top>
The type of the first &quot;inner&quot; function in the function composition
   operation.  That is, if the <tt>binary_compose</tt> is a function object
   <tt>h</tt> such that <tt>h(x) = f(g1(x), g2(x))</tt>, then <tt>AdaptableBinaryFunction</tt>
   is the type of <tt>g1</tt>.
</TD>
<TD VAlign=top>
&nbsp;
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>AdaptableUnaryFunction2</tt>
</TD>
<TD VAlign=top>
The type of the second &quot;inner&quot; function in the function composition
   operation.  That is, if the <tt>binary_compose</tt> is a function object
   <tt>h</tt> such that <tt>h(x) = f(g1(x), g2(x))</tt>, then <tt>AdaptableBinaryFunction</tt>
   is the type of <tt>g2</tt>.
</TD>
<TD VAlign=top>
&nbsp;
</TD>
</tr>
</table>
<h3>Model of</h3>
<A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>
<h3>Type requirements</h3>
<tt>AdaptableBinaryFunction</tt> must be a model of <A href="AdaptableBinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryFunction.shtml">Adaptable Binary Function</A>.
<tt>AdaptableUnaryFunction1</tt> and <tt>AdaptableUnaryFunction2</tt> must both
be models of <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>.  
The argument types of <tt>AdaptableUnaryFunction1</tt> and 
<tt>AdaptableUnaryFunction2</tt> must be convertible to each other.
The result types of <tt>AdaptableUnaryFunction1</tt> and
<tt>AdaptableUnaryFunction2</tt> must be convertible, respectively, to
the first and second argument types of <tt>AdaptableBinaryFunction</tt>.
<h3>Public base classes</h3>
<pre>
<A href="unary_function.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/unary_function.shtml">unary_function</A>&lt;AdaptableUnaryFunction1::argument_type,
               AdaptableBinaryFunction::result_type&gt;
</pre>
<h3>Members</h3>
<Table border>
<TR>
<TH>
Member
</TH>
<TH>
Where defined
</TH>
<TH>
Description
</TH>
</TR>
<TR>
<TD VAlign=top>
<tt>argument_type</tt>
</TD>
<TD VAlign=top>
 <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>
</TD>
<TD VAlign=top>
The type of the function object's argument:
<tt>AdaptableUnaryFunction::argument_type</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>result_type</tt>
</TD>
<TD VAlign=top>
 <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>
</TD>
<TD VAlign=top>
The type of the result: <tt>AdaptableBinaryFunction::result_type</tt>
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
binary_compose(const AdaptableBinaryFunction&amp; f, 
               const AdaptableUnaryFunction1&amp; g1, 
               const AdaptableUnaryFunction1&amp; g2); 
</pre>
</TD>
<TD VAlign=top>
<tt>binary_compose</tt>
</TD>
<TD VAlign=top>
See below.
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
template &lt;class <A href="AdaptableBinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryFunction.shtml">AdaptableBinaryFunction</A>, 
          class <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">AdaptableUnaryFunction</A>1,
          class <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">AdaptableUnaryFunction</A>2&gt;
binary_compose&lt;AdaptableBinaryFunction, 
               AdaptableUnaryFunction1,
               AdaptableUnaryFunction2&gt;
compose2(const AdaptableBinaryFunction&amp;, 
         const AdaptableUnaryFunction1&amp;,
         const AdaptableUnaryFunction2&amp;);
</pre>
</TD>
<TD VAlign=top>
<tt>binary_compose</tt>
</TD>
<TD VAlign=top>
See below.
</TD>
</tr>
</table>
<h3>New members</h3>
These members are not defined in the 
<A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>
requirements, but are specific to 
<tt>binary_compose</tt>.
<Table border>
<TR>
<TH>
Member
</TH>
<TH>
Description
</TH>
</TR>
<TR>
<TD VAlign=top>
<pre>
binary_compose(const AdaptableBinaryFunction&amp; f, 
               const AdaptableUnaryFunction1&amp; g1, 
               const AdaptableUnaryFunction1&amp; g2); 
</pre>
</TD>
<TD VAlign=top>
The constructor.  Constructs a <tt>binary_compose</tt> object such that
calling that object with the argument <tt>x</tt> returns 
<tt>f(g1(x), g2(x))</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
template &lt;class <A href="AdaptableBinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryFunction.shtml">AdaptableBinaryFunction</A>, 
          class <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">AdaptableUnaryFunction</A>1,
          class <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">AdaptableUnaryFunction</A>2&gt;
binary_compose&lt;AdaptableBinaryFunction, 
               AdaptableUnaryFunction1,
               AdaptableUnaryFunction2&gt;
compose2(const AdaptableBinaryFunction&amp;, 
         const AdaptableUnaryFunction1&amp;,
         const AdaptableUnaryFunction2&amp;);
</pre>
</TD>
<TD VAlign=top>
Creates a <tt>binary_compose</tt> object.  If <tt>f</tt>, <tt>g</tt>, and <tt>g2</tt> are, respectively,
of classes <tt>AdaptableBinaryFunction</tt>, <tt>AdaptableUnaryFunction1</tt>, and
<tt>AdaptableUnaryFunction2</tt>, then <tt>compose2(f, g1, g2)</tt> is equivalent to
<tt>binary_compose&lt;AdaptableBinaryFunction, AdaptableUnaryFunction1, 
AdaptableUnaryFunction2&gt;(f, g1, g2)</tt>, but is more convenient.
This is a global function, not a member function.
</TD>
</tr>
</table>
<h3>Notes</h3>
<P><A name="1">[1]</A>
This is a form of function composition.  The <tt><A href="unary_compose.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/unary_compose.shtml">unary_compose</A></tt>
adaptor allows composition of <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Functions</A>; note,
however, that once binary functions are introduced, there are several
possible patterns of function composition.  The <tt>binary_compose</tt>
allows you to form a unary function by putting together two unary
functions and a binary function, but you could also, for example,
imagine putting together two unary functions and a binary function to
form a binary function.  In that case, <tt>f</tt>, <tt>g1</tt>, and <tt>g2</tt> would be
combined into a function object <tt>h</tt> such that <tt>h(x,y) = f(g1(x),
g2(y))</tt>.
<h3>See also</h3>
The <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object overview</A>, <tt><A href="unary_compose.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/unary_compose.shtml">unary_compose</A></tt>, 
<tt><A href="binder1st.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binder1st.shtml">binder1st</A></tt>, <tt><A href="binder2nd.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binder2nd.shtml">binder2nd</A></tt>.

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>