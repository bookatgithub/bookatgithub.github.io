<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>binary_negate¡´AdaptableBinaryPredicate¡µ</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>binary_negate&lt;AdaptableBinaryPredicate&gt;</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "functors.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "type.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/type.gif" Alt=""   WIDTH = "194"  HEIGHT = "39" ></TD>
</TR>
<TR>
<TD Align=left><Img src = "adaptors.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/adaptors.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Categories</b>: functors, adaptors</TD>
<TD Align=right VAlign=top><b>Component type</b>: type</TD>
</TR>
</Table>

<h3>Description</h3>
<tt>Binary_negate</tt> is a <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object</A> adaptor: it is an
<A href="AdaptableBinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryPredicate.shtml">Adaptable Binary Predicate</A> that represents the logical negation
of some other <A href="AdaptableBinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryPredicate.shtml">Adaptable Binary Predicate</A>.  That is: if <tt>f</tt> is an
object of class <tt>binary_negate&lt;AdaptableBinaryPredicate&gt;</tt>, then
there exists an object <tt>pred</tt> of class <tt>AdaptableBinaryPredicate</tt>
such that <tt>f(x,y)</tt> always returns the same value as <tt>!pred(x,y)</tt>. 
There is rarely any reason to construct a <tt>binary_negate</tt>
directly; it is almost always easier to use the helper function <tt>not2</tt>.
<h3>Example</h3>
Finds the first character in a string that is neither
<tt>' '</tt> nor <tt>'\n'</tt>.
<pre>
char str[MAXLEN];
...
const char* wptr = <A href="find_if.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/find_if.shtml">find_if</A>(str, str + MAXLEN,
                           <A href="binary_compose.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binary_compose.shtml">compose2</A>(not2(<A href="logical_or.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/logical_or.shtml">logical_or</A>&lt;bool&gt;()),
                                    <A href="binder2nd.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binder2nd.shtml">bind2nd</A>(<A href="equal_to.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/equal_to.shtml">equal_to</A>&lt;char&gt;(), ' '),
                                    <A href="binder2nd.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binder2nd.shtml">bind2nd</A>(<A href="equal_to.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/equal_to.shtml">equal_to</A>&lt;char&gt;(), '\n')));
assert(wptr == str + MAXLEN || !(*wptr == ' ' || *wptr == '\n')); 
</pre>
<h3>Definition</h3>
Defined in <A href="javascript:if(confirm('http://codeguru.developer.com/cpp/stlguide/function.h  \n\nThis file was not retrieved by Teleport Pro, because the server reports that an error occurred that prevented retrieval.  \n\nDo you want to open it from the server?'))window.location='http://codeguru.developer.com/cpp/stlguide/function.h'" tppabs="http://codeguru.developer.com/cpp/stlguide/function.h">function.h</A>.
<h3>Template parameters</h3>
<Table border>
<TR>
<TH>
Parameter
</TH>
<TH>
Description
</TH>
<TH>
Default
</TH>
</TR>
<TR>
<TD VAlign=top>
<tt>AdaptableBinaryPredicate</tt>
</TD>
<TD VAlign=top>
The type of the function object that this <tt>binary_negate</tt> is the logical
   negation of.
</TD>
<TD VAlign=top>
&nbsp;
</TD>
</tr>
</table>
<h3>Model of</h3>
<A href="AdaptableBinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryPredicate.shtml">Adaptable Binary Predicate</A>
<h3>Type requirements</h3>
<tt>AdaptableBinaryPredicate</tt> must be a model of <A href="AdaptableBinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryPredicate.shtml">Adaptable Binary Predicate</A>.
<h3>Public base classes</h3>
<pre>
<A href="binary_function.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binary_function.shtml">binary_function</A>&lt;<A href="AdaptableBinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryPredicate.shtml">AdaptableBinaryPredicate</A>::first_argument_type,
                <A href="AdaptableBinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryPredicate.shtml">AdaptableBinaryPredicate</A>::second_argument_type,
                bool&gt;
</pre>
<h3>Members</h3>
<Table border>
<TR>
<TH>
Member
</TH>
<TH>
Where defined
</TH>
<TH>
Description
</TH>
</TR>
<TR>
<TD VAlign=top>
<tt>first_argument_type</tt>
</TD>
<TD VAlign=top>
 <A href="AdaptableBinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryFunction.shtml">Adaptable Binary Function</A>
</TD>
<TD VAlign=top>
The type of the first argument: <tt><A href="AdaptableBinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryPredicate.shtml">AdaptableBinaryPredicate</A>::first_argument_type</tt>
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>second_argument_type</tt>
</TD>
<TD VAlign=top>
 <A href="AdaptableBinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryFunction.shtml">Adaptable Binary Function</A>
</TD>
<TD VAlign=top>
The type of the second argument: <tt><A href="AdaptableBinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryPredicate.shtml">AdaptableBinaryPredicate</A>::second_argument_type</tt>
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>result_type</tt>
</TD>
<TD VAlign=top>
 <A href="AdaptableBinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryFunction.shtml">Adaptable Binary Function</A>
</TD>
<TD VAlign=top>
The type of the result: <tt>bool</tt>
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
binary_negate(const AdaptableBinaryPredicate&amp; pred)
</pre>
</TD>
<TD VAlign=top>
<tt>binary_negate</tt>
</TD>
<TD VAlign=top>
See below.
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
template &lt;class <A href="AdaptableBinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryPredicate.shtml">AdaptableBinaryPredicate</A>&gt;
binary_negate&lt;AdaptableBinaryPredicate&gt;
not2(const AdaptableBinaryPredicate&amp; pred);
</pre>
</TD>
<TD VAlign=top>
<tt>binary_negate</tt>
</TD>
<TD VAlign=top>
See below.
</TD>
</tr>
</table>
<h3>New members</h3>
These members are not defined in the 
<A href="AdaptableBinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryPredicate.shtml">Adaptable Binary Predicate</A>
requirements, but are specific to 
<tt>binary_negate</tt>.
<Table border>
<TR>
<TH>
Member
</TH>
<TH>
Description
</TH>
</TR>
<TR>
<TD VAlign=top>
<pre>
binary_negate(const AdaptableBinaryPredicate&amp; pred)
</pre>
</TD>
<TD VAlign=top>
The constructor.  Creates a <tt>binary_negate&lt;AdaptableBinaryPredicate&gt;</tt>
whose underlying predicate is <tt>pred</tt>.  
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
template &lt;class <A href="AdaptableBinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryPredicate.shtml">AdaptableBinaryPredicate</A>&gt;
binary_negate&lt;AdaptableBinaryPredicate&gt;
not2(const AdaptableBinaryPredicate&amp; pred);
</pre>
</TD>
<TD VAlign=top>
If <tt>p</tt> is of type <tt>AdaptableBinaryPredicate</tt> then
<tt>not2(p)</tt> is equivalent to <tt>binary_negate&lt;AdaptableBinaryPredicate&gt;(p)</tt>,
but more convenient.  This is a global function, not a member function.
</TD>
</tr>
</table>
<h3>Notes</h3>
<h3>See also</h3>
The <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object overview</A>, <A href="AdaptablePredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptablePredicate.shtml">AdaptablePredicate</A>, <A href="Predicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Predicate.shtml">Predicate</A>, 
<tt><A href="unary_negate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/unary_negate.shtml">unary_negate</A></tt>, <tt><A href="unary_compose.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/unary_compose.shtml">unary_compose</A></tt>, <tt><A href="binary_compose.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binary_compose.shtml">binary_compose</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>