<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>binder2nd¡´AdaptableBinaryFunction¡µ</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>binder2nd&lt;AdaptableBinaryFunction&gt;</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "functors.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "type.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/type.gif" Alt=""   WIDTH = "194"  HEIGHT = "39" ></TD>
</TR>
<TR>
<TD Align=left><Img src = "adaptors.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/adaptors.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Categories</b>: functors, adaptors</TD>
<TD Align=right VAlign=top><b>Component type</b>: type</TD>
</TR>
</Table>

<h3>Description</h3>
<tt>Binder2nd</tt> is a <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object</A> adaptor: it is used to transform
an <A href="AdaptableBinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryFunction.shtml">adaptable binary function</A> into an <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">adaptable unary function</A>. 
Specifically, if <tt>f</tt> is an object of class
<tt>binder2nd&lt;AdaptableBinaryFunction&gt;</tt>, then <tt>f(x)</tt> returns 
<tt>F(x, c)</tt>, where <tt>F</tt> is an object of class <tt>AdaptableBinaryFunction</tt>
and where <tt>c</tt> is a constant.  Both <tt>F</tt> and <tt>c</tt> are passed as arguments to
<tt>binder2nd</tt>'s constructor. <A href="#1">[1]</A>  
<P>
The easiest way to create a <tt>binder2nd</tt>
is not to call the constructor explicitly, but instead to use the helper
function <tt>bind2nd</tt>.
<h3>Example</h3>
Finds the first positive number in a list.
<pre>
<A href="List.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/List.shtml">list</A>&lt;int&gt; L;
...
<A href="List.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/List.shtml">list</A>&lt;int&gt;::iterator first_positive = 
       <A href="find_if.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/find_if.shtml">find_if</A>(L.begin(), L.end(), bind2nd(<A href="greater.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/greater.shtml">greater</A>&lt;int&gt;(), 0));
assert(first_positive == L.end() || *first_positive &gt; 0);
</pre>
<h3>Definition</h3>
Defined in <A href="javascript:if(confirm('http://codeguru.developer.com/cpp/stlguide/function.h  \n\nThis file was not retrieved by Teleport Pro, because the server reports that an error occurred that prevented retrieval.  \n\nDo you want to open it from the server?'))window.location='http://codeguru.developer.com/cpp/stlguide/function.h'" tppabs="http://codeguru.developer.com/cpp/stlguide/function.h">function.h</A>.
<h3>Template parameters</h3>
<Table border>
<TR>
<TH>
Parameter
</TH>
<TH>
Description
</TH>
<TH>
Default
</TH>
</TR>
<TR>
<TD VAlign=top>
<tt>AdaptableBinaryFunction</tt>
</TD>
<TD VAlign=top>
The type of the binary function whose second argument is being bound
   to a constant.
</TD>
<TD VAlign=top>
&nbsp;
</TD>
</tr>
</table>
<h3>Model of</h3>
<A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>
<h3>Type requirements</h3>
<tt>AdaptableBinaryFunction</tt> must be a model of <A href="AdaptableBinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryFunction.shtml">Adaptable Binary Function</A>. 
<h3>Public base classes</h3>
<pre>
<A href="unary_function.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/unary_function.shtml">unary_function</A>&lt;<A href="AdaptableBinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryFunction.shtml">AdaptableBinaryFunction</A>::first_argument_type,
               <A href="AdaptableBinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryFunction.shtml">AdaptableBinaryFunction</A>::result_type&gt;
</pre>
<h3>Members</h3>
<Table border>
<TR>
<TH>
Member
</TH>
<TH>
Where defined
</TH>
<TH>
Description
</TH>
</TR>
<TR>
<TD VAlign=top>
<tt>argument_type</tt>
</TD>
<TD VAlign=top>
 <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>
</TD>
<TD VAlign=top>
The type of the function object's argument, which is
   <tt>AdaptableBinaryFunction::first_argument_type</tt>
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>result_type</tt>
</TD>
<TD VAlign=top>
 <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>
</TD>
<TD VAlign=top>
The type of the result: <tt>AdaptableBinaryFunction::result_type</tt>
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
result_type operator()(const argument_type&amp; x) const
</pre>
</TD>
<TD VAlign=top>
 <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>
</TD>
<TD VAlign=top>
Function call.  Returns <tt>F(x, c)</tt>, where <tt>F</tt> and <tt>c</tt> are the
arguments with which this <tt>binder1st</tt> was constructed.
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
binder2nd(const AdaptableBinaryFunction&amp; F,
          AdaptableBinaryFunction::second_argument_type c)
</pre>
</TD>
<TD VAlign=top>
<tt>binder2nd</tt>
</TD>
<TD VAlign=top>
See below
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
template &lt;class <A href="AdaptableBinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryFunction.shtml">AdaptableBinaryFunction</A>, class T&gt;
binder2nd&lt;<A href="AdaptableBinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryFunction.shtml">AdaptableBinaryFunction</A>&gt; 
bind2nd(const AdaptableBinaryFunction&amp; F, const T&amp; c);
</pre>
</TD>
<TD VAlign=top>
<tt>binder2nd</tt>
</TD>
<TD VAlign=top>
See below
</TD>
</tr>
</table>
<h3>New members</h3>
These members are not defined in the 
<A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>
requirements, but are specific to 
<tt>binder2nd</tt>.
<Table border>
<TR>
<TH>
Member
</TH>
<TH>
Description
</TH>
</TR>
<TR>
<TD VAlign=top>
<pre>
binder2nd(const AdaptableBinaryFunction&amp; F,
          AdaptableBinaryFunction::second_argument_type c)
</pre>
</TD>
<TD VAlign=top>
The constructor.  Creates a <tt>binder2nd</tt> such that calling it with
the argument <tt>x</tt> (where <tt>x</tt> is of type
<tt>AdaptableBinaryFunction::first_argument_type</tt>) corresponds to the
call <tt>F(x, c)</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
template &lt;class <A href="AdaptableBinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryFunction.shtml">AdaptableBinaryFunction</A>, class T&gt;
binder2nd&lt;<A href="AdaptableBinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryFunction.shtml">AdaptableBinaryFunction</A>&gt; 
bind2nd(const AdaptableBinaryFunction&amp; F, const T&amp; c);
</pre>
</TD>
<TD VAlign=top>
If <tt>F</tt> is an object of type <tt>AdaptableBinaryFunction</tt>,
then <tt>bind2nd(F, c)</tt> is equivalent to 
<tt>binder2nd&lt;AdaptableBinaryFunction&gt;(F, c)</tt>, but is more convenient.
The type <tt>T</tt> must be convertible to 
<tt>AdaptableBinaryFunction::second_argument_type</tt>.
This is a global function, not a member function.
</TD>
</tr>
</table>
<P><A name="1">[1]</A>
Intuitively, you can think of this operation as &quot;binding&quot; the
second argument of a binary function to a constant, thus yielding
a unary function.  This is a special case of a closure.
<h3>See also</h3>
The <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object overview</A>, <tt><A href="binder1st.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binder1st.shtml">binder1st</A></tt>,
<A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>, <A href="AdaptableBinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryFunction.shtml">Adaptable Binary Function</A>  

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>