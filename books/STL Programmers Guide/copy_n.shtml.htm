<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>copy_n</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>copy_n</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<pre>
template &lt;class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>, class Size, class <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">OutputIterator</A>&gt;
OutputIterator copy_n(InputIterator first, Size count, 
                      OutputIterator result);
</pre>                   
<h3>Description</h3>
<tt>Copy_n</tt> copies elements from the range <tt>[first, first + n)</tt> to the
range <tt>[result, result + n)</tt>.  That is, it performs the assignments
<tt>*result = *first</tt>, <tt>*(result + 1) = *(first + 1)</tt>, and so on.
Generally, for every integer <tt>i</tt> from <tt>0</tt> up to (but not including)
<tt>n</tt>, <tt>copy_n</tt> performs the assignment <tt>*(result + i) = *(first + i)</tt>.
Assignments are performed in forward order, <i>i.e.</i> in order of
increasing <tt>n</tt>. <A href="#1">[1]</A>
<P>
The return value is <tt>result + n</tt>.
<h3>Definition</h3>
Declared in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.  The implementation is in 
<A href="algobase.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algobase.h">algobase.h</A>.
<h3>Requirements on types</h3>
<UL>
<LI>
InputIterator is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
OutputIterator is a model of <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">Output Iterator</A>.
<LI>
<tt>Size</tt> is an integral type.
<LI>
InputIterator's value type is convertible to a type in
   OutputIterator's set of value types.
</UL>
<h3>Preconditions</h3>
<UL>
<LI>
<tt>n &gt;= 0</tt>.
<LI>
<tt>[first, first + n)</tt> is a valid range.
<LI>
<tt>result</tt> is not an iterator within the range <tt>[first, first + n)</tt>.
<LI>
<tt>[result, result + n)</tt> is a valid range.
</UL>
<h3>Complexity</h3>
Linear.  Exactly <tt>n</tt> assignments are performed.
<h3>Example</h3>
<pre>
<A href="Vector.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Vector.shtml">vector</A>&lt;int&gt; V(5);
<A href="iota.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/iota.shtml">iota</A>(V.begin(), V.end(), 1);

<A href="List.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/List.shtml">list</A>&lt;int&gt; L(V.size());
copy_n(V.begin(), V.size(), L.begin());
assert(<A href="equal.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/equal.shtml">equal</A>(V.begin(), V.end(), L.begin()));
</pre>
<h3>Notes</h3>
<P><A name="1">[1]</A>
<tt>Copy_n</tt> is almost, but not quite, redundant.  If <tt>first</tt> is an 
<A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">input iterator</A>, as opposed to a <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">forward iterator</A>, then the 
<tt>copy_n</tt> operation can't be expressed in terms of <tt><A href="copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/copy.shtml">copy</A></tt>.
<h3>See also</h3>
<tt><A href="copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/copy.shtml">copy</A></tt>, <tt><A href="copy_backward.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/copy_backward.shtml">copy_backward</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>