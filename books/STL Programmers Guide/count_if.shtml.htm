<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>count_if</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>count_if</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<tt>Count_if</tt> is an overloaded name: there are two <tt>count_if</tt> functions.
<pre>
template &lt;class InputIterator, class Predicate&gt;
iterator_traits&lt;InputIterator&gt;::difference_type
count_if(InputIterator first, InputIterator last, Predicate pred);

template &lt;class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>, class <A href="Predicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Predicate.shtml">Predicate</A>, class Size&gt;
void count_if(InputIterator first, InputIterator last, 
              Predicate pred,
              Size&amp; n);
</pre> 
<h3>Description</h3>
<tt>Count_if</tt> finds the number of elements in <tt>[first, last)</tt> that satisfy
the predicate <tt>pred</tt>.  More precisely, the first version of <tt>count_if</tt>
returns the number of iterators <tt>i</tt> in <tt>[first, last)</tt> such that 
<tt>pred(*i)</tt> is <tt>true</tt>.  The second version of <tt>count</tt> adds to <tt>n</tt> 
the number of iterators <tt>i</tt> in <tt>[first, last)</tt> such that 
<tt>pred(*i)</tt> is <tt>true</tt>. 
<P>
The second version of <tt>count_if</tt> was the one defined in the original
STL, and the first version is the one defined in the 
draft C++ standard; the definition was changed because the
older interface was clumsy and error-prone.  The older interface
required the use of a temporary variable, which had to be
initialized to 0 before the call to <tt>count_if</tt>.
<P>
Both interfaces are currently supported <A href="#1">[1]</A>, for
reasons of backward compatibility, but eventually the older
version will be removed.
<h3>Definition</h3>
Defined in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.
<h3>Requirements on types</h3>
For the first version, which takes three arguments:
<UL>
<LI>
<tt>InputIterator</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>Predicate</tt> is a model of <A href="Predicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Predicate.shtml">Predicate</A>.
<LI>
<tt>InputIterator</tt>'s value type is convertible to <tt>Predicate</tt>'s argument
   type.
</UL>
For the second version, which takes four arguments:
<UL>
<LI>
<tt>InputIterator</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>Predicate</tt> is a model of <A href="Predicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Predicate.shtml">Predicate</A>.
<LI>
<tt>Size</tt> is an integral type that can hold values of
   <tt>InputIterator</tt>'s distance type.
<LI>
<tt>InputIterator</tt>'s value type is convertible to <tt>Predicate</tt>'s argument
   type.
</UL>
<h3>Preconditions</h3>
For the first version:
<UL>
<LI>
<tt>[first, last)</tt> is a valid range.
</UL>
For the second version:
<UL>
<LI>
<tt>[first, last)</tt> is a valid range.
<LI>
<tt>n</tt> plus the number of elements that satisfy <tt>pred</tt> does not exceed
   the maximum value of type <tt>Size</tt>.
</UL>
<h3>Complexity</h3>
Linear.  Exactly <tt>last - first</tt> applications of <tt>pred</tt>.
<h3>Example</h3>
<pre>
int main() {
  int A[] = { 2, 0, 4, 6, 0, 3, 1, -7 };
  const int N = sizeof(A) / sizeof(int);

  cout &lt;&lt; &quot;Number of even elements: &quot; 
       &lt;&lt; count_if(A, A + N, 
                   <A href="unary_compose.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/unary_compose.shtml">compose1</A>(<A href="binder2nd.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binder2nd.shtml">bind2nd</A>(<A href="equal_to.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/equal_to.shtml">equal_to</A>&lt;int&gt;(), 0), 
                            <A href="binder2nd.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binder2nd.shtml">bind2nd</A>(<A href="modulus.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/modulus.shtml">modulus</A>&lt;int&gt;(), 2)))
       &lt;&lt; endl;
} 
</pre>
<h3>Notes</h3>
<P><A name="1">[1]</A>
The new <tt>count</tt> interface uses the <tt><A href="iterator_traits.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/iterator_traits.shtml">iterator_traits</A></tt> class, which
relies on a C++ feature known as <i>partial specialization</i>.  Many of
today's compilers don't implement the complete standard; in
particular, many compilers do not support partial specialization.  If
your compiler does not support partial specialization, then you will
not be able to use the newer version of <tt>count</tt>, or any other STL
components that involve <tt><A href="iterator_traits.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/iterator_traits.shtml">iterator_traits</A></tt>.
<h3>See also</h3>
<tt><A href="count.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/count.shtml">count</A></tt>, <tt><A href="find.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/find.shtml">find</A></tt>, <tt><A href="find_if.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/find_if.shtml">find_if</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>