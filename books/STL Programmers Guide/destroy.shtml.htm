<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>destroy</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>destroy</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "allocators.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/allocators.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: allocators</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<tt>Destroy</tt> is an overloaded name; there are actually two <tt>destroy</tt>
functions.
<pre>
template &lt;class T&gt; void destroy(T* pointer);

template &lt;class <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">ForwardIterator</A>&gt;
void destroy(ForwardIterator first, ForwardIterator last);
</pre>                   
<h3>Description</h3>
In C++, the operator <tt>delete</tt> destroys an object by calling its
destructor, and then deallocates the memory where that object was
stored.  Occasionally, however, it is useful to separate those two
operations.  <A href="#1">[1]</A>  <tt>Destroy</tt> calls an object's destructor without 
deallocating the memory where the object was stored.
<P>
The first version of <tt>destroy</tt>
destroys the object pointed to by <tt>pointer</tt> by calling the 
destructor <tt>T::~T()</tt>.  The memory pointed to by <tt>pointer</tt> is not
deallocated, and can be reused for some other object.
<P>
The second version of <tt>destroy</tt>
destroys all of the objects in the range of elements <tt>[first, last)</tt>.
It is equivalent to calling <tt>destroy(&amp;*i)</tt> for each iterator <tt>i</tt>
in the range <tt>[first, last)</tt>.
<h3>Definition</h3>
Declared in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.  The implementation is in <A href="algobase.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algobase.h">algobase.h</A>.
<h3>Requirements on types</h3>
For the first version of <tt>destroy</tt>:
<UL>
<LI>
<tt>T</tt>'s destructor, <tt>~T</tt>, is accessible.
</UL>
For the second version of <tt>destroy</tt>:
<UL>
<LI>
<tt>ForwardIterator</tt> is a model of <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">Forward Iterator</A>.
<LI>
<tt>ForwardIterator</tt> is mutable.
<LI>
<tt>ForwardIterator</tt>'s value type has an accessible destructor.
</UL>
<h3>Preconditions</h3>
For the first version of <tt>destroy</tt>:
<UL>
<LI>
<tt>pointer</tt> points to a valid object of type <tt>T</tt>.
</UL>
For the second version of <tt>destroy</tt>:
<UL>
<LI>
<tt>[first, last)</tt> is a valid range.
<LI>
Each iterator <tt>i</tt> in <tt>[first, last)</tt> points to a valid object.
</UL>
<h3>Complexity</h3>
The run-time complexity of the second version is linear: it calls 
the destructor exactly <tt>last - first</tt> times.
<h3>Example</h3>
<pre>
class Int {
public:
  Int(int x) : val(x) {}
  int get() { return val; }
private:
  int val;
};

int main()
{
  Int A[] = { Int(1), Int(2), Int(3), Int(4) };

  destroy(A, A + 4);
  construct(A,     Int(10));
  construct(A + 1, Int(11));
  construct(A + 2, Int(12));
  construct(A + 3,  Int(13));
}
</pre>
<h3>Notes</h3>
<P><A name="1">[1]</A>
In particular, <tt>destroy</tt>, along with other low-level memory 
allocation primitives, is used to implement container classes.
<h3>See also</h3>
<A href="Allocators.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Allocators.shtml">Allocators</A>, <tt><A href="construct.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/construct.shtml">construct</A></tt>, <tt><A href="uninitialized_copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/uninitialized_copy.shtml">uninitialized_copy</A></tt>, 
<tt><A href="uninitialized_fill.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/uninitialized_fill.shtml">uninitialized_fill</A></tt>, <tt><A href="uninitialized_fill_n.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/uninitialized_fill_n.shtml">uninitialized_fill_n</A></tt>,
<tt><A href="raw_storage_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/raw_storage_iterator.shtml">raw_storage_iterator</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>