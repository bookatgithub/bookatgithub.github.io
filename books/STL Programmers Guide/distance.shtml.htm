<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>distance</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>distance</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left><Img src = "iterators.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/iterators.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Categories</b>: algorithms, iterators</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<tt>Distance</tt> is an overloaded name; there are actually two <tt>distance</tt>
functions.
<pre>
template &lt;class InputIterator&gt;
inline <A href="iterator_traits.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/iterator_traits.shtml">iterator_traits</A>&lt;InputIterator&gt;::difference_type
distance(InputIterator first, InputIterator last);

template &lt;class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>, class Distance&gt;
void distance(InputIterator first, InputIterator last, Distance&amp; n);
</pre>                   
<h3>Description</h3>
Finds the distance between <tt>first</tt> and <tt>last</tt>, <i>i.e.</i> the number of
times that <tt>first</tt> must be incremented until it is equal to
<tt>last</tt>.  <A href="#1">[1]</A> The first version of <tt>distance</tt>, which takes two arguments,
simply returns that distance; the second version, which takes
three arguments and which has a return type of <tt>void</tt>, increments
<tt>n</tt> by that distance.
<P>
The second version of <tt>distance</tt> was the one defined in the original
STL, and the first version is the one defined in the 
draft C++ standard; the definition was changed because the
older interface was clumsy and error-prone.  The older interface
required the use of a temporary variable, and it has semantics
that are somewhat nonintuitive: it increments <tt>n</tt> by the distance
from <tt>first</tt> to <tt>last</tt>, rather than storing that distance in <tt>n</tt>. <A href="#2">[2]</A>
<P>
Both interfaces are currently supported <A href="#3">[3]</A>, for
reasons of backward compatibility, but eventually the older
version will be removed.
<h3>Definition</h3>
Defined in <A href="algobase.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algobase.h">algobase.h</A>
<h3>Requirements on types</h3>
For the first version:
<UL>
<LI>
<tt>InputIterator</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
</UL>
For the second version:
<UL>
<LI>
<tt>InputIterator</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>Distance</tt> is an integral type that is able to represent a distance
   between iterators of type <tt>InputIterator</tt>.
</UL>
<h3>Preconditions</h3>
<UL>
<LI>
<tt>[first, last)</tt> is a <i>valid range</i>, as defined in the
   <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A> requirements.
</UL>
<h3>Complexity</h3>
Constant time if <tt>InputIterator</tt> is a model of 
<A href="RandomAccessIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/RandomAccessIterator.shtml">random access iterator</A>, otherwise linear time.
<h3>Example</h3>
<pre>
int main() {
  <A href="List.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/List.shtml">list</A>&lt;int&gt; L;
  L.push_back(0);
  L.push_back(1);

  assert(distance(L.begin(), L.end()) == L.size());
}
</pre>
<h3>Notes</h3>
<P><A name="1">[1]</A>
This is the reason that <tt>distance</tt> is not defined for
<A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">output iterators</A>: it is impossible to compare two <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">output iterators</A>
for equality.
<P><A name="2">[2]</A>
Forgetting to initialize <tt>n</tt> to 0 is a common mistake.
<P><A name="3">[3]</A>
The new <tt>distance</tt> interface uses the <tt><A href="iterator_traits.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/iterator_traits.shtml">iterator_traits</A></tt> class, which
relies on a C++ feature known as <i>partial specialization</i>.  Many of
today's compilers don't implement the complete standard; in
particular, many compilers do not support partial specialization.  If
your compiler does not support partial specialization, then you will
not be able to use the newer version of <tt>distance</tt>, or any other STL
components that involve <tt><A href="iterator_traits.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/iterator_traits.shtml">iterator_traits</A></tt>.
<h3>See also</h3>
<tt><A href="distance_type.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/distance_type.shtml">distance_type</A></tt>, <tt><A href="advance.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/advance.shtml">advance</A></tt>, 
<A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input iterator</A>, <A href="RandomAccessIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/RandomAccessIterator.shtml">Random access iterator</A>, <A href="iterator_tags.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/iterator_tags.shtml">Iterator tags</A>,
<tt><A href="iterator_traits.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/iterator_traits.shtml">iterator_traits</A></tt>, <A href="Iterators.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Iterators.shtml">Iterator overview</A>.

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>