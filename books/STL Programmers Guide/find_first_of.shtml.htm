<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>find_first_of</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>find_first_of</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<tt>find_first_of</tt> is an overloaded name; there are actually two <tt>find_first_of</tt>
functions.
<pre>
template &lt;class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>, class <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">ForwardIterator</A>&gt;
InputIterator find_first_of(InputIterator first1, InputIterator last1,
                            ForwardIterator first2, ForwardIterator last2);

template &lt;class InputIterator, class ForwardIterator, class BinaryPredicate&gt;
InputIterator find_first_of(InputIterator first1, InputIterator last1,
                            ForwardIterator first2, ForwardIterator last2,
                            BinaryPredicate comp);
</pre>		   
<h3>Description</h3>
<tt>Find_first_of</tt> is similar to <tt><A href="find.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/find.shtml">find</A></tt>, in that it performs linear
seach through a range of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterators</A>.  The difference is that
while <tt><A href="find.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/find.shtml">find</A></tt> searches for one particular value, <tt>find_first_of</tt>
searches for any of several values.  Specifically, <tt>find_first_of</tt> 
searches for the first occurrance in the range <tt>[first1, last1)</tt>
of any of the elements in <tt>[first2, last2)</tt>.  (Note that this 
behavior is reminiscent of the function <tt>strpbrk</tt> from the standard
C library.)
<P>
The two versions of <tt>find_first_of</tt> differ in how they compare
elements for equality.  The first uses <tt>operator==</tt>, and the second
uses and arbitrary user-supplied <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object</A> <tt>comp</tt>.  The
first version returns the first iterator <tt>i</tt> in <tt>[first1, last1)</tt> such
that, for some iterator <tt>j</tt> in <tt>[first2, last2)</tt>, <tt>*i == *j</tt>.  The
second returns the first iterator <tt>i</tt> in <tt>[first1, last1)</tt> such that,
for some iterator <tt>j</tt> in <tt>[first2, last2)</tt>, <tt>comp(*i, *j)</tt> is <tt>true</tt>.
As usual, both versions return <tt>last1</tt> if no such iterator <tt>i</tt>
exists.
<h3>Definition</h3>
Defined in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.  
<h3>Requirements on types</h3>
For the first version:
<UL>
<LI>
<tt>InputIterator</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>ForwardIterator</tt> is a model of <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">Forward Iterator</A>.
<LI>
<tt>InputIterator</tt>'s value type is <A href="EqualityComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/EqualityComparable.shtml">EqualityComparable</A>, and
   can be compared for equality with <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">ForwardIterator</A>'s
   value type.
</UL>
For the second version:
<UL>
<LI>
<tt>InputIterator</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>ForwardIterator</tt> is a model of <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">Forward Iterator</A>.
<LI>
<tt>BinaryPredicate</tt> is a model of <A href="BinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryPredicate.shtml">Binary Predicate</A>.
<LI>
<tt>InputIterator</tt>'s value type is convertible to
   <tt>BinaryPredicate</tt>'s first argument type.
<LI>
<tt>ForwardIterator</tt>'s value type is convertible to
   <tt>BinaryPredicate</tt>'s second argument type.
</UL>
<h3>Preconditions</h3>
<UL>
<LI>
<tt>[first1, last1)</tt> is a valid range.
<LI>
<tt>[first2, last2)</tt> is a valid range.
</UL>
<h3>Complexity</h3>
At most <tt>(last1 - first1) * (last2 - first2)</tt> comparisons.
<h3>Example</h3>
Like <tt>strpbrk</tt>, one use for <tt>find_first_of</tt> is finding whitespace
in a string; space, tab, and newline are all whitespace characters.
<pre>
int main()
{
  const char* WS = &quot;\t\n &quot;;
  const int n_WS = strlen(WS);

  char* s1 = &quot;This sentence contains five words.&quot;;
  char* s2 = &quot;OneWord&quot;;


  char* end1 = find_first_of(s1, s1 + strlen(s1),
                             WS, WS + n_WS); 
  char* end2 = find_first_of(s2, s2 + strlen(s2),
                             WS, WS + n_WS); 

  printf(&quot;First word of s1: %.*s\n&quot;, end1 - s1, s1); 
  printf(&quot;First word of s2: %.*s\n&quot;, end2 - s2, s2); 
}
</pre>
<h3>Notes</h3>
<h3>See also</h3>
<tt><A href="find.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/find.shtml">find</A></tt>, <tt><A href="find_if.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/find_if.shtml">find_if</A></tt>, <tt><A href="search.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/search.shtml">search</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>