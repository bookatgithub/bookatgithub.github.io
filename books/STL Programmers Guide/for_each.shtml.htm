<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>for_each</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>for_each</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<pre>
template &lt;class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>, class <A href="UnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/UnaryFunction.shtml">UnaryFunction</A>&gt;
UnaryFunction for_each(InputIterator first, InputIterator last, UnaryFunction f);
</pre>                   
<h3>Description</h3>
<tt>For_each</tt> applies the <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object</A> <tt>f</tt> to each element in the
range <tt>[first, last)</tt>; <tt>f</tt>'s return value, if any, is ignored.
Applications are performed in forward order, <i>i.e.</i> from <tt>first</tt> to
<tt>last</tt>.  <tt>For_each</tt> returns the function object after it has been 
applied to each element. <A href="#1">[1]</A>
<h3>Definition</h3>
Defined in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.
<h3>Requirements on types</h3>
<UL>
<LI>
<tt>InputIterator</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>
<LI>
<tt>UnaryFunction</tt> is a model of <A href="UnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/UnaryFunction.shtml">Unary Function</A>
<LI>
<tt>UnaryFunction</tt> does not apply any non-constant operation through
   its argument.
<LI>
<tt>InputIterator</tt>'s value type is convertible to <tt>UnaryFunction</tt>'s
   argument type.       
</UL>
<h3>Preconditions</h3>
<UL>
<LI>
<tt>[first, last)</tt> is a valid range.
</UL>
<h3>Complexity</h3>
Linear.  Exactly <tt>last - first</tt> applications of <tt>UnaryFunction</tt>.
<h3>Example</h3>
<pre>
template&lt;class T&gt; struct print : public <A href="unary_function.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/unary_function.shtml">unary_function</A>&lt;T, void&gt;
{
  print(ostream&amp; out) : os(out), count(0) {}
  void operator() (T x) { os &lt;&lt; x &lt;&lt; ' '; ++count; }
  ostream&amp; os;
  int count;
};

int main()
{
  int A[] = {1, 4, 2, 8, 5, 7};
  const int N = sizeof(A) / sizeof(int);

  print&lt;int&gt; P = for_each(A, A + N, print&lt;int&gt;(cout));
  cout &lt;&lt; endl &lt;&lt; P.count &lt;&lt; &quot; objects printed.&quot; &lt;&lt; endl;
}
</pre>  
<h3>Notes</h3>
<P><A name="1">[1]</A>
This return value is sometimes useful, since a function object
may have local state.  It might, for example, count the number of
times that it is called, or it might have a status flag to indicate
whether or not a call succeeded.
<h3>See also</h3>
The <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object overview</A>, <tt><A href="count.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/count.shtml">count</A></tt>, <tt><A href="copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/copy.shtml">copy</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>