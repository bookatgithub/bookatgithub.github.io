<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>Function Objects</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>Function Objects</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "functors.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "overview.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/overview.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: functors</TD>
<TD Align=right VAlign=top><b>Component type</b>: overview</TD>
</TR>
</Table>

<h3>Summary</h3>
A <i>Function Object</i>, or <i>Functor</i> (the two terms are synonymous)
is simply any object that can be called as if it is a function.
An ordinary function is a function object, and so is a function pointer;
more generally, so is an object of a class that defines
<tt>operator()</tt>.
<h3>Description</h3>
The basic function object concepts are <A href="Generator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Generator.shtml">Generator</A>,
<A href="UnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/UnaryFunction.shtml">Unary Function</A>, and <A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">Binary Function</A>: these describe,
respectively, objects that can be called as <tt>f()</tt>, <tt>f(x)</tt>, and
<tt>f(x,y)</tt>.  (This list could obviously be extended to <i>ternary function</i>
and beyond, but, in practice, no STL algorithms require function
objects of more than two arguments.)  All other function object
concepts defined by the STL are refinements of these three.
<P>
Function objects that return <tt>bool</tt> are
an important special case.
A <A href="UnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/UnaryFunction.shtml">Unary Function</A> whose return type is <tt>bool</tt> is called a
<A href="Predicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Predicate.shtml">Predicate</A>, and a <A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">Binary Function</A> whose return type is 
<tt>bool</tt> is called a <A href="BinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryPredicate.shtml">Binary Predicate</A>.
<P>
There is an important distinction, but a somewhat subtle one, between
function objects and <i>adaptable function objects</i>. <A href="#1">[1]</A>  In general, a
function object has restrictions on the type of its argument.  The
type restrictions need not be simple, though: <tt>operator()</tt> may be
overloaded, or may be a member template, or both.  Similarly, there
need be no way for a program to determine what those restrictions are.
An adaptable function object, however, does specify what the argument
and return types are, and provides nested <tt>typedef</tt>s so that those
types can be named and used in programs.  If a type <tt>F0</tt> is a model of
<A href="AdaptableGenerator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableGenerator.shtml">Adaptable Generator</A>, then it must define
<tt>F0::result_type</tt>.  Similarly, if <tt>F1</tt> is a model of 
<A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A> then it must define 
<tt>F1::argument_type</tt> and <tt>F1::result_type</tt>, and if <tt>F2</tt> is a model
of <A href="AdaptableBinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryFunction.shtml">Adaptable Binary Function</A> then it must define 
<tt>F2::first_argument_type</tt>, <tt>F2::second_argument_type</tt>, and
<tt>F2::result_type</tt>.
The STL provides base classes <tt><A href="unary_function.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/unary_function.shtml">unary_function</A></tt> and
<tt><A href="binary_function.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binary_function.shtml">binary_function</A></tt> to simplify the definition of
<A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Functions</A> and <A href="AdaptableBinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryFunction.shtml">Adaptable Binary Functions</A>. <A href="#2">[2]</A>
<P>
Adaptable function objects are important because they can be used by
<i>function object adaptors</i>: function objects that transform or
manipulate other function objects.  The STL provides many different
function object adaptors, including <tt><A href="unary_negate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/unary_negate.shtml">unary_negate</A></tt> (which returns
the logical complement of the value returned by a particular
<A href="AdaptablePredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptablePredicate.shtml">AdaptablePredicate</A>), and <tt><A href="unary_compose.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/unary_compose.shtml">unary_compose</A></tt> and
<tt><A href="binary_compose.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binary_compose.shtml">binary_compose</A></tt>, which perform composition of function object.
<P>
Finally, the STL includes many different predefined function 
objects, including arithmetic operations
(<tt><A href="plus.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/plus.shtml">plus</A></tt>, <tt><A href="minus.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/minus.shtml">minus</A></tt>, <tt><A href="times.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/times.shtml">multiplies</A></tt>, <tt><A href="divides.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/divides.shtml">divides</A></tt>, <tt><A href="modulus.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/modulus.shtml">modulus</A></tt>,
and <tt><A href="negate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/negate.shtml">negate</A></tt>), comparisons (<tt><A href="equal_to.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/equal_to.shtml">equal_to</A></tt>, <tt><A href="not_equal_to.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/not_equal_to.shtml">not_equal_to</A></tt>
<tt><A href="greater.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/greater.shtml">greater</A></tt>, <tt><A href="less.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/less.shtml">less</A></tt>, <tt><A href="greater_equal.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/greater_equal.shtml">greater_equal</A></tt>, and <tt><A href="less_equal.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/less_equal.shtml">less_equal</A></tt>),
and logical operations (<tt><A href="logical_and.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/logical_and.shtml">logical_and</A></tt>, <tt><A href="logical_or.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/logical_or.shtml">logical_or</A></tt>, and
<tt><A href="logical_not.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/logical_not.shtml">logical_not</A></tt>).  It is possible to perform very sophisticated
operations without actually writing a new function object, simply
by combining predefined function objects and function object
adaptors.
<h3>Examples</h3>
Fill a <tt><A href="Vector.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Vector.shtml">vector</A></tt> with random numbers.  In this example, the function object
is simply a function pointer.
<pre>
    <A href="Vector.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Vector.shtml">vector</A>&lt;int&gt; V(100);
    <A href="generate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/generate.shtml">generate</A>(V.begin(), V.end(), rand);
</pre>
<P>
Sort a <tt><A href="Vector.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Vector.shtml">vector</A></tt> of <tt>double</tt> by magnitude, <i>i.e.</i> ignoring the elements' signs.
In this example, the function object is an object of a user-defined
class.
<pre>
    struct less_mag : public <A href="binary_function.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binary_function.shtml">binary_function</A>&lt;double, double, bool&gt; {
	bool operator()(double x, double y) { return fabs(x) &lt; fabs(y); }
    };

    <A href="Vector.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Vector.shtml">vector</A>&lt;double&gt; V;
    ...
    <A href="sort.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/sort.shtml">sort</A>(V.begin(), V.end(), less_mag());
</pre>
<P>
Find the sum of elements in a <tt><A href="Vector.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Vector.shtml">vector</A></tt>.  In this example, the function
object is of a user-defined class that has local state.
<pre>
    struct adder : public <A href="unary_function.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/unary_function.shtml">unary_function</A>&lt;double, void&gt;
    {
      adder() : sum(0) {}
      double sum;
      void operator()(double x) { sum += x; }
    };

    <A href="Vector.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Vector.shtml">vector</A>&lt;double&gt; V;
    ...
    adder result = <A href="for_each.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/for_each.shtml">for_each</A>(V.begin(), V.end(), adder()); <A href="#3">[3]</A>
    cout &lt;&lt; &quot;The sum is &quot; &lt;&lt; result.sum &lt;&lt; endl;
</pre>
<P>
Remove all elements from a <tt><A href="List.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/List.shtml">list</A></tt> that are greater than 100 and
less than 1000.
<pre>
    <A href="List.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/List.shtml">list</A>&lt;int&gt; L;
    ...
    <A href="List.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/List.shtml">list</A>&lt;int&gt;::iterator new_end = 
	 <A href="remove_if.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/remove_if.shtml">remove_if</A>(L.begin(), L.end(),
		   <A href="binary_compose.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binary_compose.shtml">compose2</A>(<A href="logical_and.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/logical_and.shtml">logical_and</A>&lt;bool&gt;(),
			    <A href="binder2nd.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binder2nd.shtml">bind2nd</A>(<A href="greater.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/greater.shtml">greater</A>&lt;int&gt;(), 100),
			    <A href="binder2nd.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binder2nd.shtml">bind2nd</A>(<A href="less.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/less.shtml">less</A>&lt;int&gt;(), 1000)));
    L.erase(new_end, L.end());
</pre>
<h3>Concepts</h3>
<UL>
<LI>
 <A href="Generator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Generator.shtml">Generator</A>
<LI>
 <A href="UnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/UnaryFunction.shtml">Unary Function</A>
<LI>
 <A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">Binary Function</A>
</UL>
<UL>
<LI>
 <A href="Predicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Predicate.shtml">Predicate</A>
<LI>
 <A href="BinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryPredicate.shtml">Binary Predicate</A>
</UL>
<UL>
<LI>
 <A href="AdaptableGenerator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableGenerator.shtml">Adaptable Generator</A>
<LI>
 <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>
<LI>
 <A href="AdaptableBinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryFunction.shtml">Adaptable Binary Function</A>
<LI>
 <A href="AdaptablePredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptablePredicate.shtml">Adaptable Predicate</A>
<LI>
 <A href="AdaptableBinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryPredicate.shtml">Adaptable Binary Predicate</A>
</UL>
<h3>Types</h3>
<UL>
<LI>
<tt><A href="plus.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/plus.shtml">plus</A></tt>
<LI>
<tt><A href="minus.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/minus.shtml">minus</A></tt>
<LI>
<tt><A href="times.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/times.shtml">multiplies</A></tt> (formerly called <tt>times</tt>)
<LI>
<tt><A href="divides.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/divides.shtml">divides</A></tt>
<LI>
<tt><A href="modulus.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/modulus.shtml">modulus</A></tt>,
<LI>
<tt><A href="negate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/negate.shtml">negate</A></tt>
<LI>
<tt><A href="equal_to.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/equal_to.shtml">equal_to</A></tt>
<LI>
<tt><A href="not_equal_to.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/not_equal_to.shtml">not_equal_to</A></tt>
<LI>
<tt><A href="greater.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/greater.shtml">greater</A></tt>
<LI>
<tt><A href="less.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/less.shtml">less</A></tt>
<LI>
<tt><A href="greater_equal.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/greater_equal.shtml">greater_equal</A></tt>
<LI>
<tt><A href="less_equal.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/less_equal.shtml">less_equal</A></tt>,
<LI>
<tt><A href="logical_and.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/logical_and.shtml">logical_and</A></tt>
<LI>
<tt><A href="logical_or.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/logical_or.shtml">logical_or</A></tt>
<LI>
<tt><A href="logical_not.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/logical_not.shtml">logical_not</A></tt>
<LI>
<tt><A href="subtractive_rng.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/subtractive_rng.shtml">subtractive_rng</A></tt>
</UL>
<UL>
<LI>
<tt><A href="identity.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/identity.shtml">identity</A></tt>
<LI>
<tt><A href="project1st.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/project1st.shtml">project1st</A></tt>
<LI>
<tt><A href="project2nd.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/project2nd.shtml">project2nd</A></tt>
<LI>
<tt><A href="select1st.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/select1st.shtml">select1st</A></tt>
<LI>
<tt><A href="select2nd.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/select2nd.shtml">select2nd</A></tt>
</UL>
<UL>
<LI>
<tt><A href="unary_function.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/unary_function.shtml">unary_function</A></tt>
<LI>
<tt><A href="binary_function.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binary_function.shtml">binary_function</A></tt>
</UL>
<UL>
<LI>
<tt><A href="unary_compose.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/unary_compose.shtml">unary_compose</A></tt>
<LI>
<tt><A href="binary_compose.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binary_compose.shtml">binary_compose</A></tt>
<LI>
<tt><A href="unary_negate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/unary_negate.shtml">unary_negate</A></tt>
<LI>
<tt><A href="binary_negate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binary_negate.shtml">binary_negate</A></tt>
<LI>
<tt><A href="binder1st.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binder1st.shtml">binder1st</A></tt>
<LI>
<tt><A href="binder2nd.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binder2nd.shtml">binder2nd</A></tt>
<LI>
<tt><A href="pointer_to_unary_function.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/pointer_to_unary_function.shtml">pointer_to_unary_function</A></tt>
<LI>
<tt><A href="pointer_to_binary_function.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/pointer_to_binary_function.shtml">pointer_to_binary_function</A></tt>
</UL>
<h3>Functions</h3>
<UL>
<LI>
<tt><A href="unary_compose.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/unary_compose.shtml">compose1</A></tt>
<LI>
<tt><A href="binary_compose.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binary_compose.shtml">compose2</A></tt>
<LI>
<tt><A href="unary_negate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/unary_negate.shtml">not1</A></tt>
<LI>
<tt><A href="binary_negate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binary_negate.shtml">not2</A></tt>
<LI>
<tt><A href="binder1st.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binder1st.shtml">bind1st</A></tt>
<LI>
<tt><A href="binder2nd.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binder2nd.shtml">bind2nd</A></tt>
<LI>
<tt><A href="ptr_fun.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ptr_fun.shtml">ptr_fun</A></tt>
</UL>
<h3>Notes</h3>
<P><A name="1">[1]</A>
The reason for the name &quot;adaptable function object&quot; is that
adaptable function objects may be used by function object adaptors.
<P><A name="2">[2]</A>
The <tt><A href="unary_function.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/unary_function.shtml">unary_function</A></tt> and <tt><A href="binary_function.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binary_function.shtml">binary_function</A></tt> bases are
similar to the <tt><A href="input_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/input_iterator.shtml">input_iterator</A></tt>, <tt><A href="output_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/output_iterator.shtml">output_iterator</A></tt>,
<tt><A href="forward_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/forward_iterator.shtml">forward_iterator</A></tt>, <tt><A href="bidirectional_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/bidirectional_iterator.shtml">bidirectional_iterator</A></tt>, and
<tt><A href="random_access_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/random_access_iterator.shtml">random_access_iterator</A></tt> bases: they are completely empty,
and serve only to provide type information.
<P><A name="3">[3]</A>
This is an example of how to use function objects; it is not
the recommended way of calculating the sum of elements in a vector.
The <tt><A href="accumulate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/accumulate.shtml">accumulate</A></tt> algorithm is a better way of calculating a sum.
<h3>See also</h3>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>