<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>get_temporary_buffer</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>get_temporary_buffer</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "allocators.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/allocators.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: allocators</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<pre>
template &lt;class T&gt;
<A href="pair.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/pair.shtml">pair</A>&lt;T*, ptrdiff_t&gt; get_temporary_buffer(ptrdiff_t len, T*);
</pre>                   
<h3>Description</h3>
Some algorithms, such as <tt><A href="stable_sort.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/stable_sort.shtml">stable_sort</A></tt> and <tt><A href="inplace_merge.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/inplace_merge.shtml">inplace_merge</A></tt>,
are <i>adaptive</i>: they attempt to use extra temporary memory to store
intermediate results, and their run-time complexity is better if that
extra memory is available. 
<P>
The first argument to <tt>get_temporary_buffer</tt> specifies the 
requested size of the temporary buffer, and the second specifies
the type of object that will be stored in the buffer.  That is,
<tt>get_temporary_buffer(len, (T*) 0)</tt> requests a buffer that is
aligned for objects of type <tt>T</tt> and that is large enough to hold
<tt>len</tt> objects of type <tt>T</tt>.  <A href="#1">[1]</A>  
<P>
The return value of <tt>get_temporary_buffer</tt> is a <A href="pair.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/pair.shtml">pair</A> <tt>P</tt> whose
first component is a pointer to the temporary buffer and whose second
argument indicates how large the buffer is: the buffer pointed to by
<tt>P.first</tt> is large enough to hold <tt>P.second</tt> objects of type <tt>T</tt>.
<tt>P.second</tt> is greater than or equal to <tt>0</tt> <A href="#2">[2]</A>, and less than or equal
to <tt>len</tt> <A href="#1">[1]</A>.  Note that <tt>P.first</tt> is a pointer to uninitialized
memory, rather than to actual objects of type <tt>T</tt>; this memory can be
initialized using <tt><A href="uninitialized_copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/uninitialized_copy.shtml">uninitialized_copy</A></tt>, <tt><A href="uninitialized_fill.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/uninitialized_fill.shtml">uninitialized_fill</A></tt>,
or <tt><A href="uninitialized_fill_n.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/uninitialized_fill_n.shtml">uninitialized_fill_n</A></tt>.
<P>
As the name suggests, <tt>get_temporary_buffer</tt> should only be used to
obtain temporary memory.  If a function allocates memory using
<tt>get_temporary_buffer</tt>, then it must deallocate that memory, using
<tt><A href="return_temporary_buffer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/return_temporary_buffer.shtml">return_temporary_buffer</A></tt> <A href="#3">[3]</A>, before it returns.
<P>
<b>Note:</b> <tt>get_temporary_buffer</tt> and <tt><A href="return_temporary_buffer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/return_temporary_buffer.shtml">return_temporary_buffer</A></tt> are
only provided for backward compatibility.  If you are writing new
code, you should instead use the <tt><A href="temporary_buffer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/temporary_buffer.shtml">temporary_buffer</A></tt> class.
<h3>Definition</h3>
Defined in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.  The implementation is in <A href="tempbuf.h" tppabs="http://codeguru.developer.com/cpp/stlguide/tempbuf.h">tempbuf.h</A>.
<h3>Requirements on types</h3>
<h3>Preconditions</h3>
<UL>
<LI>
<tt>len</tt> is greater than <tt>0</tt>.
</UL>
<h3>Complexity</h3>
<h3>Example</h3>
<pre>
int main()
{
  pair&lt;int*, ptrdiff_t&gt; P = get_temporary_buffer(10000, (int*) 0);
  int* buf = P.first;
  ptrdiff_t N = P.second;
  <A href="uninitialized_fill_n.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/uninitialized_fill_n.shtml">uninitialized_fill_n</A>(buf, N, 42);
  int* result = <A href="find_if.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/find_if.shtml">find_if</A>(buf, buf + N, <A href="binder2nd.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binder2nd.shtml">bind2nd</A>(<A href="not_equal_to.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/not_equal_to.shtml">not_equal_to</A>&lt;int&gt;(), 42));
  assert(result == buf + N);
  <A href="return_temporary_buffer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/return_temporary_buffer.shtml">return_temporary_buffer</A>(buf);
}        
</pre>
<h3>Notes</h3>
<P><A name="1">[1]</A>
The argument <tt>len</tt> is a request, rather than a requirement.  The
intention is that <tt>get_temporary_buffer</tt> will return as large a buffer
as can be allocated without hurting performance.  Note that
determining this maximum size is quite difficult: it 
depends on cache size, physical versus virtual memory, 
heap fragmentation, and so on.  A good implementation of
<tt>get_temporary_buffer</tt> must be nonportable.
<P><A name="2">[2]</A>
If <tt>P.second</tt> is 0, this means that <tt>get_temporary_buffer</tt>
was unable to allocate a temporary buffer at all.  In that case,
<tt>P.first</tt> is a null pointer.
<P><A name="3">[3]</A>
It is unspecified whether <tt>get_temporary_buffer</tt> is implemented
using <tt>malloc</tt>, or <tt>::operator new</tt>, or some other method.  The only
portable way to return memory that was allocated using <tt>get_temporary_buffer</tt>
is to use <tt><A href="return_temporary_buffer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/return_temporary_buffer.shtml">return_temporary_buffer</A></tt>.
<h3>See also</h3>
<tt><A href="temporary_buffer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/temporary_buffer.shtml">temporary_buffer</A></tt>, <tt><A href="return_temporary_buffer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/return_temporary_buffer.shtml">return_temporary_buffer</A></tt>, <A href="Allocators.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Allocators.shtml">Allocators</A>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>