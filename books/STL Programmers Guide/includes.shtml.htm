<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>includes</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>includes</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<tt>Includes</tt> is an overloaded name; there are actually two <tt>includes</tt>
functions.
<pre>
template &lt;class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>1, class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>2&gt;
bool includes(InputIterator1 first1, InputIterator1 last1,
              InputIterator2 first2, InputIterator2 last2);

template &lt;class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>1, class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>2, class <A href="StrictWeakOrdering.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/StrictWeakOrdering.shtml">StrictWeakOrdering</A>&gt;
bool includes(InputIterator1 first1, InputIterator1 last1,
              InputIterator2 first2, InputIterator2 last2, 
              StrictWeakOrdering comp);
</pre>                   
<h3>Description</h3>
<tt>Includes</tt> tests whether one sorted range includes another sorted
range.  That is, it returns <tt>true</tt> if and only if, for every element in
<tt>[first2, last2)</tt>, an equivalent element <A href="#1">[1]</A> is also present in
<tt>[first1, last1)</tt> <A href="#2">[2]</A>.
Both <tt>[first1, last1)</tt> and <tt>[first2, last2)</tt> must be sorted in ascending order.
<P>
The two versions of <tt>includes</tt> differ in how they define whether one
element is less than another.  The first version compares
objects using <tt>operator&lt;</tt>, and the second compares objects using
the <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object</A> <tt>comp</tt>.
<h3>Definition</h3>
Defined in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.
<h3>Requirements on types</h3>
For the first version:
<UL>
<LI>
<tt>InputIterator1</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>InputIterator2</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>InputIterator1</tt> and <tt>InputIterator2</tt> have the same value type.
<LI>
<tt>InputIterator</tt>'s value type is a model of <A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThan Comparable</A>.
<LI>
The ordering on objects of <tt>InputIterator1</tt>'s value type is a <i>strict
   weak ordering</i>, as defined in the <A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThan Comparable</A> requirements.
</UL>
For the second version:
<UL>
<LI>
<tt>InputIterator1</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>InputIterator2</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>InputIterator1</tt> and <tt>InputIterator2</tt> have the same value type.
<LI>
<tt>StrictWeakOrdering</tt> is a model of <A href="StrictWeakOrdering.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/StrictWeakOrdering.shtml">Strict Weak Ordering</A>.
<LI>
<tt>InputIterator1</tt>'s value type is convertible to <tt>StrictWeakOrdering</tt>'s
   argument type.
</UL>
<h3>Preconditions</h3>
For the first version:
<UL>
<LI>
<tt>[first1, last1)</tt> is a valid range.
<LI>
<tt>[first2, last2)</tt> is a valid range.
<LI>
<tt>[first1, last1)</tt> is ordered in ascending order according to
   <tt>operator&lt;</tt>.  That is, for every pair of iterators <tt>i</tt> and <tt>j</tt>
   in <tt>[first1, last1)</tt> such that <tt>i</tt> precedes <tt>j</tt>, 
   <tt>*j &lt; *i</tt> is <tt>false</tt>.
<LI>
<tt>[first2, last2)</tt> is ordered in ascending order according to
   <tt>operator&lt;</tt>.  That is, for every pair of iterators <tt>i</tt> and <tt>j</tt>
   in <tt>[first2, last2)</tt> such that <tt>i</tt> precedes <tt>j</tt>, 
   <tt>*j &lt; *i</tt> is <tt>false</tt>.
</UL>
For the second version:
<UL>
<LI>
<tt>[first1, last1)</tt> is a valid range.
<LI>
<tt>[first2, last2)</tt> is a valid range.
<LI>
<tt>[first1, last1)</tt> is ordered in ascending order according to
   <tt>comp</tt>.  That is, for every pair of iterators <tt>i</tt> and <tt>j</tt>
   in <tt>[first1, last1)</tt> such that <tt>i</tt> precedes <tt>j</tt>, 
   <tt>comp(*j, *i)</tt> is <tt>false</tt>.
<LI>
<tt>[first2, last2)</tt> is ordered in ascending order according to
   <tt>comp</tt>.  That is, for every pair of iterators <tt>i</tt> and <tt>j</tt>
   in <tt>[first2, last2)</tt> such that <tt>i</tt> precedes <tt>j</tt>, 
   <tt>comp(*j, *i)</tt> is <tt>false</tt>.
</UL>
<h3>Complexity</h3>
Linear.  Zero comparisons if either <tt>[first1, last1)</tt> or <tt>[first2, last2)</tt>
is an empty range, otherwise at most <tt>2 * ((last1 - first1) + (last2 -
first2)) - 1</tt> comparisons.
<h3>Example</h3>
<pre>
int A1[] = { 1, 2, 3, 4, 5, 6, 7 };
int A2[] = { 1, 4, 7 };
int A3[] = { 2, 7, 9 };
int A4[] = { 1, 1, 2, 3, 5, 8, 13, 21 };
int A5[] = { 1, 2, 13, 13 };
int A6[] = { 1, 1, 3, 21 };

const int N1 = sizeof(A1) / sizeof(int);
const int N2 = sizeof(A2) / sizeof(int);
const int N3 = sizeof(A3) / sizeof(int);
const int N4 = sizeof(A4) / sizeof(int);
const int N5 = sizeof(A5) / sizeof(int);
const int N6 = sizeof(A6) / sizeof(int);

cout &lt;&lt; &quot;A2 contained in A1: &quot; 
     &lt;&lt; (includes(A1, A1 + N1, A2, A2 + N2) ? &quot;true&quot; : &quot;false&quot;) &lt;&lt; endl;
cout &lt;&lt; &quot;A3 contained in A1: &quot; 
     &lt;&lt; (includes(A1, A1 + N2, A3, A3 + N3) ? &quot;true&quot; : &quot;false&quot;) &lt;&lt; endl;
cout &lt;&lt; &quot;A5 contained in A4: &quot; 
     &lt;&lt; (includes(A4, A4 + N4, A5, A5 + N5) ? &quot;true&quot; : &quot;false&quot;) &lt;&lt; endl;
cout &lt;&lt; &quot;A6 contained in A4: &quot; 
     &lt;&lt; (includes(A4, A4 + N4, A6, A6 + N6) ? &quot;true&quot; : &quot;false&quot;) &lt;&lt; endl;

</pre>
The output is:
<pre>
A2 contained in A1: true
A3 contained in A1: false
A5 contained in A4: false
A6 contained in A4: true
</pre>
<h3>Notes</h3>
<P><A name="1">[1]</A>
This reads &quot;an equivalent element&quot; rather than &quot;the same element&quot;
because 
the ordering by which the input ranges are sorted
is permitted to be a strict weak ordering that is not a total ordering:
there might be values <tt>x</tt> and <tt>y</tt> that are
equivalent (that is, neither <tt>x &lt; y</tt> nor <tt>y &lt; x</tt> is true) but not
equal.  See the <A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThan Comparable</A> requirements for a fuller
discussion.)   
If you're using a total ordering
(if you're using <tt>strcmp</tt>, for example, or if you're using
ordinary arithmetic comparison on integers), then you can ignore this
technical distinction: for a total ordering, equality and equivalence
are the same.
<P><A name="2">[2]</A>
Note that the range <tt>[first2, last2)</tt> may contain a consecutive range
of equivalent elements: there is no requirement that every element in
the range be unique.  In this case, <tt>includes</tt> will return <tt>false</tt>
unless, for every element in <tt>[first2, last2)</tt>, a distinct equivalent
element is also present in <tt>[first1, last1)</tt>.  That is, if a certain
value appears <tt>n</tt> times in <tt>[first2, last2)</tt> and <tt>m</tt> times in 
<tt>[first1, last1)</tt>, then <tt>includes</tt> will return <tt>false</tt> if <tt>m &lt; n</tt>.
<h3>See also</h3>
<tt><A href="set_union.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/set_union.shtml">set_union</A></tt>, <tt><A href="set_intersection.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/set_intersection.shtml">set_intersection</A></tt>, <tt><A href="set_difference.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/set_difference.shtml">set_difference</A></tt>, 
<tt><A href="set_symmetric_difference.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/set_symmetric_difference.shtml">set_symmetric_difference</A></tt>, <tt><A href="sort.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/sort.shtml">sort</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>