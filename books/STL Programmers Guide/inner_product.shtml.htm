<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>inner_product</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>inner_product</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<tt>Inner_product</tt> is an overloaded name; there are actually two
<tt>inner_product</tt> functions.
<pre>
template &lt;class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>1, class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>2, class T&gt;
T inner_product(InputIterator1 first1, InputIterator1 last1,
                InputIterator2 first2, T init);

template &lt;class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>1, class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>2, class T,
          class <A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">BinaryFunction</A>1, class <A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">BinaryFunction</A>2&gt;
T inner_product(InputIterator1 first1, InputIterator1 last1,
                InputIterator2 first2, T init, BinaryFunction1 binary_op1,
                BinaryFunction2 binary_op2);
</pre>                   
<h3>Description</h3>
<tt>Inner_product</tt> calculates a generalized inner product of the ranges
<tt>[first1, last1)</tt> and <tt>[first2, last2)</tt>.
<P>
The first version of <tt>inner_product</tt> returns
<tt>init</tt> plus the inner product of the two ranges <A href="#1">[1]</A>.  That is,
it first initializes the result to <tt>init</tt> and then, for each iterator
<tt>i</tt> in <tt>[first1, last1)</tt>, in order from the beginning to the end 
of the range, updates the result by <tt>result = result + (*i)
* *(first2 + (i - first1))</tt>.  
<P>
The second version of <tt>inner_product</tt> is identical to the first, except
that it uses two user-supplied <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function objects</A> instead of 
<tt>operator+</tt> and <tt>operator*</tt>.  That is, 
it first initializes the result to <tt>init</tt> and then, for each iterator
<tt>i</tt> in <tt>[first1, last1)</tt>, in order from the beginning to the end 
of the range, updates the result by <tt>result = binary_op1(result, 
binary_op2(*i, *(first2 + (i - first1)))</tt>. <A href="#2">[2]</A>
<h3>Definition</h3>
Defined in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.
<h3>Requirements on types</h3>
For the first version:
<UL>
<LI>
<tt>InputIterator1</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>InputIterator2</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>T</tt> is a model of <A href="Assignable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Assignable.shtml">Assignable</A>.
<LI>
If <tt>x</tt> is an object of type <tt>T</tt>, <tt>y</tt> is an object of
   <tt>InputIterator1</tt>'s value type, and <tt>z</tt> is an object
   of <tt>InputIterator2</tt>'s value type, then <tt>x + y * z</tt> is defined.
<LI>
The type of <tt>x + y * z</tt> is convertible to <tt>T</tt>.
</UL>
For the second version:
<UL>
<LI>
<tt>InputIterator1</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>InputIterator2</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>T</tt> is a model of <A href="Assignable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Assignable.shtml">Assignable</A>.
<LI>
<tt>BinaryFunction1</tt> is a model of <A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">Binary Function</A>.
<LI>
<tt>BinaryFunction2</tt> is a model of <A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">Binary Function</A>.
<LI>
<tt>InputIterator1</tt>'s value type is convertible to <tt>BinaryFunction2</tt>'s
   first argument type.
<LI>
<tt>InputIterator2</tt>'s value type is convertible to <tt>BinaryFunction2</tt>'s
   second argument type.
<LI>
<tt>T</tt> is convertible to <tt>BinaryFunction1</tt>'s first argument type.
<LI>
<tt>BinaryFunction2</tt>'s return type is convertible to <tt>BinaryFunction1</tt>'s
   second argument type.
<LI>
<tt>BinaryFunction1</tt>'s return type is convertible to <tt>T</tt>.
</UL>
<h3>Preconditions</h3>
<UL>
<LI>
<tt>[first1, last1)</tt> is a valid range.
<LI>
<tt>[first2, first2 + (last1 - first1))</tt> is a valid range.
</UL>
<h3>Complexity</h3>
Linear.  Exactly <tt>last1 - first1</tt> applications of each binary operation.
<h3>Example</h3>
<pre>
int main()
{
  int A1[] = {1, 2, 3};
  int A2[] = {4, 1, -2};
  const int N1 = sizeof(A1) / sizeof(int);

  cout &lt;&lt; &quot;The inner product of A1 and A2 is &quot; 
       &lt;&lt; inner_product(A1, A1 + N1, A2, 0)
       &lt;&lt; endl;
}
</pre>
<h3>Notes</h3>
<P><A name="1">[1]</A>
There are several reasons why it is important that <tt>inner_product</tt>
starts with the value <tt>init</tt>.  One of the most basic is that this allows
<tt>inner_product</tt> to have a well-defined result even if <tt>[first1, last1)</tt> is
an empty range: if it is empty, the return value is <tt>init</tt>.
The ordinary inner product corresponds to setting <tt>init</tt> to 0.
<P><A name="2">[2]</A>
Neither binary operation is required to be either associative or
commutative: the order of all operations is specified.
<h3>See also</h3>
<tt><A href="accumulate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/accumulate.shtml">accumulate</A></tt>, <tt><A href="partial_sum.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/partial_sum.shtml">partial_sum</A></tt>, <tt><A href="adjacent_difference.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/adjacent_difference.shtml">adjacent_difference</A></tt>,
<tt><A href="count.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/count.shtml">count</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>