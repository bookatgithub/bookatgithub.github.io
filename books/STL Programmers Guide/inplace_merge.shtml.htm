<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>inplace_merge</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>inplace_merge</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<tt>Inplace_merge</tt> is an overloaded name: there are actually two 
<tt>inplace_merge</tt> functions.
<pre>
template &lt;class <A href="BidirectionalIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BidirectionalIterator.shtml">BidirectionalIterator</A>&gt;
inline void inplace_merge(BidirectionalIterator first,
                          BidirectionalIterator middle,
                          BidirectionalIterator last);

template &lt;class <A href="BidirectionalIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BidirectionalIterator.shtml">BidirectionalIterator</A>, class <A href="StrictWeakOrdering.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/StrictWeakOrdering.shtml">StrictWeakOrdering</A>&gt;
inline void inplace_merge(BidirectionalIterator first,
                          BidirectionalIterator middle,
                          BidirectionalIterator last, StrictWeakOrdering comp);
</pre>                   
<h3>Description</h3>
<tt>Inplace_merge</tt> combines two consecutive sorted ranges <tt>[first, middle)</tt>
and <tt>[middle, last)</tt> into a single sorted range <tt>[first, last)</tt>.
That is, it starts with a range <tt>[first, last)</tt> that consists of 
two pieces each of which is in ascending order, and rearranges it
so that the entire range is in ascending order.  <tt>Inplace_merge</tt> is
stable, meaning both that
the relative order of elements within each input range is preserved, 
and that for equivalent <A href="#1">[1]</A> elements in both input ranges the element
from the first range precedes the element from the second.
<P>
The two versions of <tt>inplace_merge</tt> differ in how elements are compared.
The first version uses <tt>operator&lt;</tt>.  That is, the input ranges and
the output range satisfy the condition that for every pair of 
iterators <tt>i</tt> and <tt>j</tt> such that <tt>i</tt> precedes <tt>j</tt>, <tt>*j &lt; *i</tt> is <tt>false</tt>.
The second version uses the <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object</A> <tt>comp</tt>.  
That is, the input ranges and the output range satisfy the condition 
that for every pair of 
iterators <tt>i</tt> and <tt>j</tt> such that <tt>i</tt> precedes <tt>j</tt>, <tt>comp(*j, *i)</tt> is <tt>false</tt>.
<h3>Definition</h3>
Defined in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.
<h3>Requirements on types</h3>
For the first version:
<UL>
<LI>
<tt>BidirectionalIterator</tt> is a model of <A href="BidirectionalIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BidirectionalIterator.shtml">Bidirectional Iterator</A>.
<LI>
<tt>BidirectionalIterator</tt> is mutable.
<LI>
<tt>BidirectionalIterator</tt>'s value type is a model of <A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThan Comparable</A>.
<LI>
The ordering on objects of <tt>BidirectionalIterator</tt>'s value type is a
   <i>strict weak ordering</i>, as defined in the <A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThan Comparable</A>
   requirements.
</UL>
For the second version:
<UL>
<LI>
<tt>BidirectionalIterator</tt> is a model of <A href="BidirectionalIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BidirectionalIterator.shtml">Bidirectional Iterator</A>.
<LI>
<tt>BidirectionalIterator</tt> is mutable.
<LI>
<tt>StrictWeakOrdering</tt> is a model of <A href="StrictWeakOrdering.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/StrictWeakOrdering.shtml">Strict Weak Ordering</A>.
<LI>
<tt>BidirectionalIterator</tt>'s value type is convertible to
   <tt>StrictWeakOrdering</tt>'s argument type.
</UL>
<h3>Preconditions</h3>
For the first version:
<UL>
<LI>
<tt>[first, middle)</tt> is a valid range.
<LI>
<tt>[middle, last)</tt> is a valid range.
<LI>
<tt>[first, middle)</tt> is in ascending order.  That is, for every pair
  of iterators <tt>i</tt> and <tt>j</tt> in <tt>[first, middle)</tt> such that <tt>i</tt> precedes
  <tt>j</tt>, <tt>*j &lt; *i</tt> is <tt>false</tt>.
<LI>
<tt>[middle, last)</tt> is in ascending order.  That is, for every pair
  of iterators <tt>i</tt> and <tt>j</tt> in <tt>[middle, last)</tt> such that <tt>i</tt> precedes
  <tt>j</tt>, <tt>*j &lt; *i</tt> is <tt>false</tt>.
</UL>
For the second version:
<UL>
<LI>
<tt>[first, middle)</tt> is a valid range.
<LI>
<tt>[middle, last)</tt> is a valid range.
<LI>
<tt>[first, middle)</tt> is in ascending order.  That is, for every pair
  of iterators <tt>i</tt> and <tt>j</tt> in <tt>[first, middle)</tt> such that <tt>i</tt> precedes
  <tt>j</tt>, <tt>comp(*j, *i)</tt> is <tt>false</tt>.
<LI>
<tt>[middle, last)</tt> is in ascending order.  That is, for every pair
  of iterators <tt>i</tt> and <tt>j</tt> in <tt>[middle, last)</tt> such that <tt>i</tt> precedes
  <tt>j</tt>, <tt>comp(*j, *i)</tt> is <tt>false</tt>.
</UL>
<h3>Complexity</h3>
<tt>Inplace_merge</tt>  
is an <i>adaptive</i> algorithm: it attempts to
allocate a temporary memory buffer, and its run-time complexity depends
on how much memory is available.  
<tt>Inplace_merge</tt> performs no comparisons if
<tt>[first, last)</tt> is an empty range.  
Otherwise, worst-case behavior (if no auxiliary memory is available) is
<tt>O(N log(N))</tt>, where <tt>N</tt> is <tt>last - first</tt>,
and best case (if a large enough auxiliary memory buffer is available) is
at most <tt>(last - first) - 1</tt> comparisons.
<h3>Example</h3>
<pre>
int main()
{
  int A[] = { 1, 3, 5, 7, 2, 4, 6, 8 };

  inplace_merge(A, A + 4, A + 8);
  copy(A, A + 8, ostream_iterator&lt;int&gt;(cout, &quot; &quot;));  
  // The output is &quot;1 2 3 4 5 6 7 8&quot;.
}
</pre>
<h3>Notes</h3>
<P><A name="1">[1]</A>
Note that you may use an ordering that is a strict weak ordering
but not a total ordering; that is, there might be values <tt>x</tt> and <tt>y</tt>
such that <tt>x &lt; y</tt>, <tt>x &gt; y</tt>, and <tt>x == y</tt> are all false.  (See the
<A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThan Comparable</A> requirements for a fuller discussion.)
Two elements <tt>x</tt> and <tt>y</tt> are <i>equivalent</i> if neither <tt>x &lt; y</tt> nor
<tt>y &lt; x</tt>.  If you're using a total ordering, however (if you're
using <tt>strcmp</tt>, for example, or if you're using ordinary arithmetic
comparison on integers), then you can ignore this technical
distinction: for a total ordering, equality and equivalence are
the same.
<h3>See also</h3>
<tt><A href="merge.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/merge.shtml">merge</A></tt>, <tt><A href="set_union.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/set_union.shtml">set_union</A></tt>, <tt><A href="sort.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/sort.shtml">sort</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>