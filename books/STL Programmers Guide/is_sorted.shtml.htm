<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>is_sorted</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>is_sorted</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<tt>Is_sorted</tt> is an overloaded name; there are actually two <tt>is_sorted</tt>
functions.
<pre>
template &lt;class <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">ForwardIterator</A>&gt;
bool is_sorted(ForwardIterator first, ForwardIterator last)

template &lt;class <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">ForwardIterator</A>, class <A href="StrictWeakOrdering.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/StrictWeakOrdering.shtml">StrictWeakOrdering</A>&gt;
bool is_sorted(ForwardIterator first, ForwardIterator last,
               StrictWeakOrdering comp)
</pre>                   
<h3>Description</h3>
<tt>Is_sorted</tt> returns <tt>true</tt> if the range <tt>[first, last)</tt> is sorted
in ascending order, and <tt>false</tt> otherwise.
<P>
The two versions of <tt>is_sorted</tt> differ in how they define whether one
element is less than another.  The first version compares
objects using <tt>operator&lt;</tt>, and the second compares objects using the
<A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object</A> <tt>comp</tt>.  The
first version of <tt>is_sorted</tt> returns <tt>true</tt> if and only if, for every
iterator <tt>i</tt> in the range <tt>[first, last - 1)</tt>, <tt>*(i + 1) &lt; *i</tt> is
<tt>false</tt>.  The second version returns <tt>true</tt> if and only if,
for every iterator <tt>i</tt> in the range <tt>[first, last - 1)</tt>, <tt>comp(*(i + 1),
*i)</tt> is <tt>false</tt>
<h3>Definition</h3>
Defined in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.
<h3>Requirements on types</h3>
For the first version:
<UL>
<LI>
<tt>ForwardIterator</tt> is a model of <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">Forward Iterator</A>.
<LI>
<tt>ForwardIterator</tt>'s value type is a model of <A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThan Comparable</A>.
<LI>
The ordering on objects of <tt>ForwardIterator</tt>'s value type is a <i>strict
   weak ordering</i>, as defined in the <A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThan Comparable</A> requirements.
</UL>
For the second version:
<UL>
<LI>
<tt>ForwardIterator</tt> is a model of <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">Forward Iterator</A>.
<LI>
<tt>StrictWeakOrdering</tt> is a model of <A href="StrictWeakOrdering.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/StrictWeakOrdering.shtml">Strict Weak Ordering</A>.
<LI>
<tt>ForwardIterator</tt>'s value type is convertible to
   <tt>StrictWeakOrdering</tt>'s argument type.
</UL>
<h3>Preconditions</h3>
<UL>
<LI>
<tt>[first, last)</tt> is a valid range.
</UL>
<h3>Complexity</h3>
Linear.  Zero comparisons if <tt>[first, last)</tt> is an empty range,
otherwise at most <tt>(last - first) - 1</tt> comparisons.
<h3>Example</h3>
<pre>
int A[] = {1, 4, 2, 8, 5, 7};
const int N = sizeof(A) / sizeof(int);

assert(!is_sorted(A, A + N));
<A href="sort.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/sort.shtml">sort</A>(A, A + N);
assert(is_sorted(A, A + N));
</pre>
<h3>Notes</h3>
<h3>See also</h3>
<tt><A href="sort.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/sort.shtml">sort</A></tt>,
<tt><A href="stable_sort.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/stable_sort.shtml">stable_sort</A></tt>,
<tt><A href="partial_sort.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/partial_sort.shtml">partial_sort</A></tt>,
<tt><A href="partial_sort_copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/partial_sort_copy.shtml">partial_sort_copy</A></tt>,
<tt><A href="sort_heap.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/sort_heap.shtml">sort_heap</A></tt>,
<tt><A href="binary_search.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binary_search.shtml">binary_search</A></tt>,
<tt><A href="lower_bound.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/lower_bound.shtml">lower_bound</A></tt>,
<tt><A href="upper_bound.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/upper_bound.shtml">upper_bound</A></tt>,
<tt><A href="less.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/less.shtml">less</A>&lt;T&gt;</tt>,
<A href="StrictWeakOrdering.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/StrictWeakOrdering.shtml">StrictWeakOrdering</A>,
<A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThan Comparable</A>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>