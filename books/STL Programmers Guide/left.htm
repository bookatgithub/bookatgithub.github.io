<html>
<head>
<meta name="generator" content="CHM Decoder by GridinSoft LLC   www.gridinsoft.com"><link rel="StyleSheet" href="dtree.css" type="text/css" />
<script type="text/javascript" src="dtree.js"></script>
</head>
<body>
<!-- Generated by CHM Decoder (http://www.gridinsoft.com) -->
<div class="dtree">
<p><a href="javascript: d.openAll();">open all</a> | <a href="javascript: d.closeAll();">close all</a></p>
<script type="text/javascript"><!--
d = new dTree("d");
d.add(0,-1,"","");
d.add(1,0,"Standard Template Library Programmer's Guide","./chm.htm");
d.add(2,0,"1.Introduction to the Standard Template Library","./stl_introduction.shtml.htm");
d.add(3,0,"2.How to use the STL documentation","./doc_introduction.shtml.htm");
d.add(4,0,"3.Table of Contents: the Standard Template Library","./table_of_contents.shtml.htm");
d.add(5,0,"4.Containers","");
d.add(6,5,"1.Concepts","");
d.add(7,6,"1.General concepts","");
d.add(8,7,"Container","./Container.shtml.htm");
d.add(9,7,"Forward Container","./ForwardContainer.shtml.htm");
d.add(10,7,"Reversible Container","./ReversibleContainer.shtml.htm");
d.add(11,7,"Random Access Container","./RandomAccessContainer.shtml.htm");
d.add(12,6,"2.Sequences","");
d.add(13,12,"Sequence","./Sequence.shtml.htm");
d.add(14,12,"Front Insertion Sequence","./FrontInsertionSequence.shtml.htm");
d.add(15,12,"Back Insertion Sequence","./BackInsertionSequence.shtml.htm");
d.add(16,6,"3.Associative Containers","");
d.add(17,16,"Associative Container","./AssociativeContainer.shtml.htm");
d.add(18,16,"Simple Associative Container","./SimpleAssociativeContainer.shtml.htm");
d.add(19,16,"Pair Associative Container","./PairAssociativeContainer.shtml.htm");
d.add(20,16,"Sorted Associative Container","./SortedAssociativeContainer.shtml.htm");
d.add(21,16,"Hashed Associative Container","./HashedAssociativeContainer.shtml.htm");
d.add(22,16,"Hash Function","./HashFunction.shtml.htm");
d.add(23,16,"Unique Associative Container","./UniqueAssociativeContainer.shtml.htm");
d.add(24,16,"Multiple Associative Container","./MultipleAssociativeContainer.shtml.htm");
d.add(25,16,"Unique Sorted Associative Container","./UniqueSortedAssociativeContainer.shtml.htm");
d.add(26,16,"Multiple Sorted Associative Container","./MultipleSortedAssociativeContainer.shtml.htm");
d.add(27,16,"Unique Hashed Associative Container","./UniqueHashedAssociativeContainer.shtml.htm");
d.add(28,16,"Multiple Hashed Associative Container","./MultipleHashedAssociativeContainer.shtml.htm");
d.add(29,5,"2.Container classes","");
d.add(30,29,"1.Sequences","");
d.add(31,30,"vector몺T, Alloc못","./Vector.shtml.htm");
d.add(32,30,"deque몺T, Alloc못","./Deque.shtml.htm");
d.add(33,30,"list몺T, Alloc못","./List.shtml.htm");
d.add(34,30,"slist몺T, Alloc못","./Slist.shtml.htm");
d.add(35,30,"bit_vector","./bit_vector.shtml.htm");
d.add(36,29,"2.Associative Containers","");
d.add(37,36,"set몺Key, Compare, Alloc못","./set.shtml.htm");
d.add(38,36,"map몺Key, Data, Compare, Alloc못","./Map.shtml.htm");
d.add(39,36,"multiset몺Key, Compare, Alloc못","./multiset.shtml.htm");
d.add(40,36,"multimap몺Key, Data, Compare, Alloc못","./Multimap.shtml.htm");
d.add(41,36,"hash_set몺Key, HashFcn, EqualKey, Alloc못","./hash_set.shtml.htm");
d.add(42,36,"hash_map몺Key, Data, HashFcn, EqualKey, Alloc못","./hash_map.shtml.htm");
d.add(43,36,"hash_multiset몺Key, HashFcn, EqualKey, Alloc못","./hash_multiset.shtml.htm");
d.add(44,36,"hash_multimap몺Key, Data, HashFcn, EqualKey, Alloc못","./hash_multimap.shtml.htm");
d.add(45,36,"hash몺T못","./hash.shtml.htm");
d.add(46,29,"3.String package","");
d.add(47,46,"Character Traits","./character_traits.shtml.htm");
d.add(48,46,"char_traits","./char_traits.shtml.htm");
d.add(49,46,"basic_string몺charT, traits, Alloc못","./basic_string.shtml.htm");
d.add(50,29,"4.rope","");
d.add(51,50,"rope몺T, Alloc못","./Rope.shtml.htm");
d.add(52,29,"5.Container adaptors","");
d.add(53,52,"stack몺T, Sequence못","./stack.shtml.htm");
d.add(54,52,"queue몺T, Sequence못","./queue.shtml.htm");
d.add(55,52,"priority_queue몺T, Sequence, Compare못","./priority_queue.shtml.htm");
d.add(56,29,"6.bitset","");
d.add(57,56,"bitset몺N못","./bitset.shtml.htm");
d.add(58,0,"5.Iterators","");
d.add(59,58,"1.Introduction","./Iterators.shtml.htm");
d.add(60,58,"2.Concepts","");
d.add(61,60,"Trivial Iterator","./trivial.shtml.htm");
d.add(62,60,"Input Iterator","./InputIterator.shtml.htm");
d.add(63,60,"Output Iterator","./OutputIterator.shtml.htm");
d.add(64,60,"Forward Iterator","./ForwardIterator.shtml.htm");
d.add(65,60,"Bidirectional Iterator","./BidirectionalIterator.shtml.htm");
d.add(66,60,"Random Access Iterator","./RandomAccessIterator.shtml.htm");
d.add(67,58,"3.Iterator Tags","");
d.add(68,67,"Introduction","./iterator_tags.shtml.htm");
d.add(69,67,"iterator_traits몺Iterator못","./iterator_traits.shtml.htm");
d.add(70,67,"iterator_category","./iterator_category.shtml.htm");
d.add(71,67,"distance_type","./distance_type.shtml.htm");
d.add(72,67,"value_type","./value_type.shtml.htm");
d.add(73,67,"Iterator tag classes","");
d.add(74,73,"input_iterator_tag","./input_iterator_tag.shtml.htm");
d.add(75,73,"output_iterator_tag","./output_iterator_tag.shtml.htm");
d.add(76,73,"forward_iterator_tag","./forward_iterator_tag.shtml.htm");
d.add(77,73,"bidirectional_iterator_tag","./bidirectional_iterator_tag.shtml.htm");
d.add(78,73,"random_access_iterator_tag","./random_access_iterator_tag.shtml.htm");
d.add(79,67,"Iterator base classes","");
d.add(80,79,"input_iterator몺T, Distance못","./input_iterator.shtml.htm");
d.add(81,79,"output_iterator","./output_iterator.shtml.htm");
d.add(82,79,"forward_iterator몺T, Distance못","./forward_iterator.shtml.htm");
d.add(83,79,"bidirectional_iterator몺T, Distance못","./bidirectional_iterator.shtml.htm");
d.add(84,79,"random_access_iterator몺T, Distance못","./random_access_iterator.shtml.htm");
d.add(85,58,"4.Iterator functions","");
d.add(86,85,"distance","./distance.shtml.htm");
d.add(87,85,"advance","./advance.shtml.htm");
d.add(88,58,"5.Iterator classes","");
d.add(89,88,"istream_iterator몺T, Distance못","./istream_iterator.shtml.htm");
d.add(90,88,"ostream_iterator몺T못","./ostream_iterator.shtml.htm");
d.add(91,88,"front_insert_iterator몺FrontInsertionSequence못","./front_insert_iterator.shtml.htm");
d.add(92,88,"back_insert_iterator몺BackInsertionSequence못","./back_insert_iterator.shtml.htm");
d.add(93,88,"insert_iterator몺Container못","./insert_iterator.shtml.htm");
d.add(94,88,"reverse_iterator몺RandomAccessIterator, T, Reference, Distance못","./ReverseIterator.shtml.htm");
d.add(95,88,"reverse_bidirectional_iterator몺BidirectionalIterator, T, Reference, Distance못","./ReverseBidirectionalIterator.shtml.htm");
d.add(96,88,"raw_storage_iterator몺ForwardIterator, T못","./raw_storage_iterator.shtml.htm");
d.add(97,88,"sequence_buffer몺Container, buf_sz못","./sequence_buffer.shtml.htm");
d.add(98,0,"6.Algorithms","");
d.add(99,98,"1.Non-mutating algorithms","");
d.add(100,99,"for_each","./for_each.shtml.htm");
d.add(101,99,"find","./find.shtml.htm");
d.add(102,99,"find_if","./find_if.shtml.htm");
d.add(103,99,"adjacent_find","./adjacent_find.shtml.htm");
d.add(104,99,"find_first_of","./find_first_of.shtml.htm");
d.add(105,99,"count","./count.shtml.htm");
d.add(106,99,"count_if","./count_if.shtml.htm");
d.add(107,99,"mismatch","./mismatch.shtml.htm");
d.add(108,99,"equal","./equal.shtml.htm");
d.add(109,99,"search","./search.shtml.htm");
d.add(110,99,"search_n","./search_n.shtml.htm");
d.add(111,99,"find_end","./find_end.shtml.htm");
d.add(112,98,"2.Mutating algorithms","");
d.add(113,112,"copy","./copy.shtml.htm");
d.add(114,112,"copy_n","./copy_n.shtml.htm");
d.add(115,112,"copy_backward","./copy_backward.shtml.htm");
d.add(116,112,"Swap","");
d.add(117,116,"swap","./swap.shtml.htm");
d.add(118,116,"iter_swap","./iter_swap.shtml.htm");
d.add(119,116,"swap_ranges","./swap_ranges.shtml.htm");
d.add(120,112,"transform","./transform.shtml.htm");
d.add(121,112,"Replace","");
d.add(122,121,"replace","./replace.shtml.htm");
d.add(123,121,"replace_if","./replace_if.shtml.htm");
d.add(124,121,"replace_copy","./replace_copy.shtml.htm");
d.add(125,121,"replace_copy_if","./replace_copy_if.shtml.htm");
d.add(126,112,"fill","./fill.shtml.htm");
d.add(127,112,"fill_n","./fill_n.shtml.htm");
d.add(128,112,"generate","./generate.shtml.htm");
d.add(129,112,"generate_n","./generate_n.shtml.htm");
d.add(130,112,"Remove","");
d.add(131,130,"remove","./remove.shtml.htm");
d.add(132,130,"remove_if","./remove_if.shtml.htm");
d.add(133,130,"remove_copy","./remove_copy.shtml.htm");
d.add(134,130,"remove_copy_if","./remove_copy_if.shtml.htm");
d.add(135,112,"unique","./unique.shtml.htm");
d.add(136,112,"unique_copy","unique_copy.shtml.htm");
d.add(137,112,"reverse","./reverse.shtml.htm");
d.add(138,112,"reverse_copy","./reverse_copy.shtml.htm");
d.add(139,112,"rotate","./rotate.shtml.htm");
d.add(140,112,"rotate_copy","./rotate_copy.shtml.htm");
d.add(141,112,"random_shuffle","./random_shuffle.shtml.htm");
d.add(142,112,"random_sample","./random_sample.shtml.htm");
d.add(143,112,"random_sample_n","./random_sample_n.shtml.htm");
d.add(144,112,"partition","./partition.shtml.htm");
d.add(145,112,"stable_partition","./stable_partition.shtml.htm");
d.add(146,98,"3.Sorting","");
d.add(147,146,"Sort","");
d.add(148,147,"sort","./sort.shtml.htm");
d.add(149,147,"stable_sort","./stable_sort.shtml.htm");
d.add(150,147,"partial_sort","./partial_sort.shtml.htm");
d.add(151,147,"partial_sort_copy","./partial_sort_copy.shtml.htm");
d.add(152,147,"is_sorted","./is_sorted.shtml.htm");
d.add(153,146,"nth_element","./nth_element.shtml.htm");
d.add(154,146,"Binary search","");
d.add(155,154,"lower_bound","./lower_bound.shtml.htm");
d.add(156,154,"upper_bound","./upper_bound.shtml.htm");
d.add(157,154,"equal_range","./equal_range.shtml.htm");
d.add(158,154,"binary_search","./binary_search.shtml.htm");
d.add(159,146,"merge","./merge.shtml.htm");
d.add(160,146,"inplace_merge","./inplace_merge.shtml.htm");
d.add(161,146,"Set operations on sorted ranges","");
d.add(162,161,"includes","./includes.shtml.htm");
d.add(163,161,"set_union","./set_union.shtml.htm");
d.add(164,161,"set_intersection","./set_intersection.shtml.htm");
d.add(165,161,"set_difference","./set_difference.shtml.htm");
d.add(166,161,"set_symmetric_difference","./set_symmetric_difference.shtml.htm");
d.add(167,146,"Heap operations","");
d.add(168,167,"push_heap","./push_heap.shtml.htm");
d.add(169,167,"pop_heap","./pop_heap.shtml.htm");
d.add(170,167,"make_heap","./make_heap.shtml.htm");
d.add(171,167,"sort_heap","./sort_heap.shtml.htm");
d.add(172,167,"is_heap","./is_heap.shtml.htm");
d.add(173,146,"Minimum and maximum","");
d.add(174,173,"min","./min.shtml.htm");
d.add(175,173,"max","./max.shtml.htm");
d.add(176,173,"min_element","./min_element.shtml.htm");
d.add(177,173,"max_element","./max_element.shtml.htm");
d.add(178,146,"lexicographical_compare","./lexicographical_compare.shtml.htm");
d.add(179,146,"lexicographical_compare_3way","./lexicographical_compare_3way.shtml.htm");
d.add(180,146,"next_permutation","./next_permutation.shtml.htm");
d.add(181,146,"prev_permutation","./prev_permutation.shtml.htm");
d.add(182,98,"4.Generalized numeric algorithms","");
d.add(183,182,"iota","./iota.shtml.htm");
d.add(184,182,"accumulate","./accumulate.shtml.htm");
d.add(185,182,"inner_product","./inner_product.shtml.htm");
d.add(186,182,"partial_sum","./partial_sum.shtml.htm");
d.add(187,182,"adjacent_difference","./adjacent_difference.shtml.htm");
d.add(188,182,"power","./power.shtml.htm");
d.add(189,0,"7.Function Objects","");
d.add(190,189,"Introduction","./functors.shtml.htm");
d.add(191,189,"Concepts","");
d.add(192,191,"Generator","./Generator.shtml.htm");
d.add(193,191,"Unary Function","./UnaryFunction.shtml.htm");
d.add(194,191,"Binary Function","./BinaryFunction.shtml.htm");
d.add(195,191,"Adaptable Generator","./AdaptableGenerator.shtml.htm");
d.add(196,191,"Adaptable Unary Function","./AdaptableUnaryFunction.shtml.htm");
d.add(197,191,"Adaptable Binary Function","./AdaptableBinaryFunction.shtml.htm");
d.add(198,191,"Predicates","");
d.add(199,198,"Predicate","./Predicate.shtml.htm");
d.add(200,198,"Binary Predicate","./BinaryPredicate.shtml.htm");
d.add(201,198,"Adaptable Predicate","./AdaptablePredicate.shtml.htm");
d.add(202,198,"Adaptable Binary Predicate","AdaptableBinaryPredicate.shtml.htm");
d.add(203,198,"Strict Weak Ordering","./StrictWeakOrdering.shtml.htm");
d.add(204,191,"MonoidOperation","./MonoidOperation.shtml.htm");
d.add(205,191,"Random Number Generator","./RandomNumberGenerator.shtml.htm");
d.add(206,189,"Predefined function objects","");
d.add(207,206,"Arithmetic operations","");
d.add(208,207,"plus몺T못","./plus.shtml.htm");
d.add(209,207,"minus몺T못","./minus.shtml.htm");
d.add(210,207,"multiplies몺T못","./times.shtml.htm");
d.add(211,207,"divides몺T못","./divides.shtml.htm");
d.add(212,207,"modulus몺T못","./modulus.shtml.htm");
d.add(213,207,"negate몺T못","./negate.shtml.htm");
d.add(214,206,"Comparisons","");
d.add(215,214,"equal_to몺T못","./equal_to.shtml.htm");
d.add(216,214,"not_equal_to몺T못","./not_equal_to.shtml.htm");
d.add(217,214,"less몺T못","./less.shtml.htm");
d.add(218,214,"greater몺T못","./greater.shtml.htm");
d.add(219,214,"less_equal몺T못","./less_equal.shtml.htm");
d.add(220,214,"greater_equal몺T못","./greater_equal.shtml.htm");
d.add(221,206,"Logical operations","");
d.add(222,221,"logical_and몺T못","./logical_and.shtml.htm");
d.add(223,221,"logical_or몺T못","./logical_or.shtml.htm");
d.add(224,221,"logical_not몺T못","./logical_not.shtml.htm");
d.add(225,206,"Generalized identity operations","");
d.add(226,225,"identity몺T못","./identity.shtml.htm");
d.add(227,225,"project1st몺Arg1, Arg2못","./project1st.shtml.htm");
d.add(228,225,"project2nd몺Arg1, Arg2못","./project2nd.shtml.htm");
d.add(229,225,"select1st몺Pair못","./select1st.shtml.htm");
d.add(230,225,"select2nd몺Pair못","./select2nd.shtml.htm");
d.add(231,206,"subtractive_rng","./subtractive_rng.shtml.htm");
d.add(232,189,"Function object adaptors","");
d.add(233,232,"binder1st몺AdaptableBinaryFunction못","./binder1st.shtml.htm");
d.add(234,232,"binder2nd몺AdaptableBinaryFunction못","./binder2nd.shtml.htm");
d.add(235,232,"ptr_fun","./ptr_fun.shtml.htm");
d.add(236,232,"pointer_to_unary_function몺Arg, Result못","./pointer_to_unary_function.shtml.htm");
d.add(237,232,"pointer_to_binary_function몺Arg1, Arg2, Result못","./pointer_to_binary_function.shtml.htm");
d.add(238,232,"unary_negate몺AdaptablePredicate못","./unary_negate.shtml.htm");
d.add(239,232,"binary_negate몺AdaptableBinaryPredicate못","./binary_negate.shtml.htm");
d.add(240,232,"unary_compose몺AdaptableUnaryFunction1,AdaptableUnaryFunction2못","./unary_compose.shtml.htm");
d.add(241,232,"binary_compose몺AdaptableBinaryFunction,AdaptableUnaryFunction1,AdaptableUnaryFunction2못","./binary_compose.shtml.htm");
d.add(242,232,"Member function adaptors","");
d.add(243,242,"mem_fun_t몺Result, X못","./mem_fun_t.shtml.htm");
d.add(244,242,"mem_fun_ref_t몺Result, X못","./mem_fun_ref_t.shtml.htm");
d.add(245,242,"mem_fun1_t몺Result, X, Arg못","./mem_fun1_t.shtml.htm");
d.add(246,242,"mem_fun1_ref_t몺Result, X, Arg못","./mem_fun1_ref_t.shtml.htm");
d.add(247,0,"8.Utilities","");
d.add(248,247,"Concepts","");
d.add(249,248,"Assignable","./Assignable.shtml.htm");
d.add(250,248,"Default Constructible","./DefaultConstructible.shtml.htm");
d.add(251,248,"Equality Comparable","./EqualityComparable.shtml.htm");
d.add(252,248,"LessThan Comparable","./LessThanComparable.shtml.htm");
d.add(253,247,"Functions","");
d.add(254,253,"Relational Operators","./operators.shtml.htm");
d.add(255,247,"Classes","");
d.add(256,255,"pair몺T1, T2못","./pair.shtml.htm");
d.add(257,0,"9.Memory Allocation","");
d.add(258,257,"Classes","");
d.add(259,258,"Allocators","./Allocators.shtml.htm");
d.add(260,258,"raw_storage_iterator","raw_storage_iterator.shtml.htm");
d.add(261,257,"Functions","");
d.add(262,261,"construct","./construct.shtml.htm");
d.add(263,261,"destroy","./destroy.shtml.htm");
d.add(264,261,"uninitialized_copy","./uninitialized_copy.shtml.htm");
d.add(265,261,"uninitialized_copy_n","./uninitialized_copy_n.shtml.htm");
d.add(266,261,"uninitialized_fill","./uninitialized_fill.shtml.htm");
d.add(267,261,"uninitialized_fill_n","./uninitialized_fill_n.shtml.htm");
d.add(268,261,"temporary_buffer몺ForwardIterator, T못","./temporary_buffer.shtml.htm");
d.add(269,261,"get_temporary_buffer","./get_temporary_buffer.shtml.htm");
d.add(270,261,"return_temporary_buffer","./return_temporary_buffer.shtml.htm");
d.add(271,0,"10.Design documents","./design_documents.shtml.htm");
d.add(272,271,"Thread-safety for SGI STL","./thread_safety.shtml.htm");
d.add(273,271,"STL Complexity Specifications","./complexity.shtml.htm");
d.add(274,271,"Strings in SGI STL","./string_discussion.shtml.htm");
d.add(275,0,"Index","./stl_index.shtml.htm");
d.add(276,0,"Index ( by Category )","./stl_index_cat.shtml.htm");

document.write(d);
//-->
</script>
</div>
<p \><hr size="1" \>
<font class="dtree">Generated by <a target="_blank" href="http://www.gridinsoft.com">CHM Decoder</a></font><br><br>
<font class="dtree">Need you translate this to other language?<br>Get <a target="_blank" href="http://www.chmeditor.com">CHM Editor</a> Now!</font>
</body>
</html>
