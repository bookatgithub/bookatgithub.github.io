<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>mem_fun1_t¡´Result, X, Arg¡µ</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>mem_fun1_t&lt;Result, X, Arg&gt;</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "functors.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "type.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/type.gif" Alt=""   WIDTH = "194"  HEIGHT = "39" ></TD>
</TR>
<TR>
<TD Align=left><Img src = "adaptors.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/adaptors.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Categories</b>: functors, adaptors</TD>
<TD Align=right VAlign=top><b>Component type</b>: type</TD>
</TR>
</Table>

<h3>Description</h3>
<tt>Mem_fun1_t</tt> is an adaptor for member functions.  If <tt>X</tt> is some class
with a member function <tt>Result X::f(Arg)</tt> (that is, a member function
that takes one argument of type <tt>Arg</tt> and that returns a value of type
<tt>Result</tt> <A href="#1">[1]</A>), then a <tt>mem_fun1_t&lt;Result, X, Arg&gt;</tt> is a
<A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object</A> adaptor that makes it possible to call <tt>f</tt> as if
it were an ordinary function instead of a member function.
<P>
<tt>Mem_fun1_t&lt;Result, X, Arg&gt;</tt>'s constructor takes a pointer to one of
<tt>X</tt>'s member functions.  Then, like all function objects, <tt>mem_fun1_t</tt>
has an <tt>operator()</tt> that allows the <tt>mem_fun1_t</tt> to be invoked with
ordinary function call syntax.  In this case, <tt>mem_fun1_t</tt>'s
<tt>operator()</tt> takes two arguments; the first is of type <tt>X*</tt> and the
second is of type <tt>Arg</tt>.
<P>
If <tt>F</tt> is a <tt>mem_fun1_t</tt> that was constructed to use the member
function <tt>X::f</tt>, and if <tt>x</tt> is a pointer of type <tt>X*</tt> and <tt>a</tt> is a
value of type <tt>Arg</tt>, then the expression <tt>F(x, a)</tt> is equivalent to
the expression <tt>x-&gt;f(a)</tt>.  The difference is simply that <tt>F</tt> can be
passed to STL algorithms whose arguments must be function objects.
<P>
<tt>Mem_fun1_t</tt> is one of a family of member function adaptors.  These 
adaptors are useful if you want to combine generic programming
with inheritance and polymorphism, since, in C++, polymorphism
involves calling member functions through pointers or references.
<P>
As with many other adaptors, it is usually inconvenient to use 
<tt>mem_fun1_t</tt>'s constructor directly.  It is usually better to use
the helper function <tt>mem_fun1</tt> instead.
<h3>Example</h3>
<pre>
struct Operation {
  virtual double eval(double) = 0;
};

struct Square : public Operation {
  double eval(double x) { return x * x; }
};

struct Negate : public Operation {
  double eval(double x) { return -x; }
};

int main() {
  <A href="Vector.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Vector.shtml">vector</A>&lt;Operation*&gt; operations;
  <A href="Vector.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Vector.shtml">vector</A>&lt;double&gt; operands;

  operations.push_back(new Square);
  operations.push_back(new Square);
  operations.push_back(new Negate);
  operations.push_back(new Negate);
  operations.push_back(new Square);

  operands.push_back(1);
  operands.push_back(2);
  operands.push_back(3);
  operands.push_back(4);
  operands.push_back(5);

  <A href="transform.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/transform.shtml">transform</A>(operations.begin(), operations.end(),
            operands.begin(),
            <A href="ostream_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ostream_iterator.shtml">ostream_iterator</A>&lt;double&gt;(cout, &quot;\n&quot;),
            mem_fun1(Operation::eval));
}
</pre>
<h3>Definition</h3>
Defined in <A href="javascript:if(confirm('http://codeguru.developer.com/cpp/stlguide/function.h  \n\nThis file was not retrieved by Teleport Pro, because the server reports that an error occurred that prevented retrieval.  \n\nDo you want to open it from the server?'))window.location='http://codeguru.developer.com/cpp/stlguide/function.h'" tppabs="http://codeguru.developer.com/cpp/stlguide/function.h">function.h</A>.
<h3>Template parameters</h3>
<Table border>
<TR>
<TH>
Parameter
</TH>
<TH>
Description
</TH>
<TH>
Default
</TH>
</TR>
<TR>
<TD VAlign=top>
<tt>Result</tt>
</TD>
<TD VAlign=top>
The member function's return type.
</TD>
<TD VAlign=top>
&nbsp;
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>X</tt>
</TD>
<TD VAlign=top>
The class whose member function the <tt>mem_fun1_t</tt> invokes.
</TD>
<TD VAlign=top>
&nbsp;
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>Arg</tt>
</TD>
<TD VAlign=top>
The member function's argument type.
</TD>
<TD VAlign=top>
&nbsp;
</TD>
</tr>
</table>
<h3>Model of</h3>
<A href="AdaptableBinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryFunction.shtml">Adaptable Binary Function</A>
<h3>Type requirements</h3>
<UL>
<LI>
<tt>X</tt> has at least one member function that takes a single argument
   of type <tt>Arg</tt> and that returns a value of type <tt>Result</tt>. <A href="#1">[1]</A>
</UL>
<h3>Public base classes</h3>
<tt><A href="binary_function.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binary_function.shtml">binary_function</A>&lt;X*, Arg, Result&gt;</tt>
<h3>Members</h3>
<Table border>
<TR>
<TH>
Member
</TH>
<TH>
Where defined
</TH>
<TH>
Description
</TH>
</TR>
<TR>
<TD VAlign=top>
<tt>first_argument_type</tt>
</TD>
<TD VAlign=top>
 <A href="AdaptableBinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryFunction.shtml">Adaptable Binary Function</A>
</TD>
<TD VAlign=top>
The type of the first argument: <tt>X*</tt>
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>second_argument_type</tt>
</TD>
<TD VAlign=top>
 <A href="AdaptableBinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryFunction.shtml">Adaptable Binary Function</A>
</TD>
<TD VAlign=top>
The type of the second argument: <tt>Arg</tt>
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>result_type</tt>
</TD>
<TD VAlign=top>
 <A href="AdaptableBinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryFunction.shtml">Adaptable Binary Function</A>
</TD>
<TD VAlign=top>
The type of the result: <tt>Result</tt>
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
Result operator()(X* x, Arg a) const
</pre>
</TD>
<TD VAlign=top>
 <A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">Binary Function</A>
</TD>
<TD VAlign=top>
Function call operator.  Invokes <tt>x-&gt;f(a)</tt>, where <tt>f</tt> is
   the member function that was passed to the constructor.
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
explicit mem_fun1_t(Result (X::*f)(Arg))
</pre>
</TD>
<TD VAlign=top>
<tt>mem_fun1_t</tt>
</TD>
<TD VAlign=top>
See below.
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
template &lt;class Result, class X, class Arg&gt;
mem_fun1_t&lt;Result, X, Arg&gt;
mem_fun1(Result (X::*f)(Arg));
</pre>
</TD>
<TD VAlign=top>
<tt>mem_fun1_t</tt>
</TD>
<TD VAlign=top>
See below.
</TD>
</tr>
</table>
<h3>New members</h3>
These members are not defined in the 
<A href="AdaptableBinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableBinaryFunction.shtml">Adaptable Binary Function</A>
requirements, but are specific to 
<tt>mem_fun1_t</tt>.
<Table border>
<TR>
<TH>
Member
</TH>
<TH>
Description
</TH>
</TR>
<TR>
<TD VAlign=top>
<pre>
explicit mem_fun1_t(Result (X::*f)(Arg))
</pre>
</TD>
<TD VAlign=top>
The constructor.  Creates a <tt>mem_fun1_t</tt> that calls the member
   function <tt>f</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
template &lt;class Result, class X, class Arg&gt;
mem_fun1_t&lt;Result, X, Arg&gt;
mem_fun1(Result (X::*f)(Arg));
</pre>
</TD>
<TD VAlign=top>
If <tt>f</tt> is of type <tt>Result (X::*)(Arg)</tt> then <tt>mem_fun1(f)</tt> is the
same as <tt>mem_fun1_t&lt;Result, X, Arg&gt;(f)</tt>, but is more convenient.  This is a
global function, not a member function.
</TD>
</tr>
</table>
<h3>Notes</h3>
<P><A name="1">[1]</A>
The type <tt>Result</tt> is permitted to be <tt>void</tt>.  That is, this
adaptor may be used for functions that return no value.  However, this
presents implementation difficulties.  According to the draft C++
standard, it is possible to return from a <tt>void</tt> function by writing
<tt>return void</tt> instead of just <tt>return</tt>.  At present, however (early
1998), very few compilers support that feature.  As a substitute,
then, <tt>mem_fun1_t</tt> uses partial specialization to support <tt>void</tt> member
functions.  If your compiler has not implemented partial
specialization, then you will not be able to use <tt>mem_fun1_t</tt> with
member functions whose return type is <tt>void</tt>.
<h3>See also</h3>
<tt><A href="mem_fun_t.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/mem_fun_t.shtml">mem_fun_t</A></tt>, <tt><A href="mem_fun_ref_t.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/mem_fun_ref_t.shtml">mem_fun_ref_t</A></tt>, <tt><A href="mem_fun1_ref_t.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/mem_fun1_ref_t.shtml">mem_fun1_ref_t</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>