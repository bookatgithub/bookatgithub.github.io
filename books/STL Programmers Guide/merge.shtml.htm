<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>merge</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>merge</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<tt>Merge</tt> is an overloaded name: there are actually two <tt>merge</tt> functions.
<pre>
template &lt;class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>1, class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>2, class <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">OutputIterator</A>&gt;
OutputIterator merge(InputIterator1 first1, InputIterator1 last1,
                     InputIterator2 first2, InputIterator2 last2,
                     OutputIterator result);

template &lt;class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>1, class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>2, class <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">OutputIterator</A>,
          class <A href="StrictWeakOrdering.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/StrictWeakOrdering.shtml">StrictWeakOrdering</A>&gt;
OutputIterator merge(InputIterator1 first1, InputIterator1 last1,
                     InputIterator2 first2, InputIterator2 last2,
                     OutputIterator result, StrictWeakOrdering comp);
</pre>                   
<h3>Description</h3>
<tt>Merge</tt> combines two sorted ranges <tt>[first1, last1)</tt> and 
<tt>[first2, last2)</tt> into a single sorted range.  That is, it copies
elements from <tt>[first1, last1)</tt> and <tt>[first2, last2)</tt> into
<tt>[result, result + (last1 - first1) + (last2 - first2))</tt> such that
the resulting range is in ascending order.  
<tt>Merge</tt> is stable, meaning both that
the relative order of elements within each input range is preserved, 
and that for equivalent <A href="#1">[1]</A> elements in both input ranges the element
from the first range precedes the element from the second.
The return value is <tt>result + (last1 - first1) + (last2 - first2)</tt>.
<P>
The two versions of <tt>merge</tt> differ in how elements are compared.
The first version uses <tt>operator&lt;</tt>.  That is, the input ranges and
the output range satisfy the condition that for every pair of 
iterators <tt>i</tt> and <tt>j</tt> such that <tt>i</tt> precedes <tt>j</tt>, <tt>*j &lt; *i</tt> is <tt>false</tt>.
The second version uses the <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object</A> <tt>comp</tt>.  
That is, the input ranges and the output range satisfy the condition 
that for every pair of 
iterators <tt>i</tt> and <tt>j</tt> such that <tt>i</tt> precedes <tt>j</tt>, <tt>comp(*j, *i)</tt> is <tt>false</tt>.
<h3>Definition</h3>
Defined in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.
<h3>Requirements on types</h3>
For the first version:
<UL>
<LI>
<tt>InputIterator1</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>InputIterator2</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>InputIterator1</tt>'s value type is the same type as <tt>InputIterator2</tt>'s
   value type.
<LI>
<tt>InputIterator1</tt>'s value type is a model of <A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThan Comparable</A>.
<LI>
The ordering on objects of <tt>InputIterator1</tt>'s value type is a
   <i>strict weak ordering</i>, as defined in the <A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThan Comparable</A>
   requirements.
<LI>
<tt>InputIterator1</tt>'s value type is convertible to a type in <tt>OutputIterator</tt>'s
   set of value types.
</UL>
For the second version:
<UL>
<LI>
<tt>InputIterator1</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>InputIterator2</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>InputIterator1</tt>'s value type is the same type as <tt>InputIterator2</tt>'s
   value type.
<LI>
<tt>StrictWeakOrdering</tt> is a model of <A href="StrictWeakOrdering.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/StrictWeakOrdering.shtml">Strict Weak Ordering</A>.
<LI>
<tt>InputIterator1</tt>'s value type is convertible to <tt>StrictWeakOrdering</tt>'s
   argument type.
<LI>
<tt>InputIterator1</tt>'s value type is convertible to a type in <tt>OutputIterator</tt>'s
   set of value types.
</UL>
<h3>Preconditions</h3>
For the first version:
<UL>
<LI>
<tt>[first1, last1)</tt> is a valid range.
<LI>
<tt>[first1, last1)</tt> is in ascending order.  That is, for every pair
  of iterators <tt>i</tt> and <tt>j</tt> in <tt>[first1, last1)</tt> such that <tt>i</tt> precedes
  <tt>j</tt>, <tt>*j &lt; *i</tt> is <tt>false</tt>.
<LI>
<tt>[first2, last2)</tt> is a valid range.
<LI>
<tt>[first2, last2)</tt> is in ascending order.  That is, for every pair
  of iterators <tt>i</tt> and <tt>j</tt> in <tt>[first2, last2)</tt> such that <tt>i</tt> precedes
  <tt>j</tt>, <tt>*j &lt; *i</tt> is <tt>false</tt>.
<LI>
The ranges <tt>[first1, last1)</tt> and
   <tt>[result, result + (last1 - first1) + (last2 - first2))</tt> do not overlap.
<LI>
The ranges <tt>[first2, last2)</tt> and
   <tt>[result, result + (last1 - first1) + (last2 - first2))</tt> do not overlap.
<LI>
There is enough space to hold all of the elements being copied.
   More formally, the requirement is that 
   <tt>[result, result + (last1 - first1) + (last2 - first2))</tt> is a valid range. 
</UL>
For the second version:
<UL>
<LI>
<tt>[first1, last1)</tt> is a valid range.
<LI>
<tt>[first1, last1)</tt> is in ascending order.  That is, for every pair
  of iterators <tt>i</tt> and <tt>j</tt> in <tt>[first1, last1)</tt> such that <tt>i</tt> precedes
  <tt>j</tt>, <tt>comp(*j, *i)</tt> is <tt>false</tt>.
<LI>
<tt>[first2, last2)</tt> is a valid range.
<LI>
<tt>[first2, last2)</tt> is in ascending order.  That is, for every pair
  of iterators <tt>i</tt> and <tt>j</tt> in <tt>[first2, last2)</tt> such that <tt>i</tt> precedes
  <tt>j</tt>, <tt>comp(*j, *i)</tt> is <tt>false</tt>.
<LI>
The ranges <tt>[first1, last1)</tt> and
   <tt>[result, result + (last1 - first1) + (last2 - first2))</tt> do not overlap.
<LI>
The ranges <tt>[first2, last2)</tt> and
   <tt>[result, result + (last1 - first1) + (last2 - first2))</tt> do not overlap.
<LI>
There is enough space to hold all of the elements being copied.
   More formally, the requirement is that 
   <tt>[result, result + (last1 - first1) + (last2 - first2))</tt> is a valid range. 
</UL>
<h3>Complexity</h3>
Linear.  No comparisons if both <tt>[first1, last1)</tt> and <tt>[first2, last2)</tt>
are empty ranges, otherwise at most <tt>(last1 - first1) + (last2 -
first2) - 1</tt> comparisons.
<h3>Example</h3>
<pre>
int main()
{
  int A1[] = { 1, 3, 5, 7 };
  int A2[] = { 2, 4, 6, 8 };
  const int N1 = sizeof(A1) / sizeof(int);
  const int N2 = sizeof(A2) / sizeof(int);

  merge(A1, A1 + N1, A2, A2 + N2, 
        <A href="ostream_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ostream_iterator.shtml">ostream_iterator</A>&lt;int&gt;(cout, &quot; &quot;));
  // The output is &quot;1 2 3 4 5 6 7 8&quot;
}
</pre>
<h3>Notes</h3>
<P><A name="1">[1]</A>
Note that you may use an ordering that is a strict weak ordering
but not a total ordering; that is, there might be values <tt>x</tt> and <tt>y</tt>
such that <tt>x &lt; y</tt>, <tt>x &gt; y</tt>, and <tt>x == y</tt> are all false.  (See the
<A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThan Comparable</A> requirements for a more complete discussion.)
Two elements <tt>x</tt> and <tt>y</tt> are <i>equivalent</i> if neither <tt>x &lt; y</tt> nor
<tt>y &lt; x</tt>.  If you're using a total ordering, however (if you're
using <tt>strcmp</tt>, for example, or if you're using ordinary arithmetic
comparison on integers), then you can ignore this technical
distinction: for a total ordering, equality and equivalence are
the same.
<h3>See also</h3>
<tt><A href="inplace_merge.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/inplace_merge.shtml">inplace_merge</A></tt>, <tt><A href="set_union.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/set_union.shtml">set_union</A></tt>, <tt><A href="sort.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/sort.shtml">sort</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>