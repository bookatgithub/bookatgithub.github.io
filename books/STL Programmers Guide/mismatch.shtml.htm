<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>mismatch</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>mismatch</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<tt>Mismatch</tt> is an overloaded name; there are actually two <tt>mismatch</tt>
functions.
<pre>
template &lt;class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>1, class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>2&gt;
<A href="pair.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/pair.shtml">pair</A>&lt;InputIterator1, InputIterator2&gt; 
mismatch(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2);

template &lt;class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>1, class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>2, 
          class <A href="BinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryPredicate.shtml">BinaryPredicate</A>&gt;
<A href="pair.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/pair.shtml">pair</A>&lt;InputIterator1, InputIterator2&gt; 
mismatch(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2,
         BinaryPredicate binary_pred);
</pre>                   
<h3>Description</h3>
<tt>Mismatch</tt> finds the first position where the two ranges <tt>[first1, last1)</tt>
and <tt>[first2, first2 + (last1 - first1))</tt> differ.  The two 
versions of <tt>mismatch</tt> use different tests for whether elements differ.
<P>
The first version of <tt>mismatch</tt> finds
the first iterator <tt>i</tt> in <tt>[first1, last1)</tt> such that <tt>*i != *(first2
+ (i - first1))</tt>.  The return value is a pair whose first element is
<tt>i</tt> and whose second element is <tt>*(first2 + (i - first1))</tt>.  If no
such iterator <tt>i</tt> exists, the return value is a pair whose first
element is <tt>last1</tt> and whose second element is 
<tt>*(first2 + (last1 - first1))</tt>.  
<P>
The second version of <tt>mismatch</tt> finds
the first iterator <tt>i</tt> in <tt>[first1, last1)</tt> such that <tt>binary_pred(*i,
*(first2 + (i - first1))</tt> is <tt>false</tt>.  The return value is a pair 
whose first element is <tt>i</tt> and whose second element is 
<tt>*(first2 + (i - first1))</tt>.  If no such iterator <tt>i</tt> exists, the
return value is a pair whose first element is <tt>last1</tt> and whose second
element is <tt>*(first2 + (last1 - first1))</tt>.  
<h3>Definition</h3>
Declared in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.  The implementation is in <A href="algobase.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algobase.h">algobase.h</A>.
<h3>Requirements on types</h3>
For the first version:
<UL>
<LI>
<tt>InputIterator1</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>InputIterator2</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>InputIterator1</tt>'s value type is a model of <A href="EqualityComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/EqualityComparable.shtml">Equality Comparable</A>.
<LI>
<tt>InputIterator2</tt>'s value type is a model of <A href="EqualityComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/EqualityComparable.shtml">Equality Comparable</A>.
<LI>
<tt>InputIterator1</tt>'s value type can be compared for equality with
   <tt>InputIterator2</tt>'s value type. 
</UL>
For the second version:
<UL>
<LI>
<tt>InputIterator1</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>InputIterator2</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>BinaryPredicate</tt> is a model of <A href="BinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryPredicate.shtml">Binary Predicate</A>.
<LI>
<tt>InputIterator1</tt>'s value type is convertible to <tt>BinaryPredicate</tt>'s
   first argument type.
<LI>
<tt>InputIterator2</tt>'s value type is convertible to <tt>BinaryPredicate</tt>'s
   second argument type.
</UL>
<h3>Preconditions</h3>
<UL>
<LI>
<tt>[first1, last1)</tt> is a valid range.
<LI>
<tt>[first2, first2 + (last2 - last1))</tt> is a valid range.
</UL>
<h3>Complexity</h3>
Linear.  At most <tt>last1 - first1</tt> comparisons.
<h3>Example</h3>
<pre>
int A1[] = { 3, 1, 4, 1, 5, 9, 3 };
int A2[] = { 3, 1, 4, 2, 8, 5, 7 };
const int N = sizeof(A1) / sizeof(int);

<A href="pair.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/pair.shtml">pair</A>&lt;int*, int*&gt; result = mismatch(A1, A1 + N, A2);
cout &lt;&lt; &quot;The first mismatch is in position &quot; &lt;&lt; result.first - A1 &lt;&lt; endl;
cout &lt;&lt; &quot;Values are: &quot; &lt;&lt; *(result.first) &lt;&lt; &quot;, &quot; &lt;&lt; *(result.second) &lt;&lt; endl;
</pre>
<h3>Notes</h3>
<h3>See also</h3>
<tt><A href="equal.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/equal.shtml">equal</A></tt>, <tt><A href="search.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/search.shtml">search</A></tt>, <tt><A href="find.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/find.shtml">find</A></tt>, <tt><A href="find_if.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/find_if.shtml">find_if</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>