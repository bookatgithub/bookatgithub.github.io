<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>partial_sort</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>partial_sort</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<tt>Partial_sort</tt> is an overloaded name; there are actually two <tt>partial_sort</tt>
functions.
<pre>
template &lt;class <A href="RandomAccessIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/RandomAccessIterator.shtml">RandomAccessIterator</A>&gt;
void partial_sort(RandomAccessIterator first, 
                  RandomAccessIterator middle,
                  RandomAccessIterator last);

template &lt;class <A href="RandomAccessIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/RandomAccessIterator.shtml">RandomAccessIterator</A>, class <A href="StrictWeakOrdering.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/StrictWeakOrdering.shtml">StrictWeakOrdering</A>&gt;
void partial_sort(RandomAccessIterator first,
                  RandomAccessIterator middle,
                  RandomAccessIterator last, 
                  StrictWeakOrdering comp);
</pre>                   
<h3>Description</h3>
<tt>Partial_sort</tt> rearranges the elements in the range <tt>[first, last)</tt> so
that they are partially in ascending order.  Specifically, it places
the smallest <tt>middle - first</tt> elements, sorted in ascending order,
into the range <tt>[first, middle)</tt>.  The remaining <tt>last - middle</tt>
elements are placed, in an unspecified order, into the range <tt>[middle,
last)</tt>. <A href="#1">[1]</A> <A href="#2">[2]</A>
<P>
The two versions of <tt>partial_sort</tt> differ in how they define whether one
element is less than another.  The first version compares
objects using <tt>operator&lt;</tt>, and the second compares objects using
a <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object</A> <tt>comp</tt>.
<P>
The postcondition for the first version of <tt>partial_sort</tt> is as
follows. If <tt>i</tt> and <tt>j</tt> are
any two valid iterators in the range <tt>[first, middle)</tt> such that <tt>i</tt>
precedes <tt>j</tt>, and if <tt>k</tt> is a valid iterator in the range <tt>[middle,
last)</tt>, then <tt>*j &lt; *i</tt> and <tt>*k &lt; *i</tt> will both be <tt>false</tt>.  
The corresponding postcondition for the second version of <tt>partial_sort</tt>
is that <tt>comp(*j, *i)</tt> and <tt>comp(*k, *i)</tt>
are both false.  Informally, this postcondition means that the first <tt>middle - first</tt>
elements are in ascending order and that none of the elements in
<tt>[middle, last)</tt> is less than any of the elements in <tt>[first, middle)</tt>.
<h3>Definition</h3>
Defined in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.
<h3>Requirements on types</h3>
For the first version:
<UL>
<LI>
<tt>RandomAccessIterator</tt> is a model of <A href="RandomAccessIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/RandomAccessIterator.shtml">Random Access Iterator</A>.
<LI>
<tt>RandomAccessIterator</tt> is mutable.
<LI>
<tt>RandomAccessIterator</tt>'s value type is <A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThan Comparable</A>.
<LI>
The ordering relation on <tt>RandomAccessIterator</tt>'s value type is
 a <i>strict weak ordering</i>, as defined in the <A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThan Comparable</A>
 requirements.
</UL>
For the second version:
<UL>
<LI>
<tt>RandomAccessIterator</tt> is a model of <A href="RandomAccessIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/RandomAccessIterator.shtml">Random Access Iterator</A>.
<LI>
<tt>RandomAccessIterator</tt> is mutable.
<LI>
<tt>StrictWeakOrdering</tt> is a model of <A href="StrictWeakOrdering.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/StrictWeakOrdering.shtml">Strict Weak Ordering</A>.
<LI>
<tt>RandomAccessIterator</tt>'s value type is convertible to
   <tt>StrictWeakOrdering</tt>'s argument type.
</UL>
<h3>Preconditions</h3>
<UL>
<LI>
<tt>[first, middle)</tt> is a valid range.
<LI>
<tt>[middle, last)</tt> is a valid range.
</UL>
(It follows from these two conditions that <tt>[first, last)</tt> is a valid range.)
<h3>Complexity</h3>
Approximately <tt>(last - first) * log(middle - first)</tt> comparisons.
<h3>Example</h3>
<pre>
int A[] = {7, 2, 6, 11, 9, 3, 12, 10, 8, 4, 1, 5};
const int N = sizeof(A) / sizeof(int);

partial_sort(A, A + 5, A + N);
copy(A, A + N, ostream_iterator&lt;int&gt;(cout, &quot; &quot;));
// The printed result is &quot;1 2 3 4 5 11 12 10 9 8 7 6&quot;.
</pre>
<h3>Notes</h3>
<P><A name="1">[1]</A>
Note that the elements in the range <tt>[first, middle)</tt> will be the
same (ignoring, for the moment, equivalent elements) as if you had sorted
the entire range using <tt>sort(first, last)</tt>.  The reason for using
<tt>partial_sort</tt> in preference to <tt>sort</tt> is simply efficiency: a partial
sort, in general, takes less time.
<P><A name="2">[2]</A>
<tt>partial_sort(first, last, last)</tt> has the effect of sorting the
entire range <tt>[first, last)</tt>, just like <tt><A href="sort.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/sort.shtml">sort</A>(first, last)</tt>.  They
use different algorithms, however: <tt>sort</tt> uses the <i>introsort</i> algorithm
(a variant of quicksort), and <tt>partial_sort</tt> uses <i>heapsort</i>. See section 5.2.3 of
Knuth (D. E. Knuth, <i>The Art of Computer
Programming.  Volume 3: Sorting and Searching</i>.
Addison-Wesley, 1975.), and J. W. J. Williams (<i>CACM</i> <b>7</b>, 347, 1964).
Both heapsort and introsort have complexity of order <tt>N
log(N)</tt>, but introsort is usually faster by a factor of 2 to 5.
<h3>See also</h3>
<tt><A href="partial_sort_copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/partial_sort_copy.shtml">partial_sort_copy</A></tt>,
<tt><A href="sort.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/sort.shtml">sort</A></tt>,
<tt><A href="stable_sort.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/stable_sort.shtml">stable_sort</A></tt>,
<tt><A href="binary_search.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binary_search.shtml">binary_search</A></tt>,
<tt><A href="lower_bound.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/lower_bound.shtml">lower_bound</A></tt>,
<tt><A href="upper_bound.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/upper_bound.shtml">upper_bound</A></tt>,
<tt><A href="less.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/less.shtml">less</A>&lt;T&gt;</tt>,
<A href="StrictWeakOrdering.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/StrictWeakOrdering.shtml">StrictWeakOrdering</A>,
<A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThan Comparable</A>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>