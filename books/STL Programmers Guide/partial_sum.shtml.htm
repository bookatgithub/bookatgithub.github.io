<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>partial_sum</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>partial_sum</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<tt>Partial_sum</tt> is an overloaded name; there are actually two <tt>partial_sum</tt>
functions.
<pre>
template &lt;class InputIterator, class OutputIterator&gt;
OutputIterator partial_sum(InputIterator first, InputIterator last,
                           OutputIterator result);

template &lt;class InputIterator, class OutputIterator, class BinaryOperation&gt;
OutputIterator partial_sum(InputIterator first, InputIterator last,
                           OutputIterator result, BinaryOperation binary_op);
</pre>                   
<h3>Description</h3>
<tt>Partial_sum</tt> calculates a generalized partial sum: <tt>*first</tt> is assigned
to <tt>*result</tt>, the sum of <tt>*first</tt> and <tt>*(first + 1)</tt> is assigned to 
<tt>*(result + 1)</tt>, and so on.  <A href="#1">[1]</A>
<P>
More precisely, a running sum is first initialized to <tt>*first</tt> and
assigned to <tt>*result</tt>.  For each iterator <tt>i</tt> in <tt>[first + 1, last)</tt>, in
order from beginning to end, the sum is updated by <tt>sum = sum + *i</tt>
(in the first version) or <tt>sum = binary_op(sum, *i)</tt> (in the second
version) and is assigned to <tt>*(result + (i - first))</tt>.  <A href="#2">[2]</A>
<h3>Definition</h3>
Defined in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.
<h3>Requirements on types</h3>
For the first version:
<UL>
<LI>
<tt>InputIterator</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>OutputIterator</tt> is a model of <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">Output Iterator</A>.
<LI>
If <tt>x</tt> and <tt>y</tt> are objects of <tt>InputIterator</tt>'s value type, then
   <tt>x + y</tt> is defined.
<LI>
The return type of <tt>x + y</tt> is convertible to <tt>InputIterator</tt>'s
   value type.
<LI>
<tt>InputIterator</tt>'s value type is convertible to a type in
   <tt>OutputIterator</tt>'s set of value types.
</UL>
For the second version:
<UL>
<LI>
<tt>InputIterator</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>OutputIterator</tt> is a model of <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">Output Iterator</A>.
<LI>
<tt>BinaryFunction</tt> is a model of <A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">BinaryFunction</A>.
<LI>
<tt>InputIterator</tt>'s value type is convertible to <tt>BinaryFunction</tt>'s
   first argument type and second argument type.
<LI>
<tt>BinaryFunction</tt>'s result type is convertible to <tt>InputIterator</tt>'s
   value type.
<LI>
<tt>InputIterator</tt>'s value type is convertible to a type in
   <tt>OutputIterator</tt>'s set of value types.
</UL>
<h3>Preconditions</h3>
<UL>
<LI>
<tt>[first, last)</tt> is a valid range.
<LI>
<tt>[result, result + (last - first))</tt> is a valid range.
</UL>
<h3>Complexity</h3>
Linear.  Zero applications of the binary operation if <tt>[first, last)</tt>
is a empty range, otherwise exactly <tt>(last - first) - 1</tt> applications.
<h3>Example</h3>
<pre>
int main()
{
  const int N = 10;
  int A[N];

  fill(A, A+N, 1);
  cout &lt;&lt; &quot;A:                 &quot;;
  <A href="copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/copy.shtml">copy</A>(A, A+N, <A href="ostream_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ostream_iterator.shtml">ostream_iterator</A>&lt;int&gt;(cout, &quot; &quot;));
  cout &lt;&lt; endl;

  cout &lt;&lt; &quot;Partial sums of A: &quot;;
  <A href="partial_sum.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/partial_sum.shtml">partial_sum</A>(A, A+N, <A href="ostream_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ostream_iterator.shtml">ostream_iterator</A>&lt;int&gt;(cout, &quot; &quot;));
  cout &lt;&lt; endl;
}  
</pre>
<h3>Notes</h3>
<P><A name="1">[1]</A>
Note that <tt>result</tt> is permitted to be the same iterator as
<tt>first</tt>.  This is useful for computing partial sums &quot;in place&quot;.
<P><A name="2">[2]</A>
The binary operation is not required to be either associative or
commutative: the order of all operations is specified.
<h3>See also</h3>
<tt><A href="adjacent_difference.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/adjacent_difference.shtml">adjacent_difference</A></tt>, <tt><A href="accumulate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/accumulate.shtml">accumulate</A></tt>, <tt><A href="inner_product.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/inner_product.shtml">inner_product</A></tt>, 
<tt><A href="count.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/count.shtml">count</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>