<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>partition</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>partition</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<pre>
template &lt;class <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">ForwardIterator</A>, class <A href="Predicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Predicate.shtml">Predicate</A>&gt;
ForwardIterator partition(ForwardIterator first,
                          ForwardIterator last, Predicate pred) 
</pre>                   
<h3>Description</h3>
<tt>Partition</tt> reorders the elements in the range <tt>[first, last)</tt> based
on the <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object</A> <tt>pred</tt>, such that
the elements that satisfy <tt>pred</tt> precede the elements
that fail to satisfy it.  The postcondition is that, for some
iterator <tt>middle</tt> in the range <tt>[first, last)</tt>, 
<tt>pred(*i)</tt> is <tt>true</tt> for every iterator <tt>i</tt> in the range <tt>[first, middle)</tt> and
<tt>false</tt> for every iterator <tt>i</tt> in the range <tt>[middle, last)</tt>. <A href="#1">[1]</A>  
The return value of <tt>partition</tt> is <tt>middle</tt>.
<h3>Definition</h3>
Defined in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.
<h3>Requirements on types</h3>
<UL>
<LI>
<tt>ForwardIterator</tt> is a model of <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">Forward Iterator</A>.
<LI>
<tt>Predicate</tt> is a model of <A href="Predicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Predicate.shtml">Predicate</A>.
<LI>
<tt>ForwardIterator</tt>'s value type is convertible to <tt>Predicate</tt>'s
   argument type.
</UL>
<h3>Preconditions</h3>
<UL>
<LI>
<tt>[first, last)</tt> is a valid range.
</UL>
<h3>Complexity</h3>
Linear.  Exactly <tt>last - first</tt> applications of <tt>pred</tt>, and at most
<tt>(last - first)/2</tt> swaps.
<h3>Example</h3>
Reorder a sequence so that even numbers precede odd numbers.
<pre>
int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
const int N = sizeof(A)/sizeof(int);
partition(A, A + N,
          <A href="unary_compose.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/unary_compose.shtml">compose1</A>(<A href="binder2nd.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binder2nd.shtml">bind2nd</A>(<A href="equal_to.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/equal_to.shtml">equal_to</A>&lt;int&gt;, 0),
                   <A href="binder2nd.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binder2nd.shtml">bind2nd</A>(<A href="modulus.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/modulus.shtml">modulus</A>&lt;int&gt;, 2)));
<A href="copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/copy.shtml">copy</A>(A, A + N, <A href="ostream_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ostream_iterator.shtml">ostream_iterator</A>&lt;int&gt;(cout, &quot; &quot;));
// The output is &quot;10 2 8 4 6 5 7 3 9 1&quot;. <A href="#1">[1]</A>
</pre>
<h3>Notes</h3>
<P><A name="1">[1]</A>
The relative order of elements in these two blocks is not necessarily
the same as it was in the original sequence.  A different algorithm, 
<tt><A href="stable_partition.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/stable_partition.shtml">stable_partition</A></tt>, does guarantee to preserve the relative order.
<h3>See also</h3>
<tt><A href="stable_partition.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/stable_partition.shtml">stable_partition</A></tt>, <A href="Predicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Predicate.shtml">Predicate</A>, <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object</A> 

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>