<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>pointer_to_unary_function¡´Arg, Result¡µ</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>pointer_to_unary_function&lt;Arg, Result&gt;</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "functors.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "type.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/type.gif" Alt=""   WIDTH = "194"  HEIGHT = "39" ></TD>
</TR>
<TR>
<TD Align=left><Img src = "adaptors.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/adaptors.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Categories</b>: functors, adaptors</TD>
<TD Align=right VAlign=top><b>Component type</b>: type</TD>
</TR>
</Table>

<h3>Description</h3>
<tt>Pointer_to_unary_function</tt> is a <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object</A> adaptor that
allows a function pointer <tt>Result (*f)(Arg)</tt> to be treated as an
<A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>.  That is: if <tt>F</tt> is a
<tt>pointer_to_unary_function&lt;Arg, Result&gt;</tt> that was initialized
with an underlying function pointer <tt>f</tt> of type
<tt>Result (*)(Arg)</tt>, then <tt>F(x)</tt> calls the function <tt>f(x)</tt>.
The difference between <tt>f</tt> and <tt>F</tt> is that 
<tt>pointer_to_unary_function</tt> is an <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>,
<i>i.e.</i> it defines the nested <tt>typedef</tt>s <tt>argument_type</tt>
and <tt>result_type</tt>.  
<P>
Note that a function pointer of type <tt>Result (*)(Arg)</tt> is a perfectly
good <A href="UnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/UnaryFunction.shtml">Unary Function</A> object, and may be passed to an STL algorithm
that expects an argument that is a <A href="UnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/UnaryFunction.shtml">Unary Function</A>.  The only
reason for using the <tt>pointer_to_unary_function</tt> object is if you need
to use an ordinary function in a context that requires an 
<A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>, <i>e.g.</i> as the argument of a function object
adaptor.
<P>
Most of the time, you need not declare an object of type
<tt>pointer_to_unary_function</tt> directly.  It is almost always easier to
construct one using the <tt><A href="ptr_fun.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ptr_fun.shtml">ptr_fun</A></tt> function.
<h3>Example</h3>
The following code fragment replaces all of the numbers in a range with their
absolute values, using the standard library function <tt>fabs</tt>.
There is no need to use a <tt>pointer_to_unary_function</tt>
adaptor in this case.
<pre>
<A href="transform.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/transform.shtml">transform</A>(first, last, first, fabs);
</pre>
The following code fragment replaces all of the numbers in a range with the
negative of their absolute values.  In this case we are composing
<tt>fabs</tt> and <tt><A href="negate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/negate.shtml">negate</A></tt>.  This requires that <tt>fabs</tt> be treated as an
<A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">adaptable unary function</A>, so we do need to use a
<tt>pointer_to_unary_function</tt> adaptor.
<pre>
<A href="transform.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/transform.shtml">transform</A>(first, last, first,
          <A href="unary_compose.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/unary_compose.shtml">compose1</A>(<A href="negate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/negate.shtml">negate</A>&lt;double&gt;, <A href="ptr_fun.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ptr_fun.shtml">ptr_fun</A>(fabs)));
</pre>
<h3>Definition</h3>
Defined in <A href="javascript:if(confirm('http://codeguru.developer.com/cpp/stlguide/function.h  \n\nThis file was not retrieved by Teleport Pro, because the server reports that an error occurred that prevented retrieval.  \n\nDo you want to open it from the server?'))window.location='http://codeguru.developer.com/cpp/stlguide/function.h'" tppabs="http://codeguru.developer.com/cpp/stlguide/function.h">function.h</A>.
<h3>Template parameters</h3>
<Table border>
<TR>
<TH>
Parameter
</TH>
<TH>
Description
</TH>
<TH>
Default
</TH>
</TR>
<TR>
<TD VAlign=top>
<tt>Arg</tt>
</TD>
<TD VAlign=top>
The function object's argument type
</TD>
<TD VAlign=top>
&nbsp;
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>Result</tt>
</TD>
<TD VAlign=top>
The function object's result type
</TD>
<TD VAlign=top>
&nbsp;
</TD>
</tr>
</table>
<h3>Model of</h3>
<A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>
<h3>Type requirements</h3>
<UL>
<LI>
<tt>Arg</tt> is <A href="Assignable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Assignable.shtml">Assignable</A>.
<LI>
<tt>Result</tt> is <A href="Assignable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Assignable.shtml">Assignable</A>.
</UL>
<h3>Public base classes</h3>
<tt><A href="unary_function.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/unary_function.shtml">unary_function</A>&lt;Arg, Result&gt;</tt>
<h3>Members</h3>
<Table border>
<TR>
<TH>
Member
</TH>
<TH>
Where defined
</TH>
<TH>
Description
</TH>
</TR>
<TR>
<TD VAlign=top>
<tt>argument_type</tt>
</TD>
<TD VAlign=top>
 <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>
</TD>
<TD VAlign=top>
The type of the function object's argument: <tt>Arg</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>result_type</tt>
</TD>
<TD VAlign=top>
 <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>
</TD>
<TD VAlign=top>
The type of the result: <tt>Result</tt>
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>result_type operator()(argument_type x)</tt>
</TD>
<TD VAlign=top>
 <A href="UnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/UnaryFunction.shtml">Unary Function</A>
</TD>
<TD VAlign=top>
Function call operator.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>pointer_to_unary_function(Result (*f)(Arg))</tt>
</TD>
<TD VAlign=top>
<tt>pointer_to_unary_function</tt>
</TD>
<TD VAlign=top>
See below.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>pointer_to_unary_function()</tt>
</TD>
<TD VAlign=top>
<tt>pointer_to_unary_function</tt>
</TD>
<TD VAlign=top>
See below.
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
template &lt;class Arg, class Result&gt;
pointer_to_unary_function&lt;Arg, Result&gt; 
ptr_fun(Result (*x)(Arg));
</pre>
</TD>
<TD VAlign=top>
<tt>pointer_to_unary_function</tt>
</TD>
<TD VAlign=top>
See below.
</TD>
</tr>
</table>
<h3>New members</h3>
These members are not defined 
in the <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>
requirements, but are specific to 
<tt>pointer_to_unary_function</tt>.	      
<Table border>
<TR>
<TH>
Member
</TH>
<TH>
Description
</TH>
</TR>
<TR>
<TD VAlign=top>
<tt>pointer_to_unary_function(Result (*f)(Arg))</tt>
</TD>
<TD VAlign=top>
The constructor.  Creates a <tt>pointer_to_unary_function</tt> whose underlying
   function is <tt>f</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>pointer_to_unary_function()</tt>
</TD>
<TD VAlign=top>
The default constructor.  This creates a <tt>pointer_to_unary_function</tt>
   that does not have an underlying C function, and that therefore
   cannot actually be called.
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
template &lt;class Arg, class Result&gt;
pointer_to_unary_function&lt;Arg, Result&gt; 
ptr_fun(Result (*x)(Arg));
</pre>
</TD>
<TD VAlign=top>
If <tt>f</tt> is of type <tt>Result (*)(Arg)</tt> then
<tt>ptr_fun(f)</tt> is equivalent to
<tt>pointer_to_unary_function&lt;Arg,Result&gt;(f)</tt>,
but more convenient.  This is a global function, not a member.
</TD>
</tr>
</table>
<h3>Notes</h3>
<h3>See also</h3>
<tt><A href="pointer_to_binary_function.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/pointer_to_binary_function.shtml">pointer_to_binary_function</A></tt>, <tt><A href="ptr_fun.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ptr_fun.shtml">ptr_fun</A></tt>, 
<A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>