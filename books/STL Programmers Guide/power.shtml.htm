<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>power</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>power</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<tt>Power</tt> is an overloaded name; there are actually two <tt>power</tt>
functions.
<pre>
template &lt;class T, class Integer&gt;
inline T power(T x, Integer n);

template &lt;class T, class Integer, class <A href="MonoidOperation.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/MonoidOperation.shtml">MonoidOperation</A>&gt;
T power(T x, Integer n, MonoidOperation op);
</pre>		   
<h3>Description</h3>
<tt>Power</tt> is generalized exponentiation: it raises the value <tt>x</tt>
to the power <tt>n</tt>, where <tt>n</tt> is a non-negative integer.  
<P>
The first version of <tt>power</tt>
returns <tt>x</tt> raised to the <tt>n</tt>th power; that is, it returns
<tt>x * x ... * x</tt>, where <tt>x</tt> is repeated <tt>n</tt> times. <A href="#1">[1]</A>  If
<tt>n == 0</tt>, then it returns <tt><A href="MonoidOperation.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/MonoidOperation.shtml">identity_element</A>(<A href="times.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/times.shtml">multiplies</A>&lt;T&gt;())</tt>.
<P>
The second version of <tt>power</tt> is just like the first except
that it uses an arbitrary <A href="MonoidOperation.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/MonoidOperation.shtml">Monoid Operation</A> instead of 
<tt><A href="times.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/times.shtml">multiplies</A>&lt;T&gt;</tt>, returning <tt><A href="MonoidOperation.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/MonoidOperation.shtml">identity_element</A>(op)</tt>
when <tt>n == 0</tt>.
<P>
<b>Important note</b>: <tt>power</tt> does not assume that multiplication is
commutative, but it does rely crucially on the fact that
multiplication is associative.  If you have defined <tt>*</tt> or
<tt><A href="MonoidOperation.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/MonoidOperation.shtml">MonoidOperation</A></tt> to be a non-associative operation, then <tt>power</tt>
<i>will give you the wrong answer</i>.  <A href="#2">[2]</A>
<h3>Definition</h3>
Defined in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>. 
<h3>Requirements on types</h3>
For the first version:
<UL>
<LI>
<tt><A href="times.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/times.shtml">multiplies</A>&lt;T&gt;</tt> is a model of <A href="MonoidOperation.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/MonoidOperation.shtml">Monoid Operation</A>.
<LI>
<tt>Integer</tt> is an integral type.
</UL>
For the second version:
<UL>
<LI>
<tt>MonoidOperation</tt> is a model of <A href="MonoidOperation.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/MonoidOperation.shtml">Monoid Operation</A>.
<LI>
<tt>T</tt> is <tt>MonoidOperation</tt>'s argument type.
<LI>
<tt>n</tt> is an integral type.
</UL>
<h3>Preconditions</h3>
<UL>
<LI>
<tt>n &gt;= 0</tt>.
</UL>
<h3>Complexity</h3>
The number of multiplications (or, in the case of the second version,
the number of applications of <tt>MonoidOperation</tt>) is <tt>lg(n) + nu(n)</tt>
where <tt>lg</tt> is the base 2 logarithm and <tt>nu(n)</tt> is the number of 
<tt>1</tt>s in the binary representation of <tt>n</tt>. <A href="#3">[3]</A>
<h3>Example</h3>
<pre>
int main() {
  cout &lt;&lt; &quot;2 ** 30 = &quot; &lt;&lt; power(2, 30) &lt;&lt; endl;
}
</pre>
<h3>Notes</h3>
<P><A name="1">[1]</A>
This is a conceptual description of what <tt>power</tt>'s return value 
is; it is not how <tt>power</tt> is actually implemented.  If <tt>power</tt>
were implemented that way then it would require <tt>n-1</tt> multiplications,
which would be grossly inefficient.  <tt>Power</tt> is implemented using
the &quot;Russian peasant algorithm&quot;, which requires only <tt>O(log n)</tt>
multiplications.
See section 4.6.3 of Knuth (D. E. Knuth, <i>The Art of Computer
Programming.  Volume 2: Seminumerical Algorithms</i>, 
Addison-Wesley, 1981) for a discussion.
<P><A name="2">[2]</A>
See the <A href="MonoidOperation.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/MonoidOperation.shtml">Monoid Operation</A> requirements for a discussion of associativity.
<P><A name="3">[3]</A>
This is in fact not the minimum possible number of multiplications:
it is possible to compute the fifteenth power of <tt>x</tt> using only
five multiplications, but <tt>power(x, 15)</tt> uses six.  
<h3>See also</h3>
<A href="MonoidOperation.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/MonoidOperation.shtml">Monoid Operation</A>, 
<tt><A href="times.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/times.shtml">multiplies</A></tt>, 
<tt><A href="plus.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/plus.shtml">plus</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>