<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>prev_permutation</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>prev_permutation</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<tt>Prev_permutation</tt> is an overloaded name; there are actually two <tt>prev_permutation</tt>
functions.
<pre>
template &lt;class <A href="BidirectionalIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BidirectionalIterator.shtml">BidirectionalIterator</A>&gt;
bool prev_permutation(BidirectionalIterator first,
                      BidirectionalIterator last);

template &lt;class <A href="BidirectionalIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BidirectionalIterator.shtml">BidirectionalIterator</A>, class <A href="StrictWeakOrdering.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/StrictWeakOrdering.shtml">StrictWeakOrdering</A>&gt;
bool prev_permutation(BidirectionalIterator first, BidirectionalIterator last,
                      <A href="StrictWeakOrdering.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/StrictWeakOrdering.shtml">StrictWeakOrdering</A> comp);
</pre>                   
<h3>Description</h3>
<tt>Prev_permutation</tt> transforms the range of elements <tt>[first, last)</tt>
into the lexicographically next smaller permutation of the elements.
There is a finite number of distinct permutations (at most
<tt>N!</tt> <A href="#1">[1]</A>, where <tt>N</tt> is <tt>last - first</tt>), so, if the permutations are
ordered by <tt><A href="lexicographical_compare.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/lexicographical_compare.shtml">lexicographical_compare</A></tt>, there is an unambiguous
definition of which permutation is lexicographically previous.  If such
a permutation exists, <tt>prev_permutation</tt> transforms <tt>[first, last)</tt>
into that permutation and returns <tt>true</tt>.  Otherwise it transforms
<tt>[first, last)</tt> into the lexicographically greatest permutation <A href="#2">[2]</A>
and returns <tt>false</tt>.  
<P>
The postcondition is that the new permutation of elements is
lexicographically less than the old (as determined by
<tt><A href="lexicographical_compare.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/lexicographical_compare.shtml">lexicographical_compare</A></tt>) if and only if the return value is
<tt>true</tt>.
<P>
The two versions of <tt>prev_permutation</tt> differ in how they define
whether one element is less than another.  The first version 
compares objects using <tt>operator&lt;</tt>, and the second compares objects
using a <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object</A> <tt>comp</tt>.
<h3>Definition</h3>
Defined in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.
<h3>Requirements on types</h3>
For the first version:
<UL>
<LI>
<tt>BidirectionalIterator</tt> is a model of <A href="BidirectionalIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BidirectionalIterator.shtml">Bidirectional Iterator</A>.
<LI>
<tt>BidirectionalIterator</tt> is mutable.
<LI>
<tt>BidirectionalIterator</tt>'s value type is <A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThan Comparable</A>.
<LI>
The ordering relation on <tt>BidirectionalIterator</tt>'s value type is
   a <i>strict weak ordering</i>, as defined in the <A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThan Comparable</A>
   requirements.
</UL>
For the second version:
<UL>
<LI>
<tt>BidirectionalIterator</tt> is a model of <A href="BidirectionalIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BidirectionalIterator.shtml">Bidirectional Iterator</A>.
<LI>
<tt>BidirectionalIterator</tt> is mutable.
<LI>
<tt>StrictWeakOrdering</tt> is a model of <A href="StrictWeakOrdering.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/StrictWeakOrdering.shtml">Strict Weak Ordering</A>.
<LI>
<tt>BidirectionalIterator</tt>'s value type is convertible to
   <tt>StrictWeakOrdering</tt>'s argument type.
</UL>
<h3>Preconditions</h3>
<UL>
<LI>
<tt>[first, last)</tt> is a valid range.
</UL>
<h3>Complexity</h3>
Linear.  At most <tt>(last - first) / 2</tt> swaps.
<h3>Example</h3>
<pre>
int main()
{
  int A[] = {2, 3, 4, 5, 6, 1};
  const int N = sizeof(A) / sizeof(int);

  cout &lt;&lt; &quot;Initially:              &quot;;
  <A href="copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/copy.shtml">copy</A>(A, A+N, <A href="ostream_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ostream_iterator.shtml">ostream_iterator</A>&lt;int&gt;(cout, &quot; &quot;));
  cout &lt;&lt; endl;

  prev_permutation(A, A+N);
  cout &lt;&lt; &quot;After prev_permutation: &quot;;
  <A href="copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/copy.shtml">copy</A>(A, A+N, <A href="ostream_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ostream_iterator.shtml">ostream_iterator</A>&lt;int&gt;(cout, &quot; &quot;));
  cout &lt;&lt; endl;

  next_permutation(A, A+N);
  cout &lt;&lt; &quot;After next_permutation: &quot;;
  <A href="copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/copy.shtml">copy</A>(A, A+N, <A href="ostream_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ostream_iterator.shtml">ostream_iterator</A>&lt;int&gt;(cout, &quot; &quot;));
  cout &lt;&lt; endl;
}
</pre>
<h3>Notes</h3>
<P><A name="1">[1]</A>
If all of the elements in <tt>[first, last)</tt> are distinct from each
other, then there are exactly <tt>N!</tt> permutations.  If some elements are
the same as each other, though, then there are fewer.  There are, for
example, only three (<tt>3!/2!</tt>) permutations of the elements <tt>1 1 2</tt>.
<P><A name="2">[2]</A>
Note that the lexicographically greatest permutation is, by
definition, sorted in nonascending order.
<h3>See also</h3>
<tt><A href="next_permutation.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/next_permutation.shtml">next_permutation</A></tt>, <tt><A href="lexicographical_compare.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/lexicographical_compare.shtml">lexicographical_compare</A></tt>, 
<A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThan Comparable</A>, <A href="StrictWeakOrdering.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/StrictWeakOrdering.shtml">Strict Weak Ordering</A>, <tt><A href="sort.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/sort.shtml">sort</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>