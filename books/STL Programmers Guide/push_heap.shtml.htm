<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>push_heap</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>push_heap</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<tt>Push_heap</tt> is an overloaded name; there are actually two 
<tt>push_heap</tt> functions.    
<pre>
template &lt;class <A href="RandomAccessIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/RandomAccessIterator.shtml">RandomAccessIterator</A>&gt;
void push_heap(RandomAccessIterator first, RandomAccessIterator last);

template &lt;class <A href="RandomAccessIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/RandomAccessIterator.shtml">RandomAccessIterator</A>, class <A href="StrictWeakOrdering.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/StrictWeakOrdering.shtml">StrictWeakOrdering</A>&gt;
void push_heap(RandomAccessIterator first, RandomAccessIterator last,
               StrictWeakOrdering comp);
</pre>                   
<h3>Description</h3>
<tt>Push_heap</tt> adds an element to a heap <A href="#1">[1]</A>.  It is assumed that 
<tt>[first, last - 1)</tt> is already a heap; the element to be added to
the heap is <tt>*(last - 1)</tt>.  
<P>
The two versions of <tt>push_heap</tt> differ in how they define whether one
element is less than another.  The first version compares objects
using <tt>operator&lt;</tt>, and the second compares objects using a 
<A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object</A> <tt>comp</tt>.  The postcondition for the first version
is that <tt><A href="is_heap.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/is_heap.shtml">is_heap</A>(first, last)</tt> is <tt>true</tt>, and the postcondition
for the second version is that <tt><A href="is_heap.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/is_heap.shtml">is_heap</A>(first, last, comp)</tt> is
<tt>true</tt>.
<h3>Definition</h3>
Declared in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.  The implementation is in <A href="heap.h" tppabs="http://codeguru.developer.com/cpp/stlguide/heap.h">heap.h</A>.
<h3>Requirements on types</h3>
For the first version:
<UL>
<LI>
<tt>RandomAccessIterator</tt> is a model of <A href="RandomAccessIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/RandomAccessIterator.shtml">Random Access Iterator</A>.
<LI>
<tt>RandomAccessIterator</tt> is mutable.
<LI>
<tt>RandomAccessIterator</tt>'s value type is a model of <A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThan Comparable</A>.
<LI>
The ordering on objects of <tt>RandomAccessIterator</tt>'s value type is a <i>strict
   weak ordering</i>, as defined in the <A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThan Comparable</A> requirements.
</UL>
For the second version:
<UL>
<LI>
<tt>RandomAccessIterator</tt> is a model of <A href="RandomAccessIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/RandomAccessIterator.shtml">Random Access Iterator</A>.
<LI>
<tt>RandomAccessIterator</tt> is mutable.
<LI>
<tt>StrictWeakOrdering</tt> is a model of <A href="StrictWeakOrdering.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/StrictWeakOrdering.shtml">Strict Weak Ordering</A>.
<LI>
<tt>RandomAccessIterator</tt>'s value type is convertible to
   <tt>StrictWeakOrdering</tt>'s argument type.
</UL>
<h3>Preconditions</h3>
For the first version:
<UL>
<LI>
<tt>[first, last)</tt> is a valid range.
<LI>
<tt>[first, last - 1)</tt> is a valid range.  That is, <tt>[first, last)</tt> is
   nonempty.
<LI>
<tt>[first, last - 1)</tt> is a heap.  That is, <tt><A href="is_heap.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/is_heap.shtml">is_heap</A>(first, last - 1)</tt>
   is <tt>true</tt>.
</UL>
For the second version:
<UL>
<LI>
<tt>[first, last)</tt> is a valid range.
<LI>
<tt>[first, last - 1)</tt> is a valid range.  That is, <tt>[first, last)</tt> is
   nonempty.
<LI>
<tt>[first, last)</tt> is a heap.  That is, <tt><A href="is_heap.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/is_heap.shtml">is_heap</A>(first, last - 1, comp)</tt>
   is <tt>true</tt>.
</UL>
<h3>Complexity</h3>
Logarithmic.  At most <tt>log(last - first)</tt> comparisons.
<h3>Example</h3>
<pre>
int main()
{
  int A[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

  <A href="make_heap.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/make_heap.shtml">make_heap</A>(A, A + 9);
  cout &lt;&lt; &quot;[A, A + 9)  = &quot;;
  <A href="copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/copy.shtml">copy</A>(A, A + 9, <A href="ostream_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ostream_iterator.shtml">ostream_iterator</A>&lt;int&gt;(cout, &quot; &quot;));
  
  push_heap(A, A + 10);
  cout &lt;&lt; endl &lt;&lt; &quot;[A, A + 10) = &quot;;
  <A href="copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/copy.shtml">copy</A>(A, A + 10, <A href="ostream_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ostream_iterator.shtml">ostream_iterator</A>&lt;int&gt;(cout, &quot; &quot;));
  cout &lt;&lt; endl;
}
</pre>
<P>
The output is 
<pre>
[A, A + 9)  = 8 7 6 3 4 5 2 1 0 
[A, A + 10) = 9 8 6 3 7 5 2 1 0 4 
</pre>
<h3>Notes</h3>
<P><A name="1">[1]</A>
A heap is a particular way of ordering the elements in a range of
<A href="RandomAccessIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/RandomAccessIterator.shtml">random access iterators</A> <tt>[f, l)</tt>.  The reason heaps are useful
(especially for sorting, or as priority queues) is that they satisfy
two important properties.  First, <tt>*f</tt> is the largest element in the
heap.  Second, it is possible to add an element to a heap (using
<tt>push_heap</tt>), or to remove <tt>*f</tt>, in logarithmic time.
Internally, a heap is  a tree represented as a sequential range.
The tree is constructed so that that each
node is less than or equal to its parent node.
<h3>See also</h3>
<tt><A href="make_heap.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/make_heap.shtml">make_heap</A></tt>, <tt><A href="pop_heap.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/pop_heap.shtml">pop_heap</A></tt>, <tt><A href="sort_heap.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/sort_heap.shtml">sort_heap</A></tt>, <tt><A href="is_heap.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/is_heap.shtml">is_heap</A></tt>, <tt><A href="sort.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/sort.shtml">sort</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>