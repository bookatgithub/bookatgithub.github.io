<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>queue¡´T, Sequence¡µ</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>queue&lt;T, Sequence&gt;</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "containers.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/containers.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "type.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/type.gif" Alt=""   WIDTH = "194"  HEIGHT = "39" ></TD>
</TR>
<TR>
<TD Align=left><Img src = "adaptors.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/adaptors.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Categories</b>: containers, adaptors</TD>
<TD Align=right VAlign=top><b>Component type</b>: type</TD>
</TR>
</Table>

<h3>Description</h3>
A <tt>queue</tt> is an adaptor that provides a restricted subset of
<A href="Container.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Container.shtml">Container</A> functionality
A <tt>queue</tt> is a &quot;first in first out&quot; (FIFO) data structure.  <A href="#1">[1]</A> That is,
elements are added to the back of the <tt>queue</tt> and may be removed
from the front;
<tt>Q.front()</tt> is the element that was added to the <tt>queue</tt> least recently.
<tt>Queue</tt> does not allow iteration through its elements.  <A href="#2">[2]</A>
<P>
<tt>Queue</tt> is a container adaptor, meaning that it is implemented on
top of some underlying container type.  By default that underlying
type is <tt><A href="Deque.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Deque.shtml">deque</A></tt>, but a different type may be selected explicitly.
<h3>Example</h3>
<pre>
int main() {
  queue&lt;int&gt; Q;
  Q.push(8);
  Q.push(7);
  Q.push(6);
  Q.push(2);
  
  assert(Q.size() == 4);
  assert(Q.back() == 2);

  assert(Q.front() == 8);
  Q.pop();

  assert(Q.front() == 7);
  Q.pop();

  assert(Q.front() == 6);
  Q.pop();
  
  assert(Q.front() == 2);
  Q.pop();

  assert(Q.empty());
}
</pre>
<h3>Definition</h3>
Defined in <A href="stack.h" tppabs="http://codeguru.developer.com/cpp/stlguide/stack.h">stack.h</A>.
<h3>Template parameters</h3>
<Table border>
<TR>
<TH>
Parameter
</TH>
<TH>
Description
</TH>
<TH>
Default
</TH>
</TR>
<TR>
<TD VAlign=top>
<tt>T</tt>
</TD>
<TD VAlign=top>
The type of object stored in the queue.
</TD>
<TD VAlign=top>
&nbsp;
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>Sequence</tt>
</TD>
<TD VAlign=top>
The type of the underlying container used to implement the queue.
</TD>
<TD VAlign=top>
<tt><A href="Deque.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Deque.shtml">deque</A>&lt;T&gt;</tt>
</TD>
</tr>
</table>
<h3>Model of</h3>
<A href="Assignable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Assignable.shtml">Assignable</A>, <A href="DefaultConstructible.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/DefaultConstructible.shtml">Default Constructible</A>
<h3>Type requirements</h3>
<UL>
<LI>
<tt>T</tt> is a model of <A href="Assignable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Assignable.shtml">Assignable</A>.
<LI>
<tt>Sequence</tt> is a model of <A href="FrontInsertionSequence.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/FrontInsertionSequence.shtml">Front Insertion Sequence</A>.
<LI>
<tt>Sequence</tt> is a model of <A href="BackInsertionSequence.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BackInsertionSequence.shtml">Back Insertion Sequence</A>.
<LI>
<tt>Sequence::value_type</tt> is the same type as <tt>T</tt>.
<LI>
If <tt>operator==</tt> is used, then <tt>T</tt> is a model of
   <A href="EqualityComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/EqualityComparable.shtml">Equality Comparable</A>
<LI>
If <tt>operator&lt;</tt> is used, then <tt>T</tt> is a model of <A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThan Comparable</A>.
</UL>
<h3>Public base classes</h3>
None.
<h3>Members</h3>
<Table border>
<TR>
<TH>
Member
</TH>
<TH>
Where defined
</TH>
<TH>
Description
</TH>
</TR>
<TR>
<TD VAlign=top>
<tt>value_type</tt>
</TD>
<TD VAlign=top>
<tt>queue</tt>
</TD>
<TD VAlign=top>
See below.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>size_type</tt>
</TD>
<TD VAlign=top>
<tt>queue</tt>
</TD>
<TD VAlign=top>
See below.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>queue()</tt>
</TD>
<TD VAlign=top>
 <A href="DefaultConstructible.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/DefaultConstructible.shtml">Default Constructible</A>
</TD>
<TD VAlign=top>
The default constructor.  Creates an empty <tt>queue</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>queue(const queue&amp;)</tt>
</TD>
<TD VAlign=top>
 <A href="Assignable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Assignable.shtml">Assignable</A>
</TD>
<TD VAlign=top>
The copy constructor.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>queue&amp; operator=(const queue&amp;)</tt>
</TD>
<TD VAlign=top>
 <A href="Assignable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Assignable.shtml">Assignable</A>
</TD>
<TD VAlign=top>
The assignment operator.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>bool empty() const</tt>
</TD>
<TD VAlign=top>
<tt>queue</tt>
</TD>
<TD VAlign=top>
See below.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>size_type size() const</tt>
</TD>
<TD VAlign=top>
<tt>queue</tt>
</TD>
<TD VAlign=top>
See below.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>value_type&amp; front()</tt>
</TD>
<TD VAlign=top>
<tt>queue</tt>
</TD>
<TD VAlign=top>
See below.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>const value_type&amp; front() const</tt>
</TD>
<TD VAlign=top>
<tt>queue</tt>
</TD>
<TD VAlign=top>
See below.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>value_type&amp; back()</tt>
</TD>
<TD VAlign=top>
<tt>queue</tt>
</TD>
<TD VAlign=top>
See below.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>const value_type&amp; back() const</tt>
</TD>
<TD VAlign=top>
<tt>queue</tt>
</TD>
<TD VAlign=top>
See below.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>void push(const value_type&amp;)</tt>
</TD>
<TD VAlign=top>
<tt>queue</tt>
</TD>
<TD VAlign=top>
See below.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>void pop()</tt> <A href="#3">[3]</A>
</TD>
<TD VAlign=top>
<tt>queue</tt>
</TD>
<TD VAlign=top>
See below.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>bool operator==(const queue&amp;, const queue&amp;)</tt>
</TD>
<TD VAlign=top>
<tt>queue</tt>
</TD>
<TD VAlign=top>
See below.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>bool operator&lt;(const queue&amp;, const queue&amp;)</tt>
</TD>
<TD VAlign=top>
<tt>queue</tt>
</TD>
<TD VAlign=top>
See below.
</TD>
</tr>
</table>
<h3>New members</h3>
These members are not defined in the 
<A href="Assignable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Assignable.shtml">Assignable</A> and <A href="DefaultConstructible.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/DefaultConstructible.shtml">Default Constructible</A>
requirements, but are specific to 
<tt>queue</tt>.
<Table border>
<TR>
<TH>
Member
</TH>
<TH>
Description
</TH>
</TR>
<TR>
<TD VAlign=top>
<tt>value_type</tt>
</TD>
<TD VAlign=top>
The type of object stored in the <tt>queue</tt>.  This is the same as
   <tt>T</tt> and <tt>Sequence::value_type</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>size_type</tt>
</TD>
<TD VAlign=top>
An unsigned integral type.  This is the same as <tt>Sequence::size_type</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>bool empty() const</tt>
</TD>
<TD VAlign=top>
Returns <tt>true</tt> if the <tt>queue</tt> contains no elements, and <tt>false</tt>
   otherwise.  <tt>Q.empty()</tt> is equivalent to <tt>Q.size() == 0</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>size_type size() const</tt>
</TD>
<TD VAlign=top>
Returns the number of elements contained in the <tt>queue</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>value_type&amp; front()</tt>
</TD>
<TD VAlign=top>
Returns a mutable reference to the element at the front of the
   queue, that is, the element least recently inserted.
   Precondition: <tt>empty()</tt> is <tt>false</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>const value_type&amp; front() const</tt>
</TD>
<TD VAlign=top>
Returns a const reference to the element at the front of the
   queue, that is, the element least recently inserted.
   Precondition: <tt>empty()</tt> is <tt>false</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>value_type&amp; back()</tt>
</TD>
<TD VAlign=top>
Returns a mutable reference to the element at the back of the
   queue, that is, the element most recently inserted.
   Precondition: <tt>empty()</tt> is <tt>false</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>const value_type&amp; back() const</tt>
</TD>
<TD VAlign=top>
Returns a const reference to the element at the back of the
   queue, that is, the element most recently inserted.
   Precondition: <tt>empty()</tt> is <tt>false</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>void push(const value_type&amp; x)</tt>
</TD>
<TD VAlign=top>
Inserts <tt>x</tt> at the back of the queue.  Postconditions: <tt>size()</tt> will
   be incremented by <tt>1</tt>, and <tt>back()</tt> will be equal to <tt>x</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>void pop()</tt>
</TD>
<TD VAlign=top>
Removes the element at the front of the queue. <A href="#3">[3]</A>  Precondition:
   <tt>empty()</tt> is <tt>false</tt>.  Postcondition: <tt>size()</tt> will be decremented
   by <tt>1</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>bool operator==(const queue&amp;, const queue&amp;)</tt>
</TD>
<TD VAlign=top>
Compares two queues for equality.  Two queues are equal if they
   contain the same number of elements and if they are equal
   element-by-element.  This is a global function, not a member function.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>bool operator&lt;(const queue&amp;, const queue&amp;)</tt>
</TD>
<TD VAlign=top>
Lexicographical ordering of two queues.
  This is a global function, not a member function.
</TD>
</tr>
</table>
<h3>Notes</h3>
<P><A name="1">[1]</A>
Queues are a standard data structure, and are discussed in all
algorithm books.  See, for example, section 2.2.1 of Knuth.
(D. E. Knuth, <i>The Art of Computer
Programming.  Volume 1: Fundamental Algorithms</i>, second edition.  
Addison-Wesley, 1973.)
<P><A name="2">[2]</A>
This restriction is the only reason for <tt>queue</tt> to exist at all.
Any container that is both a <A href="FrontInsertionSequence.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/FrontInsertionSequence.shtml">front insertion sequence</A> and a
<A href="BackInsertionSequence.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BackInsertionSequence.shtml">back insertion sequence</A> can be used as a queue; <tt><A href="Deque.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Deque.shtml">deque</A></tt>, for
example, has member functions <tt>front</tt>, <tt>back</tt>, <tt>push_front</tt>,
<tt>push_back</tt>, <tt>pop_front</tt>, and <tt>pop_back</tt> The only reason to use the
container adaptor <tt>queue</tt> instead of the container <tt><A href="Deque.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Deque.shtml">deque</A></tt> is to
make it clear that you are performing only queue operations, and no
other operations.
<P><A name="3">[3]</A>
One might wonder why <tt>pop()</tt> returns <tt>void</tt>, instead of
<tt>value_type</tt>.  That is, why must one use <tt>front()</tt> and <tt>pop()</tt> to
examine and remove the element at the front of the <tt>queue</tt>, instead of
combining the two in a single member function?  In fact, there is a
good reason for this design.  If <tt>pop()</tt> returned the front element, it
would have to return by value rather than by reference: return by
reference would create a dangling pointer.  Return by value, however,
is inefficient: it involves at least one redundant copy constructor
call.  Since it is impossible for <tt>pop()</tt> to return a value in such a
way as to be both efficient and correct, it is more sensible for it to
return no value at all and to require clients to use <tt>front()</tt> to
inspect the value at the front of the <tt>queue</tt>.
<h3>See also</h3>
<tt><A href="stack.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/stack.shtml">stack</A></tt>, <tt><A href="priority_queue.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/priority_queue.shtml">priority_queue</A></tt>, <tt><A href="Deque.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Deque.shtml">deque</A></tt>, <A href="Container.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Container.shtml">Container</A>, <A href="Sequence.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Sequence.shtml">Sequence</A>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>