<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>random_sample_n</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>random_sample_n</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<tt>Random_sample_n</tt> is an overloaded name; there are actually two
<tt>random_sample_n</tt> functions.
<pre>
template &lt;class <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">ForwardIterator</A>, class <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">OutputIterator</A>, class Distance&gt;
OutputIterator random_sample_n(ForwardIterator first, ForwardIterator last,
                               OutputIterator out, Distance n)

template &lt;class <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">ForwardIterator</A>, class <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">OutputIterator</A>, class Distance,
          class <A href="RandomNumberGenerator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/RandomNumberGenerator.shtml">RandomNumberGenerator</A>&gt;
OutputIterator random_sample_n(ForwardIterator first, ForwardIterator last,
                               OutputIterator out, Distance n,
                               RandomNumberGenerator&amp; rand)
</pre> 
<h3>Description</h3>
<tt>Random_sample_n</tt> randomly copies a sample of the elements from
the range <tt>[first, last)</tt> into the range <tt>[out, out + n)</tt>.
Each element in the input range appears at most once in the output
range, and samples are chosen with uniform probability.  <A href="#1">[1]</A> 
Elements in the output range appear in the same relative order
as their relative order within the input range. <A href="#2">[2]</A>
<P>
<tt>Random_sample</tt> copies <tt>m</tt> elements from <tt>[first, last)</tt>
to <tt>[out, out + m)</tt>, where <tt>m</tt> is <tt>min(last - first, n)</tt>.
The return value is <tt>out + m</tt>.
<P>
The first version uses an internal random number generator, and the
second uses a <A href="RandomNumberGenerator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/RandomNumberGenerator.shtml">Random Number Generator</A>, a special kind of
<A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object</A>, that is explicitly passed as an argument.
<h3>Definition</h3>
Defined in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.
<h3>Requirements on types</h3>
For the first version:
<UL>
<LI>
<tt>ForwardIterator</tt> is a model of <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">Forward Iterator</A>
<LI>
<tt>OutputIterator</tt> is a model of <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">Output Iterator</A>
<LI>
<tt>ForwardIterator</tt>'s value type is convertible to
   a type in <tt>OutputIterator</tt>'s set of value types.
<LI>
<tt>Distance</tt> is an integral type that is large enough to
   represent the value <tt>last - first</tt>.
</UL>
For the second version:
<UL>
<LI>
<tt>ForwardIterator</tt> is a model of <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">Forward Iterator</A>
<LI>
<tt>OutputIterator</tt> is a model of <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">Output Iterator</A>
<LI>
<tt>RandomNumberGenerator</tt> is a model of <A href="RandomNumberGenerator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/RandomNumberGenerator.shtml">Random Number Generator</A>
<LI>
<tt>Distance</tt> is an integral type that is large enough to
   represent the value <tt>last - first</tt>.
<LI>
<tt>ForwardIterator</tt>'s value type is convertible to
   a type in <tt>OutputIterator</tt>'s set of value types.
<LI>
<tt>Distance</tt> is convertible to <tt>RandomNumberGenerator</tt>'s argument type.
</UL>
<h3>Preconditions</h3>
<UL>
<LI>
<tt>[first, last)</tt> is a valid range.
<LI>
<tt>n</tt> is nonnegative.
<LI>
<tt>[first, last)</tt> and <tt>[out, out + n)</tt> do not overlap.
<LI>
There is enough space to hold all of the elements being copied.
   More formally, the requirement is that 
   <tt>[out, out + min(n, last - first))</tt> is a valid range.
<LI>
<tt>last - first</tt> is less than <tt>rand</tt>'s maximum value.
</UL>
<h3>Complexity</h3>
Linear in <tt>last - first</tt>.  At most <tt>last - first</tt> elements from the
input range are examined, and exactly <tt>min(n, last - first)</tt> elements
are copied to the output range.
<h3>Example</h3>
<pre>
int main()
{
  const int N = 10;
  int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

  random_sample_n(A, A+N, ostream_iterator&lt;int&gt;(cout, &quot; &quot;), 4);
  // The printed value might be 3 5 6 10,
  //  or any of 209 other possibilities.
}
</pre>
<h3>Notes</h3>
<P><A name="1">[1]</A>
This is &quot;Algorithm S&quot; from section 3.4.2 of Knuth
(D. E. Knuth, <i>The Art of Computer
Programming.  Volume 2: Seminumerical Algorithms</i>, second edition.  
Addison-Wesley, 1981).  Knuth credits C. T. Fan, M. E. Muller, and
I. Rezucha (1962) and T. G. Jones (1962).
Note that there are <tt>N! / n! / (N - n)!</tt> ways of selecting a sample of
<tt>n</tt> elements from a range of <tt>N</tt> elements.  <tt>Random_sample_n</tt> yields
uniformly distributed results; that is, the probability of selecting
any particular element is <tt>n / N</tt>, and the probability of any
particular sampling is <tt>n! * (N - n)! / N!</tt>.
<P><A name="2">[2]</A>
In contrast, the <tt><A href="random_sample.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/random_sample.shtml">random_sample</A></tt> algorithm does not preserve
relative ordering within the input range.  
The other major distinction between the two algorithms is that 
<tt>random_sample_n</tt> requires its input range to be <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">Forward Iterators</A>
and only requires its output range to be <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">Output Iterators</A>, while
<tt><A href="random_sample.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/random_sample.shtml">random_sample</A></tt> only requires its input range to be
<A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterators</A> and requires its output range to be
<A href="RandomAccessIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/RandomAccessIterator.shtml">Random Access Iterators</A>.
<h3>See also</h3>
<tt><A href="random_shuffle.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/random_shuffle.shtml">random_shuffle</A></tt>, <tt><A href="random_sample.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/random_sample.shtml">random_sample</A></tt>, <A href="RandomNumberGenerator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/RandomNumberGenerator.shtml">Random Number Generator</A>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>