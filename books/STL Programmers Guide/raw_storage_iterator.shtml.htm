<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>raw_storage_iterator¡´ForwardIterator, T¡µ</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>raw_storage_iterator&lt;ForwardIterator, T&gt;</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "allocators.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/allocators.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "type.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/type.gif" Alt=""   WIDTH = "194"  HEIGHT = "39" ></TD>
</TR>
<TR>
<TD Align=left><Img src = "iterators.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/iterators.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right></TD>
</TR>
<TR>
<TD Align=left><Img src = "adaptors.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/adaptors.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Categories</b>: allocators, iterators, adaptors</TD>
<TD Align=right VAlign=top><b>Component type</b>: type</TD>
</TR>
</Table>

<h3>Description</h3>
In C++, the operator <tt>new</tt> allocates memory for an object and then
creates an object at that location by calling a constructor.  Occasionally,
however, it is useful to separate those two operations. <A href="#1">[1]</A>  If <tt>i</tt> is an
iterator that points to a region of uninitialized memory, then you
can use <tt><A href="construct.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/construct.shtml">construct</A></tt> to create an object in the location pointed to
by <tt>i</tt>.  <tt>Raw_storage_iterator</tt> is an adaptor that makes this
procedure more convenient.  If <tt>r</tt> is a <tt>raw_storage_iterator</tt>, then
it has some underlying iterator <tt>i</tt>.  The expression <tt>*r = x</tt> is
equivalent to <tt><A href="construct.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/construct.shtml">construct</A>(&amp;*i, x)</tt>.
<h3>Example</h3>
<pre>
class Int {
public:
  Int(int x) : val(x) {}
  int get() { return val; }
private:
  int val;
};    

int main()
{
  int A1[] = {1, 2, 3, 4, 5, 6, 7};
  const int N = sizeof(A1) / sizeof(int);

  Int* A2 = (Int*) malloc(N * sizeof(Int));     
  <A href="transform.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/transform.shtml">transform</A>(A1, A1 + N, 
            raw_storage_iterator&lt;Int*, int&gt;(A2),
            <A href="negate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/negate.shtml">negate</A>&lt;int&gt;());
}
</pre>
<h3>Definition</h3>
Defined in <A href="iterator.h" tppabs="http://codeguru.developer.com/cpp/stlguide/iterator.h">iterator.h</A>.
<h3>Template parameters</h3>
<Table border>
<TR>
<TH>
Parameter
</TH>
<TH>
Description
</TH>
<TH>
Default
</TH>
</TR>
<TR>
<TD VAlign=top>
OutputIterator
</TD>
<TD VAlign=top>
The type of the <tt>raw_storage_iterator</tt>'s underlying iterator.
</TD>
<TD VAlign=top>
&nbsp;
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>T</tt>
</TD>
<TD VAlign=top>
The type that will be used as the argument to the constructor.
</TD>
<TD VAlign=top>
&nbsp;
</TD>
</tr>
</table>
<h3>Model of</h3>
<A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">Output Iterator</A>
<h3>Type requirements</h3>
<UL>
<LI>
<tt>ForwardIterator</tt> is a model of <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">Forward Iterator</A>
<LI>
<tt>ForwardIterator</tt>'s value type has a constructor that takes a
   single argument of type <tt>T</tt>.
</UL>
<h3>Public base classes</h3>
None.
<h3>Members</h3>
<Table border>
<TR>
<TH>
Member
</TH>
<TH>
Where defined
</TH>
<TH>
Description
</TH>
</TR>
<TR>
<TD VAlign=top>
<tt>raw_storage_iterator(ForwardIterator x)</tt>
</TD>
<TD VAlign=top>
<tt>raw_storage_iterator</tt>
</TD>
<TD VAlign=top>
See below.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>raw_storage_iterator(const raw_storage_iterator&amp;)</tt>
</TD>
<TD VAlign=top>
 <A href="trivial.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/trivial.shtml">trivial iterator</A>
</TD>
<TD VAlign=top>
The copy constructor
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>raw_storage_iterator&amp; operator=(const raw_storage_iterator&amp;)</tt>
</TD>
<TD VAlign=top>
 <A href="trivial.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/trivial.shtml">trivial iterator</A>
</TD>
<TD VAlign=top>
The assignment operator
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>raw_storage_iterator&amp; operator*()</tt>
</TD>
<TD VAlign=top>
 <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">Output Iterator</A>
</TD>
<TD VAlign=top>
Used to implement the <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">output iterator</A> expression <tt>*i = x</tt>. <A href="#2">[2]</A>
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>raw_storage_iterator&amp; operator=(const Sequence::value_type&amp;)</tt>
</TD>
<TD VAlign=top>
 <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">Output Iterator</A>
</TD>
<TD VAlign=top>
Used to implement the <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">output iterator</A> expression <tt>*i = x</tt>. <A href="#2">[2]</A>
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>raw_storage_iterator&amp; operator++()</tt>
</TD>
<TD VAlign=top>
 <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">Output Iterator</A>
</TD>
<TD VAlign=top>
Preincrement.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>raw_storage_iterator&amp; operator++(int)</tt>
</TD>
<TD VAlign=top>
 <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">Output Iterator</A>
</TD>
<TD VAlign=top>
Postincrement.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>output_iterator_tag iterator_category(const raw_storage_iterator&amp;)</tt>
</TD>
<TD VAlign=top>
 <A href="iterator_tags.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/iterator_tags.shtml">iterator tags</A>
</TD>
<TD VAlign=top>
Returns the iterator's category.
   This is a global function, not a member.
</TD>
</tr>
</table>
<h3>New members</h3>
These members are not defined 
in the <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">Output Iterator</A> requirements,
but are specific to <tt>raw_storage_iterator</tt>.
<Table border>
<TR>
<TH>
Function
</TH>
<TH>
Description
</TH>
</TR>
<TR>
<TD VAlign=top>
<tt>raw_storage_iterator(ForwardIterator i)</tt>
</TD>
<TD VAlign=top>
Creates a <tt>raw_storage_iterator</tt> whose underlying iterator is <tt>i</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>raw_storage_iterator&amp; operator=(const T&amp; val)</tt>
</TD>
<TD VAlign=top>
Constructs an object of <tt>ForwardIterator</tt>'s value type at the
   location pointed to by the iterator, using <tt>val</tt> as the 
   constructor's argument.
</TD>
</tr>
</table>
<h3>Notes</h3>
<P><A name="1">[1]</A>
In particular, this sort of low-level memory management is used
in the implementation of some container classes.
<P><A name="2">[2]</A>
Note how assignment through a <tt>raw_storage_iterator</tt> is implemented.
In general, unary <tt>operator*</tt> must be defined so that it returns a
proxy object, where the proxy object defines <tt>operator=</tt> to perform
the insert operation.  In this case, for the sake of simplicity, the
proxy object is the <tt>raw_storage_iterator</tt> itself.  That is, <tt>*i</tt> 
returns <tt>i</tt>, and <tt>*i = t</tt> is equivalent to <tt>i = t</tt>.  You should not,
however, rely on this behavior.  It is an implementation detail,
and it is not guaranteed to remain the same in future versions.
<h3>See also</h3>
<A href="Allocators.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Allocators.shtml">Allocators</A>, <tt><A href="construct.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/construct.shtml">construct</A></tt>, <tt><A href="destroy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/destroy.shtml">destroy</A></tt>, <tt><A href="uninitialized_copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/uninitialized_copy.shtml">uninitialized_copy</A></tt>
<tt><A href="uninitialized_fill.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/uninitialized_fill.shtml">uninitialized_fill</A></tt>, <tt><A href="uninitialized_fill_n.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/uninitialized_fill_n.shtml">uninitialized_fill_n</A></tt>,

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>