<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>search</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>search</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<tt>Search</tt> is an overloaded name; there are actually two <tt>search</tt>
functions.
<pre>
template &lt;class <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">ForwardIterator</A>1, class <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">ForwardIterator</A>2&gt;
ForwardIterator1 search(ForwardIterator1 first1, ForwardIterator1 last1,
                        ForwardIterator2 first2, ForwardIterator2 last2);

template &lt;class <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">ForwardIterator</A>1, class <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">ForwardIterator</A>2, class <A href="BinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryPredicate.shtml">BinaryPredicate</A>&gt;
ForwardIterator1 search(ForwardIterator1 first1, ForwardIterator1 last1,
                        ForwardIterator2 first2, ForwardIterator2 last2,
                        BinaryPredicate binary_pred);
</pre>                   
<h3>Description</h3>
<tt>Search</tt> finds a subsequence within the range <tt>[first1, last1)</tt>
that is identical to <tt>[first2, last2)</tt> when compared element-by-element.
It returns an iterator pointing to the beginning of that subsequence,
or else <tt>last1</tt> if no such subsequence exists.  The two versions of 
<tt>search</tt> differ in how they determine whether two elements are the same:
the first uses <tt>operator==</tt>, and the second uses the user-supplied
<A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object</A> <tt>binary_pred</tt>.
<P>
The first version of <tt>search</tt> returns the first iterator
<tt>i</tt> in the range <tt>[first1, last1 - (last2 - first2))</tt> <A href="#1">[1]</A> such that, for
every iterator <tt>j</tt> in the range <tt>[first2, last2)</tt>, 
<tt>*(i + (j - first2)) == *j</tt>.  The second version 
returns the first iterator
<tt>i</tt> in <tt>[first1, last1 - (last2 - first2))</tt> such that, for
every iterator <tt>j</tt> in <tt>[first2, last2)</tt>, 
<tt>binary_pred(*(i + (j - first2)), *j)</tt> is <tt>true</tt>.  These conditions
simply mean that every element in the subrange beginning with <tt>i</tt>
must be the same as the corresponding element in <tt>[first2, last2)</tt>.
<h3>Definition</h3>
Defined in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.
<h3>Requirements on types</h3>
For the first version:
<UL>
<LI>
<tt>ForwardIterator1</tt> is a model of <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">Forward Iterator</A>.
<LI>
<tt>ForwardIterator2</tt> is a model of <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">Forward Iterator</A>.
<LI>
<tt>ForwardIterator1</tt>'s value type is a model of <A href="EqualityComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/EqualityComparable.shtml">EqualityComparable</A>.
<LI>
<tt>ForwardIterator2</tt>'s value type is a model of <A href="EqualityComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/EqualityComparable.shtml">EqualityComparable</A>.
<LI>
Objects of <tt>ForwardIterator1</tt>'s value type can be compared for
   equality with Objects of <tt>ForwardIterator2</tt>'s value type.
</UL>
For the second version:
<UL>
<LI>
<tt>ForwardIterator1</tt> is a model of <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">Forward Iterator</A>.
<LI>
<tt>ForwardIterator2</tt> is a model of <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">Forward Iterator</A>.
<LI>
<tt>BinaryPredicate</tt> is a model of <A href="BinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryPredicate.shtml">Binary Predicate</A>.
<LI>
<tt>ForwardIterator1</tt>'s value type is convertible to <tt>BinaryPredicate</tt>'s
   first argument type.
<LI>
<tt>ForwardIterator2</tt>'s value type is convertible to <tt>BinaryPredicate</tt>'s
   second argument type.
</UL>
<h3>Preconditions</h3>
<UL>
<LI>
<tt>[first1, last1)</tt> is a valid range.
<LI>
<tt>[first2, last2)</tt> is a valid range.
</UL>
<h3>Complexity</h3>
Worst case behavior is quadratic: at most <tt>(last1 - first1) *
(last2 - first2)</tt> comparisons.  This worst case, however, is
rare.  Average complexity is linear.
<h3>Example</h3>
<pre>
  const char S1[] = &quot;Hello, world!&quot;;
  const char S2[] = &quot;world&quot;;
  const int N1 = sizeof(S1) - 1;
  const int N2 = sizeof(S2) - 1;

  const char* p = search(S1, S1 + N1, S2, S2 + N2);
  printf(&quot;Found subsequence \&quot;%s\&quot; at character %d of sequence \&quot;%s\&quot;.\n&quot;,
         S2, p - S1, S1);
</pre>
<h3>Notes</h3>
<P><A name="1">[1]</A>
The reason that this range is  <tt>[first1, last1 - (last2 - first2))</tt>,
instead of simply <tt>[first1, last1)</tt>, is that we are looking for a
subsequence that is equal to the <i>complete</i> sequence <tt>[first2,
last2)</tt>.  An iterator <tt>i</tt> can't be the beginning of such a subsequence
unless <tt>last1 - i</tt> is greater than or equal to <tt>last2 - first2</tt>.
Note the implication of this: you may call <tt>search</tt> with arguments
such that <tt>last1 - first1</tt> is less than <tt>last2 - first2</tt>, but such a
search will always fail.
<h3>See also</h3>
<tt><A href="find.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/find.shtml">find</A></tt>, <tt><A href="find_if.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/find_if.shtml">find_if</A></tt>, <tt><A href="find_end.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/find_end.shtml">find_end</A></tt>, <tt><A href="search_n.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/search_n.shtml">search_n</A></tt>,
<tt><A href="mismatch.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/mismatch.shtml">mismatch</A></tt>, <tt><A href="equal.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/equal.shtml">equal</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>