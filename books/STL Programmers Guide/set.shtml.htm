<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>set¡´Key, Compare, Alloc¡µ</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>set&lt;Key, Compare, Alloc&gt;</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "containers.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/containers.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "type.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/type.gif" Alt=""   WIDTH = "194"  HEIGHT = "39" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: containers</TD>
<TD Align=right VAlign=top><b>Component type</b>: type</TD>
</TR>
</Table>

<h3>Description</h3>
<tt>Set</tt> is a
<A href="SortedAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/SortedAssociativeContainer.shtml">Sorted Associative Container</A> that stores objects of type <tt>Key</tt>.
<tt>Set</tt> is a
<A href="SimpleAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/SimpleAssociativeContainer.shtml">Simple Associative Container</A>, 
meaning that its value type, as well as its 
key type, is <tt>Key</tt>.  It is also a
<A href="UniqueAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/UniqueAssociativeContainer.shtml">Unique Associative Container</A>,
meaning that no two elements are the same.
<P>
<tt>Set</tt> and <tt><A href="multiset.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/multiset.shtml">multiset</A></tt> are
particularly well suited to the set algorithms
<tt><A href="includes.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/includes.shtml">includes</A></tt>,
<tt><A href="set_union.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/set_union.shtml">set_union</A></tt>,
<tt><A href="set_intersection.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/set_intersection.shtml">set_intersection</A></tt>,
<tt><A href="set_difference.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/set_difference.shtml">set_difference</A></tt>, and
<tt><A href="set_symmetric_difference.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/set_symmetric_difference.shtml">set_symmetric_difference</A></tt>.
The reason for this is twofold.  First, the set algorithms require
their arguments to be sorted ranges, and, since
<tt><A href="set.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/set.shtml">set</A></tt> and 
<tt><A href="multiset.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/multiset.shtml">multiset</A></tt> are 
<A href="SortedAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/SortedAssociativeContainer.shtml">Sorted Associative Containers</A>, 
their elements are always sorted in ascending order. 
Second, the output range of these algorithms is always sorted, and
inserting a sorted range into a <tt>set</tt> or <tt>multiset</tt> is a
fast operation: the
<A href="UniqueSortedAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/UniqueSortedAssociativeContainer.shtml">Unique Sorted Associative Container</A> 
and <A href="MultipleSortedAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/MultipleSortedAssociativeContainer.shtml">Multiple Sorted Associative Container</A>
requirements guarantee that inserting a
range takes only linear time if the range is already sorted.
<P>
<tt>Set</tt> has the important property that inserting a new element
into a <tt>set</tt> does not invalidate iterators that point to existing
elements.  Erasing an element from a set also does not invalidate
any iterators, except, of course, for iterators that actually point 
to the element that is being erased.
<h3>Example</h3>
<pre>
struct ltstr
{
  bool operator()(const char* s1, const char* s2) const
  {
    return strcmp(s1, s2) &lt; 0;
  }
};

int main()
{
  const int N = 6;
  const char* a[N] = {&quot;isomer&quot;, &quot;ephemeral&quot;, &quot;prosaic&quot;, 
                      &quot;nugatory&quot;, &quot;artichoke&quot;, &quot;serif&quot;};
  const char* b[N] = {&quot;flat&quot;, &quot;this&quot;, &quot;artichoke&quot;,
                      &quot;frigate&quot;, &quot;prosaic&quot;, &quot;isomer&quot;};

  set&lt;const char*, ltstr&gt; A(a, a + N);
  set&lt;const char*, ltstr&gt; B(b, b + N);
  set&lt;const char*, ltstr&gt; C;

  cout &lt;&lt; &quot;Set A: &quot;;
  <A href="copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/copy.shtml">copy</A>(A.begin(), A.end(), <A href="ostream_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ostream_iterator.shtml">ostream_iterator</A>&lt;const char*&gt;(cout, &quot; &quot;));
  cout &lt;&lt; endl;
  cout &lt;&lt; &quot;Set B: &quot;;
  <A href="copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/copy.shtml">copy</A>(B.begin(), B.end(), <A href="ostream_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ostream_iterator.shtml">ostream_iterator</A>&lt;const char*&gt;(cout, &quot; &quot;));   
  cout &lt;&lt; endl;

  cout &lt;&lt; &quot;Union: &quot;;
  <A href="set_union.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/set_union.shtml">set_union</A>(A.begin(), A.end(), B.begin(), B.end(),
            <A href="ostream_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ostream_iterator.shtml">ostream_iterator</A>&lt;const char*&gt;(cout, &quot; &quot;),
            ltstr());   
  cout &lt;&lt; endl;

  cout &lt;&lt; &quot;Intersection: &quot;;
  <A href="set_intersection.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/set_intersection.shtml">set_intersection</A>(A.begin(), A.end(), B.begin(), B.end(),
                   <A href="ostream_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ostream_iterator.shtml">ostream_iterator</A>&lt;const char*&gt;(cout, &quot; &quot;),
                   ltstr());    
  cout &lt;&lt; endl;

  <A href="set_difference.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/set_difference.shtml">set_difference</A>(A.begin(), A.end(), B.begin(), B.end(),
                 <A href="insert_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/insert_iterator.shtml">inserter</A>(C, C.begin()),
                 ltstr());
  cout &lt;&lt; &quot;Set C (difference of A and B): &quot;;
  <A href="copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/copy.shtml">copy</A>(C.begin(), C.end(), <A href="ostream_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ostream_iterator.shtml">ostream_iterator</A>&lt;const char*&gt;(cout, &quot; &quot;));
  cout &lt;&lt; endl;
}
</pre>
<h3>Definition</h3>
<tt>Set</tt> is declared in <A href="set.h" tppabs="http://codeguru.developer.com/cpp/stlguide/set.h">set.h</A>.  The implementation is in
<A href="set.h" tppabs="http://codeguru.developer.com/cpp/stlguide/set.h">set.h</A> and <A href="tree.h" tppabs="http://codeguru.developer.com/cpp/stlguide/tree.h">tree.h</A>.
<h3>Template parameters</h3>
<Table border>
<TR>
<TH>
Parameter
</TH>
<TH>
Description
</TH>
<TH>
Default
</TH>
</TR>
<TR>
<TD VAlign=top>
<tt>Key</tt>
</TD>
<TD VAlign=top>
The set's key type and value type.  This is also defined as <tt>set::key_type</tt>
   and <tt>set::value_type</tt>
</TD>
<TD VAlign=top>
&nbsp;
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>Compare</tt>
</TD>
<TD VAlign=top>
The key comparison function, a <A href="StrictWeakOrdering.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/StrictWeakOrdering.shtml">Strict Weak Ordering</A> whose
   argument type is <tt>key_type</tt>; it returns <tt>true</tt> if its first 
   argument is less than its second argument, and <tt>false</tt> otherwise.
   This is also defined as <tt>set::key_compare</tt> and <tt>set::value_compare</tt>.
</TD>
<TD VAlign=top>
<tt><A href="less.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/less.shtml">less</A>&lt;Key&gt;</tt>
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>Alloc</tt>
</TD>
<TD VAlign=top>
The <tt>set</tt>'s allocator, used for all internal memory management.
</TD>
<TD VAlign=top>
<tt><A href="Allocators.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Allocators.shtml">alloc</A></tt>
</TD>
</tr>
</table>
<h3>Model of</h3>
<A href="UniqueSortedAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/UniqueSortedAssociativeContainer.shtml">Unique Sorted Associative Container</A>, 
<A href="SimpleAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/SimpleAssociativeContainer.shtml">Simple Associative Container</A>
<h3>Type requirements</h3>
<UL>
<LI>
<tt>Key</tt> is <A href="Assignable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Assignable.shtml">Assignable</A>.
<LI>
<tt>Compare</tt> is a <A href="StrictWeakOrdering.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/StrictWeakOrdering.shtml">Strict Weak Ordering</A> whose argument type
   is <tt>Key</tt>.
<LI>
<tt>Alloc</tt> is an <A href="Allocators.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Allocators.shtml">Allocator</A>.
</UL>
<h3>Public base classes</h3>
None.
<h3>Members</h3>
<Table border>
<TR>
<TH>
Member
</TH>
<TH>
Where defined
</TH>
<TH>
Description
</TH>
</TR>
<TR>
<TD VAlign=top>
<tt>value_type</tt>
</TD>
<TD VAlign=top>
 <A href="Container.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Container.shtml">Container</A>
</TD>
<TD VAlign=top>
The type of object, <tt>T</tt>, stored in the set.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>key_type</tt>
</TD>
<TD VAlign=top>
 <A href="AssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AssociativeContainer.shtml">Associative Container</A>
</TD>
<TD VAlign=top>
The key type associated with <tt>value_type</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>key_compare</tt>
</TD>
<TD VAlign=top>
 <A href="SortedAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/SortedAssociativeContainer.shtml">Sorted Associative Container</A>
</TD>
<TD VAlign=top>
 <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">Function object</A> that compares two keys for ordering.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>value_compare</tt>
</TD>
<TD VAlign=top>
 <A href="SortedAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/SortedAssociativeContainer.shtml">Sorted Associative Container</A>
</TD>
<TD VAlign=top>
 <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">Function object</A> that compares two values for ordering.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>pointer</tt>
</TD>
<TD VAlign=top>
 <A href="Container.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Container.shtml">Container</A>
</TD>
<TD VAlign=top>
Pointer to <tt>T</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>reference</tt>
</TD>
<TD VAlign=top>
 <A href="Container.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Container.shtml">Container</A>
</TD>
<TD VAlign=top>
Reference to <tt>T</tt>
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>const_reference</tt>
</TD>
<TD VAlign=top>
 <A href="Container.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Container.shtml">Container</A>
</TD>
<TD VAlign=top>
Const reference to <tt>T</tt>
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>size_type</tt>
</TD>
<TD VAlign=top>
 <A href="Container.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Container.shtml">Container</A>
</TD>
<TD VAlign=top>
An unsigned integral type.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>difference_type</tt>
</TD>
<TD VAlign=top>
 <A href="Container.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Container.shtml">Container</A>
</TD>
<TD VAlign=top>
A signed integral type.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>iterator</tt>
</TD>
<TD VAlign=top>
 <A href="Container.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Container.shtml">Container</A>
</TD>
<TD VAlign=top>
Iterator used to iterate through a <tt>set</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>const_iterator</tt>
</TD>
<TD VAlign=top>
 <A href="Container.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Container.shtml">Container</A>
</TD>
<TD VAlign=top>
Const iterator used to iterate through a <tt>set</tt>.  (<tt>Iterator</tt> and
   <tt>const_iterator</tt> are the same type.)
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>reverse_iterator</tt>
</TD>
<TD VAlign=top>
 <A href="ReversibleContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ReversibleContainer.shtml">Reversible Container</A>
</TD>
<TD VAlign=top>
Iterator used to iterate backwards through a <tt>set</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>const_reverse_iterator</tt>
</TD>
<TD VAlign=top>
 <A href="ReversibleContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ReversibleContainer.shtml">Reversible Container</A>
</TD>
<TD VAlign=top>
Const iterator used to iterate backwards through a <tt>set</tt>.
  (<tt>Reverse_iterator</tt> and <tt>const_reverse_iterator</tt> are the same type.)
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>iterator begin() const</tt>
</TD>
<TD VAlign=top>
 <A href="Container.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Container.shtml">Container</A>
</TD>
<TD VAlign=top>
Returns an <tt>iterator</tt> pointing to the beginning of the <tt>set</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>iterator end() const</tt>
</TD>
<TD VAlign=top>
 <A href="Container.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Container.shtml">Container</A>
</TD>
<TD VAlign=top>
Returns an <tt>iterator</tt> pointing to the end of the <tt>set</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>reverse_iterator rbegin() const</tt>
</TD>
<TD VAlign=top>
 <A href="ReversibleContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ReversibleContainer.shtml">Reversible Container</A>
</TD>
<TD VAlign=top>
Returns a <tt>reverse_iterator</tt> pointing to the beginning of the
   reversed set.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>reverse_iterator rend() const</tt>
</TD>
<TD VAlign=top>
 <A href="ReversibleContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ReversibleContainer.shtml">Reversible Container</A>
</TD>
<TD VAlign=top>
Returns a <tt>reverse_iterator</tt> pointing to the end of the
   reversed set.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>size_type size() const</tt>
</TD>
<TD VAlign=top>
 <A href="Container.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Container.shtml">Container</A>
</TD>
<TD VAlign=top>
Returns the size of the <tt>set</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>size_type max_size() const</tt>
</TD>
<TD VAlign=top>
 <A href="Container.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Container.shtml">Container</A>
</TD>
<TD VAlign=top>
Returns the largest possible size of the <tt>set</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>bool empty() const</tt>
</TD>
<TD VAlign=top>
 <A href="Container.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Container.shtml">Container</A>
</TD>
<TD VAlign=top>
<tt>true</tt> if the <tt>set</tt>'s size is <tt>0</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>key_compare key_comp() const</tt>
</TD>
<TD VAlign=top>
 <A href="SortedAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/SortedAssociativeContainer.shtml">Sorted Associative Container</A>
</TD>
<TD VAlign=top>
Returns the <tt>key_compare</tt> object used by the <tt>set</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>value_compare value_comp() const</tt>
</TD>
<TD VAlign=top>
 <A href="SortedAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/SortedAssociativeContainer.shtml">Sorted Associative Container</A>
</TD>
<TD VAlign=top>
Returns the <tt>value_compare</tt> object used by the <tt>set</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>set()</tt>
</TD>
<TD VAlign=top>
 <A href="Container.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Container.shtml">Container</A>
</TD>
<TD VAlign=top>
Creates an empty <tt>set</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>set(const key_compare&amp; comp)</tt>
</TD>
<TD VAlign=top>
 <A href="SortedAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/SortedAssociativeContainer.shtml">Sorted Associative Container</A>
</TD>
<TD VAlign=top>
Creates an empty <tt>set</tt>, using <tt>comp</tt> as the <tt>key_compare</tt> object.
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
template &lt;class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>&gt;
set(InputIterator f, InputIterator l)
<A href="#1">[1]</A>
</pre>
</TD>
<TD VAlign=top>
 <A href="UniqueSortedAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/UniqueSortedAssociativeContainer.shtml">Unique Sorted Associative Container</A>
</TD>
<TD VAlign=top>
Creates a set with a copy of a range.
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
template &lt;class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>&gt;
set(InputIterator f, InputIterator l,
    const key_compare&amp; comp)
<A href="#1">[1]</A>
</pre>
</TD>
<TD VAlign=top>
 <A href="UniqueSortedAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/UniqueSortedAssociativeContainer.shtml">Unique Sorted Associative Container</A>
</TD>
<TD VAlign=top>
Creates a set with a copy of a range, using <tt>comp</tt> as the <tt>key_compare</tt>
   object.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>set(const set&amp;)</tt>
</TD>
<TD VAlign=top>
 <A href="Container.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Container.shtml">Container</A>
</TD>
<TD VAlign=top>
The copy constructor.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>set&amp; operator=(const set&amp;)</tt>
</TD>
<TD VAlign=top>
 <A href="Container.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Container.shtml">Container</A>
</TD>
<TD VAlign=top>
The assignment operator
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>void swap(set&amp;)</tt>
</TD>
<TD VAlign=top>
 <A href="Container.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Container.shtml">Container</A>
</TD>
<TD VAlign=top>
Swaps the contents of two sets.
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
pair&lt;iterator, bool&gt;
insert(const value_type&amp; x)
</pre>
</TD>
<TD VAlign=top>
 <A href="UniqueAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/UniqueAssociativeContainer.shtml">Unique Associative Container</A>
</TD>
<TD VAlign=top>
Inserts <tt>x</tt> into the <tt>set</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
iterator insert(iterator pos, 
                const value_type&amp; x)
</pre>
</TD>
<TD VAlign=top>
 <A href="UniqueSortedAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/UniqueSortedAssociativeContainer.shtml">Unique Sorted Associative Container</A>
</TD>
<TD VAlign=top>
Inserts <tt>x</tt> into the <tt>set</tt>, using <tt>pos</tt> as a hint to where it will be
   inserted.
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
template &lt;class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>&gt;
void insert(InputIterator, InputIterator)
<A href="#1">[1]</A>
</pre>
</TD>
<TD VAlign=top>
 <A href="UniqueSortedAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/UniqueSortedAssociativeContainer.shtml">Unique Sorted Associative Container</A>
</TD>
<TD VAlign=top>
Inserts a range into the <tt>set</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>void erase(iterator pos)</tt>
</TD>
<TD VAlign=top>
 <A href="AssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AssociativeContainer.shtml">Associative Container</A>
</TD>
<TD VAlign=top>
Erases the element pointed to by <tt>pos</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>size_type erase(const key_type&amp; k)</tt>
</TD>
<TD VAlign=top>
 <A href="AssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AssociativeContainer.shtml">Associative Container</A>
</TD>
<TD VAlign=top>
Erases the element whose key is <tt>k</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>void erase(iterator first, iterator last)</tt>
</TD>
<TD VAlign=top>
 <A href="AssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AssociativeContainer.shtml">Associative Container</A>
</TD>
<TD VAlign=top>
Erases all elements in a range.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>void clear()</tt>
</TD>
<TD VAlign=top>
 <A href="AssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AssociativeContainer.shtml">Associative Container</A>
</TD>
<TD VAlign=top>
Erases all of the elements.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>iterator find(const key_type&amp; k) const</tt>
</TD>
<TD VAlign=top>
 <A href="AssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AssociativeContainer.shtml">Associative Container</A>
</TD>
<TD VAlign=top>
Finds an element whose key is <tt>k</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>size_type count(const key_type&amp; k) const</tt>
</TD>
<TD VAlign=top>
 <A href="UniqueAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/UniqueAssociativeContainer.shtml">Unique Associative Container</A>
</TD>
<TD VAlign=top>
Counts the number of elements whose key is <tt>k</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>iterator lower_bound(const key_type&amp; k) const</tt>
</TD>
<TD VAlign=top>
 <A href="SortedAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/SortedAssociativeContainer.shtml">Sorted Associative Container</A>
</TD>
<TD VAlign=top>
Finds the first element whose key is not less than <tt>k</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>iterator upper_bound(const key_type&amp; k) const</tt>
</TD>
<TD VAlign=top>
 <A href="SortedAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/SortedAssociativeContainer.shtml">Sorted Associative Container</A>
</TD>
<TD VAlign=top>
Finds the first element whose key greater than <tt>k</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
pair&lt;iterator, iterator&gt; 
equal_range(const key_type&amp; k) const
</pre>
</TD>
<TD VAlign=top>
 <A href="SortedAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/SortedAssociativeContainer.shtml">Sorted Associative Container</A>
</TD>
<TD VAlign=top>
Finds a range containing all elements whose key is <tt>k</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
bool operator==(const set&amp;, 
                const set&amp;)
</pre>
</TD>
<TD VAlign=top>
 <A href="ForwardContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardContainer.shtml">Forward Container</A>
</TD>
<TD VAlign=top>
Tests two sets for equality.  This is a global function, not
   a member function.
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
bool operator&lt;(const set&amp;, 
               const set&amp;)
</pre>
</TD>
<TD VAlign=top>
 <A href="ForwardContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardContainer.shtml">Forward Container</A>
</TD>
<TD VAlign=top>
Lexicographical comparison.  This is a global function, not
   a member function.
</TD>
</tr>
</table>
<h3>New members</h3>
All of <tt>set</tt>'s members are defined in the 
<A href="UniqueSortedAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/UniqueSortedAssociativeContainer.shtml">Unique Sorted Associative Container</A>
and <A href="SimpleAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/SimpleAssociativeContainer.shtml">Simple Associative Container</A>
requirements.  <tt>Set</tt> does not introduce any new members.
<h3>Notes</h3>
<P><A name="1">[1]</A>
This member function relies on <i>member template</i> functions, which
at present (early 1998) are not supported by all compilers.  If your
compiler supports member templates, you can call this function with
any type of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">input iterator</A>.  If your
compiler does not yet support member templates, though, then the
arguments must either be of type <tt>const value_type*</tt> or of type
<tt>set::const_iterator</tt>.
<h3>See also</h3>
<A href="AssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AssociativeContainer.shtml">Associative Container</A>, 
<A href="SortedAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/SortedAssociativeContainer.shtml">Sorted Associative Container</A>, 
<A href="SimpleAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/SimpleAssociativeContainer.shtml">Simple Associative Container</A>,
<A href="UniqueSortedAssociativeContainer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/UniqueSortedAssociativeContainer.shtml">Unique Sorted Associative Container</A>, 
<tt><A href="Map.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Map.shtml">map</A></tt>,
<tt><A href="multiset.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/multiset.shtml">multiset</A></tt>,
<tt><A href="Multimap.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Multimap.shtml">multimap</A></tt>,
<tt><A href="hash_set.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/hash_set.shtml">hash_set</A></tt>, 
<tt><A href="hash_map.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/hash_map.shtml">hash_map</A></tt>, 
<tt><A href="hash_multiset.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/hash_multiset.shtml">hash_multiset</A></tt>, 
<tt><A href="hash_multimap.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/hash_multimap.shtml">hash_multimap</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>