<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>temporary_buffer¡´ForwardIterator, T¡µ</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>temporary_buffer&lt;ForwardIterator, T&gt;</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "allocators.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/allocators.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "type.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/type.gif" Alt=""   WIDTH = "194"  HEIGHT = "39" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: allocators</TD>
<TD Align=right VAlign=top><b>Component type</b>: type</TD>
</TR>
</Table>

<h3>Description</h3>
Some algorithms, such as <tt><A href="stable_sort.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/stable_sort.shtml">stable_sort</A></tt> and <tt><A href="inplace_merge.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/inplace_merge.shtml">inplace_merge</A></tt>,
are <i>adaptive</i>: they attempt to use extra temporary memory to store
intermediate results, and their run-time complexity is better if that
extra memory is available.  These algorithms use <tt>temporary_buffer</tt>
to allocate that extra memory.
<P>
<tt>temporary_buffer</tt>'s constructor takes two arguments, <tt>first</tt> and
<tt>last</tt>, of type <tt>ForwardIterator</tt>; the constructor allocates
a buffer that is large enough to contain <tt>N</tt> objects of type <tt>T</tt>,
where <tt>0 &lt;= N &lt;= last - first</tt> <A href="#1">[1]</A>, and it fills the buffer with 
objects of type <tt>T</tt>.  The member functions <tt>begin()</tt> and 
<tt>end()</tt> return iterators that point to the beginning and the end
of the buffer.
<P>
Note that the elements in the buffer are guaranteed to be 
initialized; that is, <tt>begin()</tt> points to an object of type
<tt>T</tt>, not to raw memory.   However, the initial values of
the buffer's elements are unspecified.  You should not rely
on them to be initialized to any particular value.
<P>
<tt>temporary_buffer</tt> does not have a copy constructor, or an assignment
operator.  Those operations would have complicated, and not terribly
useful, semantics.
<P>
(Earlier versions of the STL used <tt><A href="get_temporary_buffer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/get_temporary_buffer.shtml">get_temporary_buffer</A></tt> and
<tt><A href="return_temporary_buffer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/return_temporary_buffer.shtml">return_temporary_buffer</A></tt> instead of <tt>temporary_buffer</tt>.  
<tt>temporary_buffer</tt> is more convenient, because it does not require
using <tt><A href="uninitialized_copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/uninitialized_copy.shtml">uninitialized_copy</A></tt>, and in some cases it is also more
efficient.  Additionally, it is much easier to write exception-safe
code with <tt>temporary_buffer</tt> than with <tt><A href="get_temporary_buffer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/get_temporary_buffer.shtml">get_temporary_buffer</A></tt> and
<tt><A href="return_temporary_buffer.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/return_temporary_buffer.shtml">return_temporary_buffer</A></tt>.)
<h3>Example</h3>
<pre>
int main()
{
  vector&lt;int&gt; V(50);
  iota(V.begin(), V.end(), 1);

  temporary_buffer&lt;vector&lt;int&gt;::iterator, int&gt; buf(V.begin(), V.end());
  copy(V.rbegin(), V.rbegin() + buf.size(), buf.begin());
  copy(buf.begin(), buf.end(), ostream_iterator&lt;int&gt;(cout, &quot;\n&quot;));
}
</pre>
<h3>Definition</h3>
Defined in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.  The implementation is in <A href="tempbuf.h" tppabs="http://codeguru.developer.com/cpp/stlguide/tempbuf.h">tempbuf.h</A>.
<h3>Template parameters</h3>
<Table border>
<TR>
<TH>
Parameter
</TH>
<TH>
Description
</TH>
<TH>
Default
</TH>
</TR>
<TR>
<TD VAlign=top>
<tt>ForwardIterator</tt>
</TD>
<TD VAlign=top>
The type of the iterators passed as arguments to
   <tt>temporary_buffer</tt>'s constructor.
</TD>
<TD VAlign=top>
&nbsp;
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>T</tt>
</TD>
<TD VAlign=top>
The type of object stored in the temporary buffer.
</TD>
<TD VAlign=top>
<tt><A href="iterator_traits.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/iterator_traits.shtml">iterator_traits</A>&lt;ForwardIterator&gt;::value_type</tt> <A href="#2">[2]</A>
</TD>
</tr>
</table>
<h3>Model of</h3>
None.  <tt>temporary_buffer</tt> is vaguely similar to a <A href="Container.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Container.shtml">Container</A>, 
but it does not provide the entire <A href="Container.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Container.shtml">Container</A> interface.  In
particular, it is not a model of <A href="DefaultConstructible.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/DefaultConstructible.shtml">DefaultConstructible</A> or
<A href="Assignable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Assignable.shtml">Assignable</A>.
<h3>Type requirements</h3>
<UL>
<LI>
<tt>ForwardIterator</tt> is a model of <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">Forward Iterator</A>
<LI>
<tt>ForwardIterator</tt> is mutable.
<LI>
<tt>T</tt> has a constructor that can take a single argument of
   <tt>ForwardIterator</tt>'s value type.
</UL>
<h3>Public base classes</h3>
None.
<h3>Members</h3>
<Table border>
<TR>
<TH>
Member
</TH>
<TH>
Description
</TH>
</TR>
<TR>
<TD VAlign=top>
<pre>
temporary_buffer(ForwardIterator first, 
                 ForwardIterator last)
</pre>
</TD>
<TD VAlign=top>
Allocates a temporary buffer that holds at most <tt>last - first</tt> elements
of type <tt>T</tt>, and constructs those elements.  The initial values of
the elements are unspecified.  Precondition: <tt>[first, last)</tt> is a
valid range.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>~temporary_buffer()</tt>
</TD>
<TD VAlign=top>
Destroys the elements in the temporary buffer, and deallocates
the buffer itself.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>T* begin()</tt>
</TD>
<TD VAlign=top>
Returns a pointer to the first element in the buffer.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>T* end()</tt>
</TD>
<TD VAlign=top>
Returns a pointer that points one past the last element
in the buffer.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>ptrdiff_t requested_size() const</tt>
</TD>
<TD VAlign=top>
Returns the value <tt>last - first</tt>, where <tt>first</tt> and <tt>last</tt> are
the arguments that were passed to the constructor.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>ptrdiff_t size() const</tt>
</TD>
<TD VAlign=top>
Returns the number of elements in the temporary buffer,
<tt>end() - begin()</tt>.  The return value satisfies the constraint
<tt>0 &lt;= size() &lt;= requested_size()</tt>. 
</TD>
</tr>
</table>
<h3>New members</h3>
<h3>Notes</h3>
<P><A name="1">[1]</A>
The <i>requested size</i> is <tt>last - first</tt>.  The size of the
temporary buffer is never larger than the requested size, but it might
well be smaller; the size might even be zero.  The intention is that
<tt>temporary_buffer</tt> will allocate as large a buffer as is possible
without hurting performance.  Note that determining this maximum size
is quite difficult: it depends on cache size, physical versus virtual
memory, heap fragmentation, and so on.  A good implementation of
<tt>temporary_buffer</tt> must be nonportable.
<P><A name="2">[2]</A>
The <A href="iterator_traits.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/iterator_traits.shtml">iterator_traits</A> mechanism relies on partial
specialization of templates.  If your compiler does not yet
implement this features, then you will not be able to use this
default parameter; you will have to provide both template arguments.
<h3>See also</h3>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>