<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>transform</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>transform</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<tt>Transform</tt> is an overloaded name; there are actually two <tt>transform</tt>
functions.
<pre>
template &lt;class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>, class <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">OutputIterator</A>, class <A href="UnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/UnaryFunction.shtml">UnaryFunction</A>&gt;
OutputIterator transform(InputIterator first, InputIterator last,
                         OutputIterator result, UnaryFunction op);


template &lt;class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>1, class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>2, class <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">OutputIterator</A>,
          class <A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">BinaryFunction</A>&gt;
OutputIterator transform(InputIterator1 first1, InputIterator1 last1,
                         InputIterator2 first2, OutputIterator result,
                         BinaryFunction binary_op);
</pre>                   
<h3>Description</h3>
<tt>Transform</tt> performs an operation on objects; there are two versions
of <tt>transform</tt>, one of which uses a single range of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterators</A>
and one of which uses two ranges of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterators</A>.
<P>
The first version of <tt>transform</tt> performs the operation <tt>op(*i)</tt>
for each iterator <tt>i</tt> in the range <tt>[first, last)</tt>, and assigns
the result of that operation to <tt>*o</tt>, where <tt>o</tt> is the corresponding
output iterator.  That is, for each <tt>n</tt> such that <tt>0 &lt;= n &lt; last - first</tt>,
it performs the assignment <tt>*(result + n) = op(*(first + n))</tt>.
The return value is <tt>result + (last - first)</tt>.
<P>
The second version of <tt>transform</tt> is very similar, except that it
uses a <A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">Binary Function</A> instead of a <A href="UnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/UnaryFunction.shtml">Unary Function</A>:
it performs the operation <tt>op(*i1, *i2)</tt> for each iterator <tt>i1</tt> in the
range <tt>[first1, last1)</tt> and assigns the result to <tt>*o</tt>, where
<tt>i2</tt> is the corresponding iterator in the second input range and
where <tt>o</tt> is the corresponding output iterator.  That is, 
for each <tt>n</tt> such that <tt>0 &lt;= n &lt; last1 - first1</tt>,
it performs the assignment <tt>*(result + n) = op(*(first1 + n), *(first2
+ n)</tt>.  The return value is <tt>result + (last1 - first1)</tt>.
<P>
Note that <tt>transform</tt> may be used to modify a sequence &quot;in place&quot;:
it is permissible for the iterators <tt>first</tt> and <tt>result</tt> to be the same. <A href="#1">[1]</A>
<h3>Definition</h3>
Defined in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.
<h3>Requirements on types</h3>
For the first (unary) version: 
<UL>
<LI>
<tt>InputIterator</tt> must be a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>OutputIterator</tt> must be a model of <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">Output Iterator</A>.
<LI>
<tt>UnaryFunction</tt> must be a model of <A href="UnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/UnaryFunction.shtml">Unary Function</A>.
<LI>
<tt>InputIterator</tt>'s value type must be
   convertible to <tt>UnaryFunction</tt>'s argument type.
<LI>
<tt>UnaryFunction</tt>'s result type must be convertible to a type in
   <tt>OutputIterator</tt>'s set of value types.
</UL>
For the second (binary) version:
<UL>
<LI>
<tt>InputIterator1</tt> and <tt>InputIterator2</tt>
   must be models of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>OutputIterator</tt> must be a model of <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">Output Iterator</A>.
<LI>
<tt>BinaryFunction</tt> must be a model of <A href="BinaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryFunction.shtml">Binary Function</A>.
<LI>
<tt>InputIterator1</tt>'s and <tt>InputIterator2</tt>'s value types must
   be convertible, respectively, to <tt>BinaryFunction</tt>'s first and second
   argument types.
<LI>
<tt>UnaryFunction</tt>'s result type must be convertible
   to a type in <tt>OutputIterator</tt>'s set of value types.
</UL>
<h3>Preconditions</h3>
For the first (unary) version: 
<UL>
<LI>
<tt>[first, last)</tt> is a valid range.
<LI>
<tt>result</tt> is not an iterator within the range <tt>[first+1, last)</tt>. <A href="#1">[1]</A>
<LI>
There is enough space to hold all of the elements being copied.
   More formally, the requirement is that 
   <tt>[result, result + (last - first))</tt> is a valid range. 
</UL>
For the second (binary) version:
<UL>
<LI>
<tt>[first1, last1)</tt> is a valid range.
<LI>
<tt>[first2, first2 + (last1 - first1))</tt> is a valid range.
<LI>
<tt>result</tt> is not an iterator within the range <tt>[first1+1, last1)</tt>
    or <tt>[first2 + 1, first2 + (last1 - first1))</tt>.
<LI>
There is enough space to hold all of the elements being copied.
   More formally, the requirement is that 
   <tt>[result, result + (last1 - first1))</tt> is a valid range.
</UL>
<h3>Complexity</h3>
Linear.  The operation is applied exactly <tt>last - first</tt> times 
in the case of the unary version, or <tt>last1 - first1</tt> in the case
of the binary version.
<h3>Example</h3>
Replace every number in an array with its negative.
<pre>
const int N = 1000;
double A[N];
<A href="iota.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/iota.shtml">iota</A>(A, A+N, 1);

transform(A, A+N, A, <A href="negate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/negate.shtml">negate</A>&lt;double&gt;());
</pre>
<P>
Calculate the sum of two vectors, storing the result in a third vector.
<pre>
const int N = 1000;
<A href="Vector.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Vector.shtml">vector</A>&lt;int&gt; V1(N);
<A href="Vector.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Vector.shtml">vector</A>&lt;int&gt; V2(N);
<A href="Vector.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Vector.shtml">vector</A>&lt;int&gt; V3(N);

<A href="iota.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/iota.shtml">iota</A>(V1.begin(), V1.end(), 1);
<A href="fill.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/fill.shtml">fill</A>(V2.begin(), V2.end(), 75);

assert(V2.size() &gt;= V1.size() &amp;&amp; V3.size() &gt;= V1.size());
transform(V1.begin(), V1.end(), V2.begin(), V3.begin(),
          <A href="plus.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/plus.shtml">plus</A>&lt;int&gt;());
</pre>
<h3>Notes</h3>
<P><A name="1">[1]</A>
The <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">Output Iterator</A> <tt>result</tt> is not permitted to be the same as
any of the <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterators</A> in the range <tt>[first, last)</tt>, with the
exception of <tt>first</tt> itself.  That is: 
<tt>transform(V.begin(), V.end(), V.begin(), fabs)</tt> is valid, but
<tt>transform(V.begin(), V.end(), V.begin() + 1, fabs)</tt> is not.
<h3>See also</h3>
The <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object overview</A>, <tt><A href="copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/copy.shtml">copy</A></tt>, <tt><A href="generate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/generate.shtml">generate</A></tt>, 
<tt><A href="fill.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/fill.shtml">fill</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>