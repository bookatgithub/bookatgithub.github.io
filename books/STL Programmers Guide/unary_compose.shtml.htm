<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>unary_compose¡´AdaptableUnaryFunction1,AdaptableUnaryFunction2¡µ</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>unary_compose&lt;AdaptableUnaryFunction1,AdaptableUnaryFunction2&gt;</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "functors.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "type.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/type.gif" Alt=""   WIDTH = "194"  HEIGHT = "39" ></TD>
</TR>
<TR>
<TD Align=left><Img src = "adaptors.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/adaptors.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Categories</b>: functors, adaptors</TD>
<TD Align=right VAlign=top><b>Component type</b>: type</TD>
</TR>
</Table>

<h3>Description</h3>
<tt>Unary_compose</tt> is a <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object</A> adaptor.  If <tt>f</tt> and <tt>g</tt> are both
<A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Functions</A>, and if <tt>g</tt>'s return type is convertible
to <tt>f</tt>'s argument type, then <tt>unary_compose</tt> can be used to create a
function object <tt>h</tt> such that <tt>h(x)</tt> is the same as <tt>f(g(x))</tt>. <A href="#1">[1]</A>  As
with other function object adaptors, the easiest way to create a
<tt>unary_compose</tt> is to use the helper function <tt>compose1</tt>.  It is
possible to call <tt>unary_compose</tt>'s constructor directly, but there
is usually no reason to do so.
<h3>Example</h3>
Calculates the negative of the sines of the elements in a vector, where the elements
are angles measured in degrees.  Since the C library function <tt>sin</tt>
takes its arguments in radians, this operation is the composition of
three operations: negation, <tt>sin</tt>, and the conversion of degrees to radians.
<pre>
vector&lt;double&gt; angles;
vector&lt;double&gt; sines;
const double pi = 3.14159265358979323846;
...
assert(sines.size() &gt;= angles.size());
transform(angles.begin(), angles.end(), sines.begin(),
          compose1(<A href="negate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/negate.shtml">negate</A>&lt;double&gt;(),
                   compose1(<A href="ptr_fun.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ptr_fun.shtml">ptr_fun</A>(sin),
                            <A href="binder2nd.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binder2nd.shtml">bind2nd</A>(<A href="times.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/times.shtml">multiplies</A>&lt;double&gt;(), pi / 180.))));
</pre>
<h3>Definition</h3>
Defined in <A href="javascript:if(confirm('http://codeguru.developer.com/cpp/stlguide/function.h  \n\nThis file was not retrieved by Teleport Pro, because the server reports that an error occurred that prevented retrieval.  \n\nDo you want to open it from the server?'))window.location='http://codeguru.developer.com/cpp/stlguide/function.h'" tppabs="http://codeguru.developer.com/cpp/stlguide/function.h">function.h</A>.
<h3>Template parameters</h3>
<Table border>
<TR>
<TH>
Parameter
</TH>
<TH>
Description
</TH>
<TH>
Default
</TH>
</TR>
<TR>
<TD VAlign=top>
<tt>AdaptableUnaryFunction1</tt>
</TD>
<TD VAlign=top>
The type of the first operand in the function composition operation.
   That is, if the composition is written <tt>f o g</tt> <A href="#1">[1]</A>, then 
   <tt>AdaptableUnaryFunction1</tt> is the type of the function object <tt>f</tt>.
</TD>
<TD VAlign=top>
&nbsp;
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>AdaptableUnaryFunction2</tt>
</TD>
<TD VAlign=top>
The type of the second operand in the function composition operation.
   That is, if the composition is written <tt>f o g</tt> <A href="#1">[1]</A>, then 
   <tt>AdaptableUnaryFunction1</tt> is the type of the function object <tt>g</tt>.
</TD>
<TD VAlign=top>
&nbsp;
</TD>
</tr>
</table>
<h3>Model of</h3>
<A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>
<h3>Type requirements</h3>
<tt>AdaptableUnaryFunction1</tt> and <tt>AdaptableUnaryFunction2</tt> must both
be models of <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>.  
<tt>AdaptableUnaryFunction2::result_type</tt> must be convertible to
<tt>AdaptableUnaryFunction1::argument_type</tt>.
<h3>Public base classes</h3>
<pre>
<A href="unary_function.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/unary_function.shtml">unary_function</A>&lt;AdaptableUnaryFunction2::argument_type,
               AdaptableUnaryFunction1::result_type&gt;
</pre>
<h3>Members</h3>
<Table border>
<TR>
<TH>
Member
</TH>
<TH>
Where defined
</TH>
<TH>
Description
</TH>
</TR>
<TR>
<TD VAlign=top>
<tt>argument_type</tt>
</TD>
<TD VAlign=top>
 <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>
</TD>
<TD VAlign=top>
The type of the function object's argument:
<tt>AdaptableUnaryFunction2::argument_type</tt>.
</TD>
</TR>
<TR>
<TD VAlign=top>
<tt>result_type</tt>
</TD>
<TD VAlign=top>
 <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>
</TD>
<TD VAlign=top>
The type of the result: <tt>AdaptableUnaryFunction1::result_type</tt>
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
unary_compose(const AdaptableUnaryFunction1&amp; f,
              const AdaptableUnaryFunction2&amp; g);
</pre>
</TD>
<TD VAlign=top>
<tt>unary_compose</tt>
</TD>
<TD VAlign=top>
See below.
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
template &lt;class <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">AdaptableUnaryFunction</A>1, class <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">AdaptableUnaryFunction</A>2&gt;
unary_compose&lt;AdaptableUnaryFunction1, AdaptableUnaryFunction2&gt; 
compose1(const AdaptableUnaryFunction1&amp; op1, 
         const AdaptableUnaryFunction2&amp; op2);
</pre>
</TD>
<TD VAlign=top>
<tt>unary_compose</tt>
</TD>
<TD VAlign=top>
See below.
</TD>
</tr>
</table>
<h3>New members</h3>
These members are not defined in the 
<A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">Adaptable Unary Function</A>
requirements, but are specific to 
<tt>unary_compose</tt>.
<Table border>
<TR>
<TH>
Member
</TH>
<TH>
Description
</TH>
</TR>
<TR>
<TD VAlign=top>
<pre>
unary_compose(const AdaptableUnaryFunction1&amp; f,
              const AdaptableUnaryFunction2&amp; g);
</pre>
</TD>
<TD VAlign=top>
The constructor.  Constructs a <tt>unary_compose</tt> object that represents
the function object <tt>f o g</tt>. <A href="#1">[1]</A>
</TD>
</TR>
<TR>
<TD VAlign=top>
<pre>
template &lt;class <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">AdaptableUnaryFunction</A>1, class <A href="AdaptableUnaryFunction.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/AdaptableUnaryFunction.shtml">AdaptableUnaryFunction</A>2&gt;
unary_compose&lt;AdaptableUnaryFunction1, AdaptableUnaryFunction2&gt; 
compose1(const AdaptableUnaryFunction1&amp; op1, 
         const AdaptableUnaryFunction2&amp; op2);
</pre>
</TD>
<TD VAlign=top>
Creates a <tt>unary_compose</tt> object.  If <tt>f</tt> and <tt>g</tt> are, respectively, of classes
<tt>AdaptableUnaryFunction1</tt> and <tt>AdaptableUnaryFunction2</tt>, then
<tt>compose1(f, g)</tt> is equivalent to 
<tt>unary_compose&lt;AdaptableUnaryFunction1, AdaptableUnaryFunction2&gt;(f, g)</tt>,
but is more convenient.  This is a global function, not a member function.
</TD>
</tr>
</table>
<h3>Notes</h3>
<P><A name="1">[1]</A>
This operation is called function composition, hence
the name <tt>unary_compose</tt>.  It is often represented in mathematics
as the operation <tt>f o g</tt>, where <tt>f o g</tt> is a function such that
<tt>(f o g)(x) == f(g(x))</tt>.  Function composition is a very important
concept in algebra.  It is also extremely important as a method
of building software components out of other components, because
it makes it possible to construct arbitrarily complicated function
objects out of simple ones.
<h3>See also</h3>
The <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object overview</A>, <tt><A href="binary_compose.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binary_compose.shtml">binary_compose</A></tt>, 
<tt><A href="binder1st.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binder1st.shtml">binder1st</A></tt>, <tt><A href="binder2nd.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binder2nd.shtml">binder2nd</A></tt>.

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>