<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>uninitialized_copy</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>uninitialized_copy</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "allocators.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/allocators.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Categories</b>: allocators, algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<pre>
template &lt;class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>, class <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">ForwardIterator</A>&gt;
ForwardIterator uninitialized_copy(InputIterator first, InputIterator last,
                                   ForwardIterator result);
</pre>                   
<h3>Description</h3>
In C++, the operator <tt>new</tt> allocates memory for an object and then
creates an object at that location by calling a constructor.  Occasionally,
however, it is useful to separate those two operations. <A href="#1">[1]</A> If each iterator
in the range <tt>[result, result + (last - first))</tt> points to uninitialized
memory, then <tt>uninitialized_copy</tt> creates a copy of <tt>[first, last)</tt>
in that range.  That is, for each iterator <tt>i</tt> in the input range,
<tt>uninitialized_copy</tt> creates a copy of <tt>*i</tt> in
the location pointed to by the corresponding iterator in the 
output range by calling <tt><A href="construct.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/construct.shtml">construct</A>(&amp;*(result + (i - first)), *i)</tt>.
<h3>Definition</h3>
Defined in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.  The implementation is in <A href="algobase.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algobase.h">algobase.h</A>.
<h3>Requirements on types</h3>
<UL>
<LI>
<tt>InputIterator</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>ForwardIterator</tt> is a model of <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">Forward Iterator</A>.
<LI>
<tt>ForwardIterator</tt> is mutable.
<LI>
<tt>ForwardIterator</tt>'s value type has a constructor that takes a
   single argument whose type is <tt>InputIterator</tt>'s value type.
</UL>
<h3>Preconditions</h3>
<UL>
<LI>
<tt>[first, last)</tt> is a valid range.
<LI>
<tt>[result, result + (last - first))</tt> is a valid range.
<LI>
Each iterator in <tt>[result, result + (last - first))</tt> points to
   a region of uninitialized memory that is large enough to store
   a value of <tt>ForwardIterator</tt>'s value type.
</UL>
<h3>Complexity</h3>
Linear.  Exactly <tt>last - first</tt> constructor calls.
<h3>Example</h3>
<pre>
class Int {
public:
  Int(int x) : val(x) {}
  int get() { return val; }
private:
  int val;
};    

int main()
{
  int A1[] = {1, 2, 3, 4, 5, 6, 7};
  const int N = sizeof(A1) / sizeof(int);

  Int* A2 = (Int*) malloc(N * sizeof(Int));
  uninitialized_copy(A1, A1 + N, A2);
}
</pre>
<h3>Notes</h3>
<P><A name="1">[1]</A>
In particular, this sort of low-level memory management is used
in the implementation of some container classes.
<h3>See also</h3>
<A href="Allocators.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Allocators.shtml">Allocators</A>, <tt><A href="construct.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/construct.shtml">construct</A></tt>, <tt><A href="destroy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/destroy.shtml">destroy</A></tt>, 
<tt><A href="uninitialized_fill.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/uninitialized_fill.shtml">uninitialized_fill</A></tt>, <tt><A href="uninitialized_fill_n.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/uninitialized_fill_n.shtml">uninitialized_fill_n</A></tt>,
<tt><A href="raw_storage_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/raw_storage_iterator.shtml">raw_storage_iterator</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>