<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>unique</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>unique</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<tt>Unique</tt> is an overloaded name; there are actually two <tt>unique</tt>
functions.
<pre>
template &lt;class <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">ForwardIterator</A>&gt;
ForwardIterator unique(ForwardIterator first, ForwardIterator last);

template &lt;class <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">ForwardIterator</A>, class <A href="BinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryPredicate.shtml">BinaryPredicate</A>&gt;
ForwardIterator unique(ForwardIterator first, ForwardIterator last,
                       BinaryPredicate binary_pred);
</pre>                   
<h3>Description</h3>
Every time a consecutive group of duplicate elements appears in the
range <tt>[first, last)</tt>, the algorithm <tt>unique</tt> removes all but the 
first element.  That is, <tt>unique</tt> returns  an iterator
<tt>new_last</tt> such that the range <tt>[first, new_last)</tt> contains no
two consecutive elements that are duplicates.  <A href="#1">[1]</A>
The iterators in the range <tt>[new_last, last)</tt> are all still 
dereferenceable, but the elements that they point to are unspecified.
<tt>Unique</tt> is stable, meaning that the relative order of elements that 
are not removed is unchanged.  
<P>
The reason there are two different versions of <tt>unique</tt> is that there
are two different definitions of what it means for a consecutive group
of elements to be duplicates.  In the first version, the test is
simple equality: the elements in a range <tt>[f, l)</tt> are duplicates if,
for every iterator <tt>i</tt> in the range, either <tt>i == f</tt> or else <tt>*i == *(i-1)</tt>.
In the second, the test is an arbitrary <A href="BinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryPredicate.shtml">Binary Predicate</A>
<tt>binary_pred</tt>: the elements in <tt>[f, l)</tt> are duplicates if, for every 
iterator <tt>i</tt> in the range, either <tt>i == f</tt> or else
<tt>binary_pred(*i, *(i-1))</tt> is <tt>true</tt>. <A href="#2">[2]</A>
<h3>Definition</h3>
Defined in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.
<h3>Requirements on types</h3>
For the first version:
<UL>
<LI>
<tt>ForwardIterator</tt> is a model of <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">Forward Iterator</A>.
<LI>
<tt>ForwardIterator</tt> is mutable.
<LI>
<tt>ForwardIterator</tt>'s value type is <A href="EqualityComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/EqualityComparable.shtml">Equality Comparable</A>.
</UL>
For the second version:
<UL>
<LI>
<tt>ForwardIterator</tt> is a model of <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">Forward Iterator</A>.
<LI>
<tt>ForwardIterator</tt> is mutable.
<LI>
<tt>BinaryPredicate</tt> is a model of <A href="BinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryPredicate.shtml">Binary Predicate</A>. <A href="#3">[3]</A>
<LI>
<tt>ForwardIterator</tt>'s value type is convertible to <tt>BinaryPredicate</tt>'s
   first argument type and to <tt>BinaryPredicate</tt>'s second argument type.
</UL>
<h3>Preconditions</h3>
<UL>
<LI>
<tt>[first, last)</tt> is a valid range.
</UL>
<h3>Complexity</h3>
Linear.  Exactly <tt>(last - first) - 1</tt> applications of <tt>operator==</tt>
(in the case of the first version of <tt>unique</tt>) or of <tt>binary_pred</tt>
(in the case of the second version).
<h3>Example</h3>
Remove duplicates from consecutive groups of equal <tt>int</tt>s.
<pre>
<A href="Vector.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Vector.shtml">vector</A>&lt;int&gt; V;
V.push_back(1);
V.push_back(3);
V.push_back(3);
V.push_back(3);
V.push_back(2);
V.push_back(2);
V.push_back(1);

<A href="Vector.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Vector.shtml">vector</A>&lt;int&gt;::iterator new_end = unique(V.begin(), V.end());
<A href="copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/copy.shtml">copy</A>(V.begin(), new_end, <A href="ostream_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ostream_iterator.shtml">ostream_iterator</A>&lt;int&gt;(cout, &quot; &quot;));
    // The output it &quot;1 3 2 1&quot;.
</pre>
<P>
Remove all duplicates from a vector of <tt>char</tt>s, ignoring case.  First
sort the vector, then remove duplicates from consecutive groups.
<pre>
inline bool eq_nocase(char c1, char c2) { return tolower(c1) == tolower(c2); }
inline bool lt_nocase(char c1, char c2) { return tolower(c1) &lt; tolower(c2); }

int main()
{
  const char init[] = &quot;The Standard Template Library&quot;;
  <A href="Vector.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Vector.shtml">vector</A>&lt;char&gt; V(init, init + sizeof(init));
  <A href="sort.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/sort.shtml">sort</A>(V.begin(), V.end(), lt_nocase);
  <A href="copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/copy.shtml">copy</A>(V.begin(), V.end(), <A href="ostream_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ostream_iterator.shtml">ostream_iterator</A>&lt;char&gt;(cout));
  cout &lt;&lt; endl;
  <A href="Vector.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Vector.shtml">vector</A>&lt;char&gt;::iterator new_end = unique(V.begin(), V.end(), eq_nocase);
  <A href="copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/copy.shtml">copy</A>(V.begin(), new_end, <A href="ostream_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ostream_iterator.shtml">ostream_iterator</A>&lt;char&gt;(cout));
  cout &lt;&lt; endl;
}
// The output is:
//    aaaabddeeehiLlmnprrrStTtTy
//  abdehiLmnprSty
</pre>
<h3>Notes</h3>
<P><A name="1">[1]</A>
Note that the meaning of &quot;removal&quot; is somewhat subtle. <tt>Unique</tt>,
like <tt><A href="remove.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/remove.shtml">remove</A></tt>, does not destroy any iterators and does not change
the distance between <tt>first</tt> and <tt>last</tt>.  (There's no way that it
could do anything of the sort.)  So, for example, if <tt>V</tt> is a
<A href="Vector.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Vector.shtml">vector</A>, <tt>remove(V.begin(), V.end(), 0)</tt> does not change
<tt>V.size()</tt>: <tt>V</tt> will contain just as many elements as it did before.
<tt>Unique</tt> returns an iterator that points to the end of the resulting
range after elements have been removed from it; it follows that the
elements after that iterator are of no interest.  If you are operating
on a <A href="Sequence.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Sequence.shtml">Sequence</A>, you may wish to use the <A href="Sequence.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/Sequence.shtml">Sequence</A>'s <tt>erase</tt>
member function to discard those elements entirely.
<P><A name="2">[2]</A>
Strictly speaking, the first version of <tt>unique</tt> is redundant:
you can achieve the same functionality by using an object of class
<tt><A href="equal_to.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/equal_to.shtml">equal_to</A></tt> as the <A href="BinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryPredicate.shtml">Binary Predicate</A> argument.  The first version
is provided strictly for the sake of convenience: testing for equality
is an important special case.
<P><A name="3">[3]</A>
<tt>BinaryPredicate</tt> is not required to be an equivalence
relation.  You should be cautious, though, about using <tt>unique</tt> with a
<A href="BinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryPredicate.shtml">Binary Predicate</A> that is not an equivalence relation: you could
easily get unexpected results.
<h3>See also</h3>
<tt><A href="BinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryPredicate.shtml">Binary Predicate</A></tt>, <tt><A href="remove.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/remove.shtml">remove</A></tt>, <tt><A href="remove_if.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/remove_if.shtml">remove_if</A></tt>, <tt><A href="unique_copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/unique_copy.shtml">unique_copy</A></tt>,
<tt><A href="adjacent_find.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/adjacent_find.shtml">adjacent_find</A></tt>, 

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>