<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>unique_copy</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>unique_copy</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<tt>Unique_copy</tt> is an overloaded name; there are
actually two <tt>unique_copy</tt> functions.
<pre>
template &lt;class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>, class <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">OutputIterator</A>&gt;
OutputIterator unique_copy(InputIterator first, InputIterator last,
                           OutputIterator result);

template &lt;class <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">InputIterator</A>, class <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">OutputIterator</A>, class <A href="BinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryPredicate.shtml">BinaryPredicate</A>&gt;
OutputIterator unique_copy(InputIterator first, InputIterator last,
                           OutputIterator result,
                           BinaryPredicate binary_pred);
</pre>                   
<h3>Description</h3>
<tt>Unique_copy</tt> copies elements from the range <tt>[first, last)</tt> to a 
range beginning with <tt>result</tt>, except that in a consecutive group of 
duplicate elements only the first one is copied.  The return value is
the end of the range to which the elements are copied.  This behavior 
is similar to the Unix filter <tt>uniq</tt>.
<P>
The reason there are two different versions of <tt>unique_copy</tt> is that there
are two different definitions of what it means for a consecutive group
of elements to be duplicates.  In the first version, the test is
simple equality: the elements in a range <tt>[f, l)</tt> are duplicates if,
for every iterator <tt>i</tt> in the range, either <tt>i == f</tt> or else <tt>*i == *(i-1)</tt>.
In the second, the test is an arbitrary <A href="BinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryPredicate.shtml">Binary Predicate</A>
<tt>binary_pred</tt>: the elements in <tt>[f, l)</tt> are duplicates if, for every 
iterator <tt>i</tt> in the range, either <tt>i == f</tt> or else
<tt>binary_pred(*i, *(i-1))</tt> is <tt>true</tt>. <A href="#1">[1]</A>
<h3>Definition</h3>
Defined in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.
<h3>Requirements on types</h3>
For the first version:
<UL>
<LI>
<tt>InputIterator</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>InputIterator</tt>'s value type is <A href="EqualityComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/EqualityComparable.shtml">Equality Comparable</A>.
<LI>
<tt>OutputIterator</tt> is a model of <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">Output Iterator</A>.
<LI>
<tt>InputIterator</tt>'s value type is convertible to a type in
   <tt>OutputIterator</tt>'s set of value types.
</UL>
For the second version:
<UL>
<LI>
<tt>InputIterator</tt> is a model of <A href="InputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/InputIterator.shtml">Input Iterator</A>.
<LI>
<tt>BinaryPredicate</tt> is a model of <A href="BinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryPredicate.shtml">Binary Predicate</A>. <A href="#2">[2]</A>
<LI>
<tt>InputIterator</tt>'s value type is convertible to
   first argument type and to <tt>BinaryPredicate</tt>'s second argument type.
<LI>
<tt>OutputIterator</tt> is a model of <A href="OutputIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/OutputIterator.shtml">Output Iterator</A>.
<LI>
<tt>InputIterator</tt>'s value type is convertible to a type in
   <tt>OutputIterator</tt>'s set of value types.
</UL>
<h3>Preconditions</h3>
<UL>
<LI>
<tt>[first, last)</tt> is a valid range.
<LI>
There is enough space to hold all of the elements being copied.
   More formally, if there are <tt>n</tt> elements in the range 
   <tt>[first, last)</tt> after duplicates are removed from consecutive groups,
   then <tt>[result, result + n)</tt> must be a valid range.
</UL>
<h3>Complexity</h3>
Linear.  Exactly <tt>last - first</tt> applications of <tt>operator==</tt>
(in the case of the first version of <tt>unique</tt>) or of <tt>binary_pred</tt>
(in the case of the second version), and at most <tt>last - first</tt>
assignments.
<h3>Example</h3>
Print all of the numbers in an array, but only print the first one
in a consecutive group of identical numbers.
<pre>
const int A[] = {2, 7, 7, 7, 1, 1, 8, 8, 8, 2, 8, 8};
unique_copy(A, A + sizeof(A) / sizeof(int), 
            <A href="ostream_iterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ostream_iterator.shtml">ostream_iterator</A>&lt;int&gt;(cout, &quot; &quot;));
// The output is &quot;2 7 1 8 2 8&quot;.
</pre>
<h3>Notes</h3>
<P><A name="1">[1]</A>
Strictly speaking, the first version of <tt>unique_copy</tt> is redundant:
you can achieve the same functionality by using an object of class
<tt><A href="equal_to.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/equal_to.shtml">equal_to</A></tt> as the <A href="BinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryPredicate.shtml">Binary Predicate</A> argument.  The first version
is provided strictly for the sake of convenience: testing for equality
is an important special case.
<P><A name="2">[2]</A>
<tt>BinaryPredicate</tt> is not required to be an equivalence
relation.  You should be cautious, though, about using <tt>unique_copy</tt> with a
<A href="BinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryPredicate.shtml">Binary Predicate</A> that is not an equivalence relation: you could
easily get unexpected results.
<h3>See also</h3>
<A href="BinaryPredicate.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/BinaryPredicate.shtml">Binary Predicate</A>, <tt><A href="unique.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/unique.shtml">unique</A></tt>, <tt><A href="remove_copy.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/remove_copy.shtml">remove_copy</A></tt>, <tt><A href="remove_copy_if.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/remove_copy_if.shtml">remove_copy_if</A></tt>,
<tt><A href="adjacent_find.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/adjacent_find.shtml">adjacent_find</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>