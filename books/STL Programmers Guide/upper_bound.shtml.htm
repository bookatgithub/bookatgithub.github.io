<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Zafir Anjum">
   <TITLE>upper_bound</TITLE>
    <META name="description" 
     content="A freely available implementation 
     of the C++ Standard Template Library, including 
     hypertext documentation.">
	<META name="keywords" 
	content="generic programming, STL, standard template library">
</HEAD>

<SCRIPT LANGUAGE="JavaScript"><!--
var adcategory = "cpp";
// -->
</SCRIPT>


<TITLE>CodeGuru - Visual C++</TITLE>

<META NAME="Author" CONTENT="developer.com">


<META NAME="Keywords" CONTENT="visual c++ java vb source code software downloads freeware shareware visual basic c++ web development general internet internet security news articles directory reference sample example guide tutorial help resource developer discussion earthweb developer.com">

<META NAME="description" CONTENT="Developer.com offers dedicated downloads for the IT professional developer. Features include visual c++, java, visual basic, vb, source code and more.">
<META NAME="distribution" CONTENT="global">
<META NAME="resource-type" CONTENT="document">
<META NAME="language" CONTENT="en">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#DD0000" VLINK="#999999" ALINK="#FF0000"><!-- begin main content column -->







































<BR Clear>
<H1>upper_bound</H1>

<Table CellPadding=0 CellSpacing=0 width=100%>
<TR>
<TD Align=left><Img src = "algorithms.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/algorithms.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
<TD Align=right><Img src = "function.gif" tppabs="http://codeguru.developer.com/cpp/stlguide/function.gif" Alt=""   WIDTH = "194"  HEIGHT = "38" ></TD>
</TR>
<TR>
<TD Align=left VAlign=top><b>Category</b>: algorithms</TD>
<TD Align=right VAlign=top><b>Component type</b>: function</TD>
</TR>
</Table>

<h3>Prototype</h3>
<tt>Upper_bound</tt> is an overloaded name; there are actually two <tt>upper_bound</tt>
functions.
<pre>
template &lt;class <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">ForwardIterator</A>, class <A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThanComparable</A>&gt;
ForwardIterator upper_bound(ForwardIterator first, ForwardIterator last,
                            const LessThanComparable&amp; value);

template &lt;class <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">ForwardIterator</A>, class T, class <A href="StrictWeakOrdering.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/StrictWeakOrdering.shtml">StrictWeakOrdering</A>&gt;
ForwardIterator upper_bound(ForwardIterator first, ForwardIterator last,
                            const T&amp; value, StrictWeakOrdering comp);
</pre>                   
<h3>Description</h3>
<tt>Upper_bound</tt> is a version of binary search: it attempts to find the
element <tt>value</tt> in an ordered range <tt>[first, last)</tt> <A href="#1">[1]</A>.  Specifically, it
returns the last position where <tt>value</tt> could be inserted without
violating the ordering. <A href="#2">[2]</A> The first version of <tt>upper_bound</tt>
uses <tt>operator&lt;</tt> for comparison, and the second uses the 
<A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object</A> <tt>comp</tt>.
<P>
The first version of <tt>upper_bound</tt> returns the furthermost iterator
<tt>i</tt> in <tt>[first, last)</tt> such that, for every iterator <tt>j</tt> in <tt>[first, i)</tt>,
<tt>value &lt; *j</tt> is <tt>false</tt>. 
<P>
The second version of <tt>upper_bound</tt> returns the furthermost iterator
<tt>i</tt> in <tt>[first, last)</tt> such that, for every iterator <tt>j</tt> in <tt>[first, i)</tt>,
<tt>comp(value, *j)</tt> is <tt>false</tt>.
<h3>Definition</h3>
Defined in <A href="algo.h" tppabs="http://codeguru.developer.com/cpp/stlguide/algo.h">algo.h</A>.
<h3>Requirements on types</h3>
For the first version:
<UL>
<LI>
<tt>ForwardIterator</tt> is a model of <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">Forward Iterator</A>.
<LI>
<tt>LessThanComparable</tt> is a model of <A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThan Comparable</A>.
<LI>
The ordering on objects of type <tt>LessThanComparable</tt> is a <i>strict
   weak ordering</i>, as defined in the <A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThan Comparable</A> requirements.
<LI>
<tt>ForwardIterator</tt>'s value type is the same type as <tt>LessThanComparable</tt>.
</UL>
For the second version:
<UL>
<LI>
<tt>ForwardIterator</tt> is a model of <A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">Forward Iterator</A>.
<LI>
<tt>StrictWeakOrdering</tt> is a model of <A href="StrictWeakOrdering.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/StrictWeakOrdering.shtml">Strict Weak Ordering</A>.
<LI>
<tt>ForwardIterator</tt>'s value type is the same type as <tt>T</tt>.
<LI>
<tt>ForwardIterator</tt>'s value type is convertible to <tt>StrictWeakOrdering</tt>'s
   argument type.
</UL>
<h3>Preconditions</h3>
For the first version:
<UL>
<LI>
<tt>[first, last)</tt> is a valid range.
<LI>
<tt>[first, last)</tt> is ordered in ascending order according to
   <tt>operator&lt;</tt>.  That is, for every pair of iterators <tt>i</tt> and <tt>j</tt>
   in <tt>[first, last)</tt> such that <tt>i</tt> precedes <tt>j</tt>, 
   <tt>*j &lt; *i</tt> is <tt>false</tt>.
</UL>
For the second version:
<UL>
<LI>
<tt>[first, last)</tt> is a valid range.
<LI>
<tt>[first, last)</tt> is ordered in ascending order according to
   the <A href="functors.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/functors.shtml">function object</A> <tt>comp</tt>.  That is, for every pair of iterators <tt>i</tt> and <tt>j</tt>
   in <tt>[first, last)</tt> such that <tt>i</tt> precedes <tt>j</tt>, 
   <tt>comp(*j, *i)</tt> is <tt>false</tt>.
</UL>
<h3>Complexity</h3>
The number of comparisons is logarithmic: at most <tt>log(last - first) +
1</tt>.  If <tt>ForwardIterator</tt> is a <A href="RandomAccessIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/RandomAccessIterator.shtml">Random Access Iterator</A> then the
number of steps through the range is also logarithmic; otherwise, 
the number of steps is proportional to <tt>last - first</tt>.  <A href="#3">[3]</A>
<h3>Example</h3>
<pre>
int main()
{
  int A[] = { 1, 2, 3, 3, 3, 5, 8 };
  const int N = sizeof(A) / sizeof(int);

  for (int i = 1; i &lt;= 10; ++i) {
    int* p = upper_bound(A, A + N, i);
    cout &lt;&lt; &quot;Searching for &quot; &lt;&lt; i &lt;&lt; &quot;.  &quot;;
    cout &lt;&lt; &quot;Result: index = &quot; &lt;&lt; p - A &lt;&lt; &quot;, &quot;;
    if (p != A + N)
      cout &lt;&lt; &quot;A[&quot; &lt;&lt; p - A &lt;&lt; &quot;] == &quot; &lt;&lt; *p &lt;&lt; endl;
    else
      cout &lt;&lt; &quot;which is off-the-end.&quot; &lt;&lt; endl;
  }
}
</pre>
The output is:
<pre>
Searching for 1.  Result: index = 1, A[1] == 2
Searching for 2.  Result: index = 2, A[2] == 3
Searching for 3.  Result: index = 5, A[5] == 5
Searching for 4.  Result: index = 5, A[5] == 5
Searching for 5.  Result: index = 6, A[6] == 8
Searching for 6.  Result: index = 6, A[6] == 8
Searching for 7.  Result: index = 6, A[6] == 8
Searching for 8.  Result: index = 7, which is off-the-end.
Searching for 9.  Result: index = 7, which is off-the-end.
Searching for 10.  Result: index = 7, which is off-the-end.
</pre>
<h3>Notes</h3>
<P><A name="1">[1]</A>
Note that you may use an ordering that is a strict weak ordering
but not a total ordering; that is, there might be values <tt>x</tt> and <tt>y</tt>
such that <tt>x &lt; y</tt>, <tt>x &gt; y</tt>, and <tt>x == y</tt> are all <tt>false</tt>.  (See the
<A href="LessThanComparable.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/LessThanComparable.shtml">LessThan Comparable</A> requirements for a more complete discussion.)
Finding <tt>value</tt> in the range <tt>[first, last)</tt>, then, doesn't mean
finding an element that is equal to <tt>value</tt> but rather one that is
<i>equivalent to</i> <tt>value</tt>: one that is neither greater than nor less
than <tt>value</tt>.  If you're using a total ordering, however (if you're
using <tt>strcmp</tt>, for example, or if you're using ordinary arithmetic
comparison on integers), then you can ignore this technical
distinction: for a total ordering, equality and equivalence are
the same.
<P><A name="2">[2]</A>
Note that even if an element that is equivalent to <A href="#1">[1]</A> <tt>value</tt> is
already present in the range <tt>[first, last)</tt>, the return value of
<tt>upper_bound</tt> will not point to that element.  The return value is
either <tt>last</tt> or else an iterator <tt>i</tt> such that <tt>value &lt; *i</tt>.  If <tt>i</tt>
is not equal to <tt>first</tt>, however, then <tt>*(i - 1)</tt> is less than or
equivalent to <tt>value</tt>.
<P><A name="3">[3]</A>
This difference between <A href="RandomAccessIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/RandomAccessIterator.shtml">Random Access Iterators</A> and
<A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">Forward Iterators</A> is simply because <tt><A href="advance.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/advance.shtml">advance</A></tt> is constant
time for <A href="RandomAccessIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/RandomAccessIterator.shtml">Random Access Iterators</A> and linear time for 
<A href="ForwardIterator.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/ForwardIterator.shtml">Forward Iterators</A>.
<h3>See also</h3>
<tt><A href="lower_bound.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/lower_bound.shtml">lower_bound</A></tt>, <tt><A href="equal_range.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/equal_range.shtml">equal_range</A></tt>, <tt><A href="binary_search.shtml.htm" tppabs="http://codeguru.developer.com/cpp/stlguide/binary_search.shtml">binary_search</A></tt>

<HR SIZE="6"> <FONT SIZE="-2"> Copyright &copy; 1996 Silicon Graphics, Inc.


</td>

<td valign="top" width="20">&nbsp;&nbsp;&nbsp;</td>

</BODY>
</HTML>